"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Percentages_1 = require("./Percentages");
let NONCE = 0;
class ProgressTracker {
    constructor(total, id) {
        this.epoch = Date.now();
        this.state = {
            task: NONCE++,
            id,
            completed: 0,
            total,
            duration: 0,
            progress: 0
        };
        if (this.state.total === 0) {
            this.state.progress = 100;
        }
    }
    abs(value) {
        this.state.completed = value;
        this.state.progress = this.calculate();
        this.state.duration = Date.now() - this.epoch;
        return this.peek();
    }
    incr(value = 1) {
        return this.abs(this.state.completed + value);
    }
    terminate() {
        this.state.completed = this.state.total;
        this.state.progress = this.calculate();
        this.state.duration = Date.now() - this.epoch;
        return this.peek();
    }
    peek() {
        return Object.freeze(Object.assign({}, this.state));
    }
    calculate() {
        if (this.state.total === 0) {
            return 100;
        }
        const result = Percentages_1.Percentages.calculate(this.state.completed, this.state.total);
        if (result < 0 || result > 100) {
            const msg = `Invalid percentage: ${result}: completed: ${this.state.completed} vs total: ${this.state.total}`;
            throw new Error(msg);
        }
        return result;
    }
    static createNonce() {
        return NONCE++;
    }
}
exports.ProgressTracker = ProgressTracker;
class ProgressStates {
}
exports.ProgressStates = ProgressStates;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvZ3Jlc3NUcmFja2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUHJvZ3Jlc3NUcmFja2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0NBQTBDO0FBRTFDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztBQU1kLE1BQWEsZUFBZTtJQU14QixZQUFZLEtBQWEsRUFBRSxFQUFVO1FBRWpDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRXhCLElBQUksQ0FBQyxLQUFLLEdBQUc7WUFDVCxJQUFJLEVBQUUsS0FBSyxFQUFFO1lBQ2IsRUFBRTtZQUNGLFNBQVMsRUFBRSxDQUFDO1lBQ1osS0FBSztZQUNMLFFBQVEsRUFBRSxDQUFDO1lBQ1gsUUFBUSxFQUFFLENBQUM7U0FDZCxDQUFDO1FBRUYsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxDQUFDLEVBQUU7WUFFeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO1NBQzdCO0lBRUwsQ0FBQztJQU9NLEdBQUcsQ0FBQyxLQUFhO1FBQ3BCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDdkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDOUMsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQU1NLElBQUksQ0FBQyxRQUFnQixDQUFDO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBTU0sU0FBUztRQUNaLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN2QyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM5QyxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBS00sSUFBSTtRQUNQLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRU8sU0FBUztRQUViLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ3hCLE9BQU8sR0FBRyxDQUFDO1NBQ2Q7UUFFRCxNQUFNLE1BQU0sR0FBRyx5QkFBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTdFLElBQUksTUFBTSxHQUFHLENBQUMsSUFBSSxNQUFNLEdBQUcsR0FBRyxFQUFFO1lBQzVCLE1BQU0sR0FBRyxHQUFHLHVCQUF1QixNQUFNLGdCQUFnQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsY0FBYyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzlHLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDeEI7UUFFRCxPQUFvQixNQUFNLENBQUM7SUFFL0IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxXQUFXO1FBQ3JCLE9BQU8sS0FBSyxFQUFFLENBQUM7SUFDbkIsQ0FBQztDQUVKO0FBckZELDBDQXFGQztBQWFELE1BQWEsY0FBYztDQVUxQjtBQVZELHdDQVVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQZXJjZW50YWdlc30gZnJvbSBcIi4vUGVyY2VudGFnZXNcIjtcblxubGV0IE5PTkNFID0gMDtcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBwcm9ncmVzcyBvZiBhIHN0YXRlIG9mIHRhc2tzIGFuZCBhbGxvd3MgdXMgdG8ganVzdCBpbmNyKClcbiAqIHRoZSBwcm9ncmVzcyBpbiBhIGxvb3AgcmF0aGVyIHRoYW4gaGF2aW5nIHRoZSBtYXRoIGV4cG9zZWQgaW4gdGhlIGxvb3AuXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9ncmVzc1RyYWNrZXIge1xuXG4gICAgcHJpdmF0ZSBzdGF0ZTogUHJvZ3Jlc3M7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGVwb2NoOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcih0b3RhbDogbnVtYmVyLCBpZDogc3RyaW5nKSB7XG5cbiAgICAgICAgdGhpcy5lcG9jaCA9IERhdGUubm93KCk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHRhc2s6IE5PTkNFKyssXG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIGNvbXBsZXRlZDogMCxcbiAgICAgICAgICAgIHRvdGFsLFxuICAgICAgICAgICAgZHVyYXRpb246IDAsXG4gICAgICAgICAgICBwcm9ncmVzczogMFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnRvdGFsID09PSAwKSB7XG4gICAgICAgICAgICAvLyB3ZSdyZSBkb25lIHdoZW4gdGhlcmUgYXJlZSBubyB0YXNrcy5cbiAgICAgICAgICAgIHRoaXMuc3RhdGUucHJvZ3Jlc3MgPSAxMDA7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2dyZXNzIGFzIGFuIGFic29sdXRlIHZhbHVlLiAgVXNlZCBmb3IgY291bnRlcnMgbGlrZSByZWNlaXZlZCBieXRlc1xuICAgICAqIHRoYXQgYXJlbid0IGRlbHRhcyBidXQgYXJlIGFic29sdXRlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqL1xuICAgIHB1YmxpYyBhYnModmFsdWU6IG51bWJlcik6IFJlYWRvbmx5PFByb2dyZXNzPiB7XG4gICAgICAgIHRoaXMuc3RhdGUuY29tcGxldGVkID0gdmFsdWU7XG4gICAgICAgIHRoaXMuc3RhdGUucHJvZ3Jlc3MgPSB0aGlzLmNhbGN1bGF0ZSgpO1xuICAgICAgICB0aGlzLnN0YXRlLmR1cmF0aW9uID0gRGF0ZS5ub3coKSAtIHRoaXMuZXBvY2g7XG4gICAgICAgIHJldHVybiB0aGlzLnBlZWsoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbmNyZW1lbnQgdGhlIHByb2dyZXNzIG9mIHRoZSBqb2IgYnkgb25lLCBjb21wdXRlIHRoZSB1cGRhdGVkIHN0YXRlLFxuICAgICAqIGFuZCByZXR1cm4uXG4gICAgICovXG4gICAgcHVibGljIGluY3IodmFsdWU6IG51bWJlciA9IDEpOiBSZWFkb25seTxQcm9ncmVzcz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5hYnModGhpcy5zdGF0ZS5jb21wbGV0ZWQgKyB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBzbyB0aGF0IHdlIGNhbiBqdW1wIHRvIHRoZSBlbmQgdGhlIGpvYiBhcyBpdCdzIHRlcm1pbmF0ZWQuXG4gICAgICpcbiAgICAgKi9cbiAgICBwdWJsaWMgdGVybWluYXRlKCk6IFJlYWRvbmx5PFByb2dyZXNzPiB7XG4gICAgICAgIHRoaXMuc3RhdGUuY29tcGxldGVkID0gdGhpcy5zdGF0ZS50b3RhbDtcbiAgICAgICAgdGhpcy5zdGF0ZS5wcm9ncmVzcyA9IHRoaXMuY2FsY3VsYXRlKCk7XG4gICAgICAgIHRoaXMuc3RhdGUuZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gdGhpcy5lcG9jaDtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVlaygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIGN1cnJlbnQgdmlldyBvZiB0aGUgcHJvZ3Jlc3Mgc3RhdGUuXG4gICAgICovXG4gICAgcHVibGljIHBlZWsoKTogUmVhZG9ubHk8UHJvZ3Jlc3M+IHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5mcmVlemUoT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdGF0ZSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2FsY3VsYXRlKCk6IFBlcmNlbnRhZ2Uge1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnRvdGFsID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMTAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gUGVyY2VudGFnZXMuY2FsY3VsYXRlKHRoaXMuc3RhdGUuY29tcGxldGVkLCB0aGlzLnN0YXRlLnRvdGFsKTtcblxuICAgICAgICBpZiAocmVzdWx0IDwgMCB8fCByZXN1bHQgPiAxMDApIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9IGBJbnZhbGlkIHBlcmNlbnRhZ2U6ICR7cmVzdWx0fTogY29tcGxldGVkOiAke3RoaXMuc3RhdGUuY29tcGxldGVkfSB2cyB0b3RhbDogJHt0aGlzLnN0YXRlLnRvdGFsfWA7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiA8UGVyY2VudGFnZT4gcmVzdWx0O1xuXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVOb25jZSgpIHtcbiAgICAgICAgcmV0dXJuIE5PTkNFKys7XG4gICAgfVxuXG59XG5cbmV4cG9ydCB0eXBlIFByb2dyZXNzTGlzdGVuZXIgPSAocHJvZ3Jlc3NTdGF0ZTogUHJvZ3Jlc3MpID0+IHZvaWQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvZ3Jlc3Mge1xuICAgIHRhc2s6IFRhc2tJRDtcbiAgICBjb21wbGV0ZWQ6IG51bWJlcjtcbiAgICB0b3RhbDogbnVtYmVyO1xuICAgIGR1cmF0aW9uOiBudW1iZXI7XG4gICAgcHJvZ3Jlc3M6IFBlcmNlbnRhZ2U7XG4gICAgaWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFByb2dyZXNzU3RhdGVzIHtcblxuICAgIC8vIHB1YmxpYyBzdGF0aWMgY2FsY3VsYXRlKGNvbXBsZXRlZDogbnVtYmVyLCB0b3RhbDogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyLCBpZDogc3RyaW5nKTogUmVhZG9ubHk8UHJvZ3Jlc3NTdGF0ZT4ge1xuICAgIC8vXG4gICAgLy8gICAgIGNvbnN0IHByb2dyZXNzID0gPFBlcmNlbnRhZ2U+IFBlcmNlbnRhZ2VzLmNhbGN1bGF0ZShjb21wbGV0ZWQsIHRvdGFsKTtcbiAgICAvL1xuICAgIC8vICAgICByZXR1cm4ge3Rhc2s6IDAsIGNvbXBsZXRlZCwgdG90YWwsIGR1cmF0aW9uLCBwcm9ncmVzcywgaWR9O1xuICAgIC8vXG4gICAgLy8gfVxuXG59XG5cbi8qKlxuICogQSB1bmlxdWUgdGFzayBJRCBmb3IgdGhlIGpvYiB1c2luZyB0aGUgUHJvZ3Jlc3NUcmFja2VyLlxuICovXG5leHBvcnQgdHlwZSBUYXNrSUQgPSBudW1iZXI7XG5cbi8qKlxuICogQW4gYWN0dWFsIHBlcmNlbnRhZ2UgdmFsdWUgYmV0d2VlbiB6ZXJvIGFuZCAxMDAgWzAsMTAwXVxuICovXG5leHBvcnQgdHlwZSBQZXJjZW50YWdlID0gMCAgfCAgMSB8ICAyIHwgIDMgfCAgNCB8ICA1IHwgIDYgfCAgNyB8ICA4IHwgIDkgfFxuICAgICAgICAgICAgICAgICAgICAgICAgIDEwIHwgMTEgfCAxMiB8IDEzIHwgMTQgfCAxNSB8IDE2IHwgMTcgfCAxOCB8IDE5IHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAyMCB8IDIxIHwgMjIgfCAyMyB8IDI0IHwgMjUgfCAyNiB8IDI3IHwgMjggfCAyOSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgMzAgfCAzMSB8IDMyIHwgMzMgfCAzNCB8IDM1IHwgMzYgfCAzNyB8IDM4IHwgMzkgfFxuICAgICAgICAgICAgICAgICAgICAgICAgIDQwIHwgNDEgfCA0MiB8IDQzIHwgNDQgfCA0NSB8IDQ2IHwgNDcgfCA0OCB8IDQ5IHxcbiAgICAgICAgICAgICAgICAgICAgICAgICA1MCB8IDUxIHwgNTIgfCA1MyB8IDU0IHwgNTUgfCA1NiB8IDU3IHwgNTggfCA1OSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgNjAgfCA2MSB8IDYyIHwgNjMgfCA2NCB8IDY1IHwgNjYgfCA2NyB8IDY4IHwgNjkgfFxuICAgICAgICAgICAgICAgICAgICAgICAgIDcwIHwgNzEgfCA3MiB8IDczIHwgNzQgfCA3NSB8IDc2IHwgNzcgfCA3OCB8IDc5IHxcbiAgICAgICAgICAgICAgICAgICAgICAgICA4MCB8IDgxIHwgODIgfCA4MyB8IDg0IHwgODUgfCA4NiB8IDg3IHwgODggfCA4OSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgOTAgfCA5MSB8IDkyIHwgOTMgfCA5NCB8IDk1IHwgOTYgfCA5NyB8IDk4IHwgOTkgfFxuICAgICAgICAgICAgICAgICAgICAgICAgIDEwMDtcblxuIl19