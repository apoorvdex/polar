"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Preconditions_1 = require("../Preconditions");
const Optional_1 = require("./ts/Optional");
const Strings_1 = require("./Strings");
class Styles {
    static parsePX(value) {
        Preconditions_1.Preconditions.assertNotNull(value, "value");
        if (Strings_1.Strings.empty(value)) {
            throw new Error("Empty string given");
        }
        return parseInt(value.replace("px", ""));
    }
    static positioning(element) {
        const result = {
            left: undefined,
            top: undefined,
            right: undefined,
            bottom: undefined,
            width: undefined,
            height: undefined,
        };
        Object.keys(result).forEach(key => {
            if (result.hasOwnProperty(key)) {
                result[key] = Optional_1.Optional.of(element.style.getPropertyValue(key))
                    .filter(current => current !== null && current !== undefined)
                    .map((current) => current.toString())
                    .filter(current => current !== null && current !== "")
                    .getOrUndefined();
            }
        });
        return result;
    }
    static positioningToPX(positioning) {
        let result = {
            left: undefined,
            top: undefined,
            right: undefined,
            bottom: undefined,
            width: undefined,
            height: undefined,
        };
        for (let key in positioning) {
            if (!positioning.hasOwnProperty(key)) {
                continue;
            }
            result[key] = Optional_1.Optional.of(positioning[key])
                .map(current => Styles.parsePX(current))
                .getOrUndefined();
        }
        return result;
    }
}
exports.Styles = Styles;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3R5bGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0RBQStDO0FBQy9DLDRDQUF1QztBQUN2Qyx1Q0FBa0M7QUFFbEMsTUFBYSxNQUFNO0lBT2YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFnQztRQUUzQyw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFNUMsSUFBRyxpQkFBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7U0FDekM7UUFFRCxPQUFPLFFBQVEsQ0FBQyxLQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFNTSxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQW9CO1FBRTFDLE1BQU0sTUFBTSxHQUFnQjtZQUN4QixJQUFJLEVBQUUsU0FBUztZQUNmLEdBQUcsRUFBRSxTQUFTO1lBQ2QsS0FBSyxFQUFFLFNBQVM7WUFDaEIsTUFBTSxFQUFFLFNBQVM7WUFDakIsS0FBSyxFQUFFLFNBQVM7WUFDaEIsTUFBTSxFQUFFLFNBQVM7U0FDcEIsQ0FBQztRQUVGLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBRTlCLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFFNUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLG1CQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7cUJBQ3pELE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sS0FBSyxJQUFJLElBQUksT0FBTyxLQUFLLFNBQVMsQ0FBQztxQkFDNUQsR0FBRyxDQUFDLENBQUMsT0FBWSxFQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7cUJBQ2pELE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sS0FBSyxJQUFJLElBQUksT0FBTyxLQUFLLEVBQUUsQ0FBQztxQkFDckQsY0FBYyxFQUFFLENBQUM7YUFDekI7UUFFTCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDO0lBRWxCLENBQUM7SUFPRCxNQUFNLENBQUMsZUFBZSxDQUFDLFdBQXdCO1FBRTNDLElBQUksTUFBTSxHQUFrQjtZQUN4QixJQUFJLEVBQUUsU0FBUztZQUNmLEdBQUcsRUFBRSxTQUFTO1lBQ2QsS0FBSyxFQUFFLFNBQVM7WUFDaEIsTUFBTSxFQUFFLFNBQVM7WUFDakIsS0FBSyxFQUFFLFNBQVM7WUFDaEIsTUFBTSxFQUFFLFNBQVM7U0FDcEIsQ0FBQztRQUVGLEtBQUksSUFBSSxHQUFHLElBQUksV0FBVyxFQUFFO1lBRXhCLElBQUcsQ0FBRSxXQUFXLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNsQyxTQUFTO2FBQ1o7WUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsbUJBQVEsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUN0QyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUN2QyxjQUFjLEVBQUUsQ0FBQztTQUV6QjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBRWxCLENBQUM7Q0FFSjtBQWxGRCx3QkFrRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1ByZWNvbmRpdGlvbnN9IGZyb20gJy4uL1ByZWNvbmRpdGlvbnMnO1xuaW1wb3J0IHtPcHRpb25hbH0gZnJvbSAnLi90cy9PcHRpb25hbCc7XG5pbXBvcnQge1N0cmluZ3N9IGZyb20gJy4vU3RyaW5ncyc7XG5cbmV4cG9ydCBjbGFzcyBTdHlsZXMge1xuXG4gICAgLyoqXG4gICAgICogUGFyc2UgdGhlIGFtb3VudCBvZiBwaXhlbHMgZnJvbSB0aGUgZ2l2ZW4gdmFsdWUuICBSaWdodCBub3cgd2Ugb25seVxuICAgICAqIHN1cHBvcnQgcHggYnV0IGluIHRoZSBmdXR1cmUgd2UgY291bGQgc3VwcG9ydCBvdGhlciB0eXBlcy5cbiAgICAgKlxuICAgICAqL1xuICAgIHN0YXRpYyBwYXJzZVBYKHZhbHVlOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkKTogbnVtYmVyIHtcblxuICAgICAgICBQcmVjb25kaXRpb25zLmFzc2VydE5vdE51bGwodmFsdWUsIFwidmFsdWVcIik7XG5cbiAgICAgICAgaWYoU3RyaW5ncy5lbXB0eSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVtcHR5IHN0cmluZyBnaXZlblwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSEucmVwbGFjZShcInB4XCIsIFwiXCIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIHRvcCwgbGVmdCwgd2lkdGgsIGFuZCBoZWlnaHQgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHBvc2l0aW9uaW5nKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0OiBQb3NpdGlvbmluZyA9IHtcbiAgICAgICAgICAgIGxlZnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRvcDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcmlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGJvdHRvbTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgd2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGhlaWdodDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuXG4gICAgICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChrZXkgPT4ge1xuXG4gICAgICAgICAgICBpZiAocmVzdWx0Lmhhc093blByb3BlcnR5KGtleSkpIHtcblxuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gT3B0aW9uYWwub2YoZWxlbWVudC5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKGtleSkpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoY3VycmVudCA9PiBjdXJyZW50ICE9PSBudWxsICYmIGN1cnJlbnQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoY3VycmVudDogYW55KTogc3RyaW5nID0+IGN1cnJlbnQudG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihjdXJyZW50ID0+IGN1cnJlbnQgIT09IG51bGwgJiYgY3VycmVudCAhPT0gXCJcIilcbiAgICAgICAgICAgICAgICAgICAgLmdldE9yVW5kZWZpbmVkKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYWxsIHRoZSBwb3NpdGlvbmluZyBrZXlzIHRvIHBpeGVscy5cbiAgICAgKi9cbiAgICBzdGF0aWMgcG9zaXRpb25pbmdUb1BYKHBvc2l0aW9uaW5nOiBQb3NpdGlvbmluZyk6IFBvc2l0aW9uaW5nUFgge1xuXG4gICAgICAgIGxldCByZXN1bHQ6IFBvc2l0aW9uaW5nUFggPSB7XG4gICAgICAgICAgICBsZWZ0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0b3A6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHJpZ2h0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBib3R0b206IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHdpZHRoOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBoZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcblxuICAgICAgICBmb3IobGV0IGtleSBpbiBwb3NpdGlvbmluZykge1xuXG4gICAgICAgICAgICBpZighIHBvc2l0aW9uaW5nLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBPcHRpb25hbC5vZihwb3NpdGlvbmluZ1trZXldKVxuICAgICAgICAgICAgICAgIC5tYXAoY3VycmVudCA9PiBTdHlsZXMucGFyc2VQWChjdXJyZW50KSlcbiAgICAgICAgICAgICAgICAuZ2V0T3JVbmRlZmluZWQoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIH1cblxufVxuXG50eXBlIFBvc2l0aW9uaW5nSW5kZXggPSB7W2tleTogc3RyaW5nXTogc3RyaW5nIHwgdW5kZWZpbmVkfVxuXG5leHBvcnQgaW50ZXJmYWNlIFBvc2l0aW9uaW5nIGV4dGVuZHMgUG9zaXRpb25pbmdJbmRleCB7XG4gICAgbGVmdDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgIHRvcDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgIHJpZ2h0OiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgYm90dG9tOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgd2lkdGg6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICBoZWlnaHQ6IHN0cmluZyB8IHVuZGVmaW5lZCxcbn1cblxudHlwZSBQb3NpdGlvbmluZ1BYSW5kZXggPSB7W2tleTogc3RyaW5nXTogbnVtYmVyIHwgdW5kZWZpbmVkfVxuXG5leHBvcnQgaW50ZXJmYWNlIFBvc2l0aW9uaW5nUFggZXh0ZW5kcyBQb3NpdGlvbmluZ1BYSW5kZXgge1xuICAgIGxlZnQ6IG51bWJlciB8IHVuZGVmaW5lZCxcbiAgICB0b3A6IG51bWJlciB8IHVuZGVmaW5lZCxcbiAgICByaWdodDogbnVtYmVyIHwgdW5kZWZpbmVkLFxuICAgIGJvdHRvbTogbnVtYmVyIHwgdW5kZWZpbmVkLFxuICAgIHdpZHRoOiBudW1iZXIgfCB1bmRlZmluZWQsXG4gICAgaGVpZ2h0OiBudW1iZXIgfCB1bmRlZmluZWQsXG59XG5cblxuXG5cblxuIl19