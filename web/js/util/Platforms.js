"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Platforms {
    static get() {
        if (typeof process !== 'undefined' && process.platform) {
            switch (process.platform.toLowerCase()) {
                case 'win32':
                    return Platform.WINDOWS;
                case 'darwin':
                    return Platform.MACOS;
                case 'linux':
                    return Platform.LINUX;
            }
        }
        if (typeof navigator !== 'undefined') {
            if (navigator.platform) {
                if (navigator.platform.startsWith("MacIntel")) {
                    return Platform.MACOS;
                }
                else if (navigator.platform.startsWith("MacPPC")) {
                    return Platform.MACOS;
                }
                else if (navigator.platform.startsWith("Linux")) {
                    return Platform.LINUX;
                }
                else if (navigator.platform.startsWith("Win32")) {
                    return Platform.WINDOWS;
                }
                else if (navigator.platform.startsWith("Win64")) {
                    return Platform.WINDOWS;
                }
                else if (navigator.platform.startsWith("Android")) {
                    return Platform.ANDROID;
                }
                else if (navigator.platform.startsWith("iPhone")) {
                    return Platform.IOS;
                }
                else if (navigator.platform.startsWith("iPad")) {
                    return Platform.IOS;
                }
            }
        }
        return Platform.UNKNOWN;
    }
    static type() {
        const platform = this.get();
        if ([Platform.MACOS, Platform.WINDOWS, Platform.LINUX].includes(platform)) {
            return 'desktop';
        }
        if ([Platform.ANDROID, Platform.IOS].includes(platform)) {
            return 'mobile';
        }
        return 'unknown';
    }
    static toSymbol(value) {
        return Platform[value];
    }
}
exports.Platforms = Platforms;
var Platform;
(function (Platform) {
    Platform[Platform["MACOS"] = 0] = "MACOS";
    Platform[Platform["WINDOWS"] = 1] = "WINDOWS";
    Platform[Platform["LINUX"] = 2] = "LINUX";
    Platform[Platform["ANDROID"] = 3] = "ANDROID";
    Platform[Platform["IOS"] = 4] = "IOS";
    Platform[Platform["UNKNOWN"] = 5] = "UNKNOWN";
})(Platform = exports.Platform || (exports.Platform = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGxhdGZvcm1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUGxhdGZvcm1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBYSxTQUFTO0lBY1gsTUFBTSxDQUFDLEdBQUc7UUFFYixJQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO1lBSXBELFFBQVEsT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsRUFBRTtnQkFFcEMsS0FBSyxPQUFPO29CQUNSLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQztnQkFFNUIsS0FBSyxRQUFRO29CQUNULE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQztnQkFFMUIsS0FBSyxPQUFPO29CQUNSLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQzthQUU3QjtTQUVKO1FBRUQsSUFBSSxPQUFPLFNBQVMsS0FBSyxXQUFXLEVBQUU7WUFFbEMsSUFBSSxTQUFTLENBQUMsUUFBUSxFQUFFO2dCQUVwQixJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFO29CQUMzQyxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUM7aUJBQ3pCO3FCQUFNLElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7b0JBQ2hELE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQztpQkFDekI7cUJBQU0sSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRTtvQkFDL0MsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDO2lCQUN6QjtxQkFBTSxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUMvQyxPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUM7aUJBQzNCO3FCQUFNLElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQy9DLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQztpQkFDM0I7cUJBQU0sSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRTtvQkFDakQsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDO2lCQUMzQjtxQkFBTSxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO29CQUNoRCxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUM7aUJBQ3ZCO3FCQUFNLElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQzlDLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQztpQkFDdkI7YUFFSjtTQUVKO1FBSUQsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDO0lBRTVCLENBQUM7SUFLTSxNQUFNLENBQUMsSUFBSTtRQUVkLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDdkUsT0FBTyxTQUFTLENBQUM7U0FDcEI7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3JELE9BQU8sUUFBUSxDQUFDO1NBQ25CO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFFckIsQ0FBQztJQUtNLE1BQU0sQ0FBQyxRQUFRLENBQUksS0FBdUI7UUFDN0MsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0IsQ0FBQztDQUVKO0FBN0ZELDhCQTZGQztBQUVELElBQVksUUFPWDtBQVBELFdBQVksUUFBUTtJQUNoQix5Q0FBSyxDQUFBO0lBQ0wsNkNBQU8sQ0FBQTtJQUNQLHlDQUFLLENBQUE7SUFDTCw2Q0FBTyxDQUFBO0lBQ1AscUNBQUcsQ0FBQTtJQUNILDZDQUFPLENBQUE7QUFDWCxDQUFDLEVBUFcsUUFBUSxHQUFSLGdCQUFRLEtBQVIsZ0JBQVEsUUFPbkIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgUGxhdGZvcm1zIHtcblxuICAgIC8qXG4gICAgICpcbiAgICAgKiBUaGUgdmFyaWFibGUgdG8gdXNlIHdvdWxkIGJlIHByb2Nlc3MucGxhdGZvcm1cbiAgICAgKlxuICAgICAqIE9uIE1hYyB0aGUgdmFyaWFibGUgcmV0dXJucyBkYXJ3aW4uIE9uIFdpbmRvd3MsIGl0IHJldHVybnMgd2luMzIgKGV2ZW4gb24gNjQgYml0KS5cbiAgICAgKlxuICAgICAqIFBvc3NpYmxlIHZhbHVlcyBhcmU6ICdkYXJ3aW4nLCAnZnJlZWJzZCcsICdsaW51eCcsICdzdW5vcycgb3IgJ3dpbjMyJ1xuICAgICAqXG4gICAgICogSSBqdXN0IHNldCB0aGlzIGF0IHRoZSB0b3Agb2YgbXkgamFrZUZpbGU6XG4gICAgICpcbiAgICAgKiB2YXIgaXNXaW4gPSBwcm9jZXNzLnBsYXRmb3JtID09PSBcIndpbjMyXCI7XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBnZXQoKTogUGxhdGZvcm0ge1xuXG4gICAgICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5wbGF0Zm9ybSkge1xuXG4gICAgICAgICAgICAvLyBOb2RlSlMgYW5kIEVsZWN0cm9uXG5cbiAgICAgICAgICAgIHN3aXRjaCAocHJvY2Vzcy5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpKSB7XG5cbiAgICAgICAgICAgICAgICBjYXNlICd3aW4zMic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQbGF0Zm9ybS5XSU5ET1dTO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnZGFyd2luJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBsYXRmb3JtLk1BQ09TO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnbGludXgnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGxhdGZvcm0uTElOVVg7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnKSB7XG5cbiAgICAgICAgICAgIGlmIChuYXZpZ2F0b3IucGxhdGZvcm0pIHtcblxuICAgICAgICAgICAgICAgIGlmIChuYXZpZ2F0b3IucGxhdGZvcm0uc3RhcnRzV2l0aChcIk1hY0ludGVsXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQbGF0Zm9ybS5NQUNPUztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5hdmlnYXRvci5wbGF0Zm9ybS5zdGFydHNXaXRoKFwiTWFjUFBDXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQbGF0Zm9ybS5NQUNPUztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5hdmlnYXRvci5wbGF0Zm9ybS5zdGFydHNXaXRoKFwiTGludXhcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBsYXRmb3JtLkxJTlVYO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobmF2aWdhdG9yLnBsYXRmb3JtLnN0YXJ0c1dpdGgoXCJXaW4zMlwiKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGxhdGZvcm0uV0lORE9XUztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5hdmlnYXRvci5wbGF0Zm9ybS5zdGFydHNXaXRoKFwiV2luNjRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBsYXRmb3JtLldJTkRPV1M7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuYXZpZ2F0b3IucGxhdGZvcm0uc3RhcnRzV2l0aChcIkFuZHJvaWRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBsYXRmb3JtLkFORFJPSUQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuYXZpZ2F0b3IucGxhdGZvcm0uc3RhcnRzV2l0aChcImlQaG9uZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGxhdGZvcm0uSU9TO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobmF2aWdhdG9yLnBsYXRmb3JtLnN0YXJ0c1dpdGgoXCJpUGFkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQbGF0Zm9ybS5JT1M7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG90aGVyd2lzZSBnZXQgaXQgZnJvbSB0aGUgdXNlciBhZ2VudC5cblxuICAgICAgICByZXR1cm4gUGxhdGZvcm0uVU5LTk9XTjtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgcGxhdGZvcm0gdHlwZSAoZGVza3RvcCBvciBtb2JpbGUpXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyB0eXBlKCkge1xuXG4gICAgICAgIGNvbnN0IHBsYXRmb3JtID0gdGhpcy5nZXQoKTtcblxuICAgICAgICBpZiAoW1BsYXRmb3JtLk1BQ09TLCBQbGF0Zm9ybS5XSU5ET1dTLCBQbGF0Zm9ybS5MSU5VWF0uaW5jbHVkZXMocGxhdGZvcm0pKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2Rlc2t0b3AnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFtQbGF0Zm9ybS5BTkRST0lELCBQbGF0Zm9ybS5JT1NdLmluY2x1ZGVzKHBsYXRmb3JtKSkge1xuICAgICAgICAgICAgcmV0dXJuICdtb2JpbGUnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICd1bmtub3duJztcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc3ltYm9sIG5hbWUgZm9yIHRoZSBlbnVtLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgdG9TeW1ib2w8VD4odmFsdWU6IFBsYXRmb3JtRW51bVR5cGUpIHtcbiAgICAgICAgcmV0dXJuIFBsYXRmb3JtW3ZhbHVlXTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGVudW0gUGxhdGZvcm0ge1xuICAgIE1BQ09TLFxuICAgIFdJTkRPV1MsXG4gICAgTElOVVgsXG4gICAgQU5EUk9JRCxcbiAgICBJT1MsXG4gICAgVU5LTk9XTlxufVxuXG5leHBvcnQgdHlwZSBQbGF0Zm9ybUVudW1UeXBlXG4gICAgPSBQbGF0Zm9ybS5XSU5ET1dTIHxcbiAgICAgIFBsYXRmb3JtLk1BQ09TIHxcbiAgICAgIFBsYXRmb3JtLkxJTlVYIHxcbiAgICAgIFBsYXRmb3JtLkFORFJPSUQgfFxuICAgICAgUGxhdGZvcm0uSU9TIHxcbiAgICAgIFBsYXRmb3JtLlVOS05PV047XG5cbmV4cG9ydCB0eXBlIFBsYXRmb3JtVHlwZSA9ICdkZXNrdG9wJyB8ICdtb2JpbGUnIHwgJ3RhYmxldCcgfCAndW5rbm93bic7XG4iXX0=