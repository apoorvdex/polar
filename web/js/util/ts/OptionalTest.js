"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const Optional_1 = require("./Optional");
describe('Optional', function () {
    it("Test nullable object", function () {
        const state = {
            zip: "94107"
        };
        const zip = Optional_1.Optional.of(state)
            .map(current => current.zip)
            .map(current => parseInt(current, 10))
            .get();
        chai_1.assert.equal(zip, 94107);
    });
    it("Change type within map function", function () {
        const value = Optional_1.Optional.of('100')
            .map(current => parseInt(current, 10))
            .filter(current => current === 100)
            .get();
        chai_1.assert.equal(value, 100);
    });
    it("first", function () {
        chai_1.assert.equal(Optional_1.Optional.first(undefined, 'second').get(), 'second');
        chai_1.assert.equal(Optional_1.Optional.first('first', undefined).get(), 'first');
        chai_1.assert.equal(Optional_1.Optional.first(null, 'second').get(), 'second');
        chai_1.assert.equal(Optional_1.Optional.first('first', null).get(), 'first');
    });
    describe('validateString', function () {
        it("valid data", function () {
            chai_1.assert.equal(Optional_1.Optional.of('hello').validateString().get(), 'hello');
        });
        it("invalid data", function () {
            chai_1.assert.equal(Optional_1.Optional.of(666).validateString().getOrUndefined(), undefined);
        });
    });
    describe('validateNumber', function () {
        it("valid data", function () {
            chai_1.assert.equal(Optional_1.Optional.of(101).validateNumber().get(), 101);
        });
        it("invalid data", function () {
            chai_1.assert.equal(Optional_1.Optional.of('asdf').validateNumber().getOrUndefined(), undefined);
        });
    });
    describe('validateBoolean', function () {
        it("valid data", function () {
            chai_1.assert.equal(Optional_1.Optional.of(false).validateBoolean().get(), false);
        });
        it("invalid data", function () {
            chai_1.assert.equal(Optional_1.Optional.of('hello').validateBoolean().getOrUndefined(), undefined);
        });
    });
    describe('mapping non-nullable', function () {
        it("basic", function () {
            const test = {
                state: 'CA'
            };
            const optional = Optional_1.Optional.of(test);
            const mapped = optional.map(current => current.state);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3B0aW9uYWxUZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiT3B0aW9uYWxUZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQTRCO0FBQzVCLHlDQUFvQztBQUVwQyxRQUFRLENBQUMsVUFBVSxFQUFFO0lBRWpCLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRTtRQVN2QixNQUFNLEtBQUssR0FBaUI7WUFDeEIsR0FBRyxFQUFFLE9BQU87U0FDZixDQUFDO1FBRUYsTUFBTSxHQUFHLEdBQUcsbUJBQVEsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO2FBQ3pCLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7YUFDM0IsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQzthQUNyQyxHQUFHLEVBQUUsQ0FBQztRQUVYLGFBQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRTdCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGlDQUFpQyxFQUFFO1FBRWxDLE1BQU0sS0FBSyxHQUFHLG1CQUFRLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQzthQUMzQixHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQ3JDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sS0FBSyxHQUFHLENBQUM7YUFDbEMsR0FBRyxFQUFFLENBQUM7UUFFWCxhQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUU3QixDQUFDLENBQUMsQ0FBQztJQUdILEVBQUUsQ0FBQyxPQUFPLEVBQUU7UUFFUixhQUFNLENBQUMsS0FBSyxDQUFDLG1CQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNsRSxhQUFNLENBQUMsS0FBSyxDQUFDLG1CQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVoRSxhQUFNLENBQUMsS0FBSyxDQUFDLG1CQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM3RCxhQUFNLENBQUMsS0FBSyxDQUFDLG1CQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUUvRCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRTtRQUV2QixFQUFFLENBQUMsWUFBWSxFQUFFO1lBQ2IsYUFBTSxDQUFDLEtBQUssQ0FBQyxtQkFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2RSxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxjQUFjLEVBQUU7WUFDZixhQUFNLENBQUMsS0FBSyxDQUFDLG1CQUFRLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLGNBQWMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2hGLENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsZ0JBQWdCLEVBQUU7UUFFdkIsRUFBRSxDQUFDLFlBQVksRUFBRTtZQUNiLGFBQU0sQ0FBQyxLQUFLLENBQUMsbUJBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDL0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsY0FBYyxFQUFFO1lBQ2YsYUFBTSxDQUFDLEtBQUssQ0FBQyxtQkFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxjQUFjLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNuRixDQUFDLENBQUMsQ0FBQztJQUVQLENBQUMsQ0FBQyxDQUFDO0lBR0gsUUFBUSxDQUFDLGlCQUFpQixFQUFFO1FBRXhCLEVBQUUsQ0FBQyxZQUFZLEVBQUU7WUFDYixhQUFNLENBQUMsS0FBSyxDQUFDLG1CQUFRLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3BFLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGNBQWMsRUFBRTtZQUNmLGFBQU0sQ0FBQyxLQUFLLENBQUMsbUJBQVEsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUMsY0FBYyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDckYsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDLENBQUMsQ0FBQztJQUdILFFBQVEsQ0FBQyxzQkFBc0IsRUFBRTtRQUU3QixFQUFFLENBQUMsT0FBTyxFQUFFO1lBTVIsTUFBTSxJQUFJLEdBQVk7Z0JBQ2xCLEtBQUssRUFBRSxJQUFJO2FBQ2QsQ0FBQTtZQUVELE1BQU0sUUFBUSxHQUFHLG1CQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRW5DLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFMUQsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDLENBQUMsQ0FBQztBQUdQLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHthc3NlcnR9IGZyb20gJ2NoYWknO1xuaW1wb3J0IHtPcHRpb25hbH0gZnJvbSAnLi9PcHRpb25hbCc7XG5cbmRlc2NyaWJlKCdPcHRpb25hbCcsIGZ1bmN0aW9uKCkge1xuXG4gICAgaXQoXCJUZXN0IG51bGxhYmxlIG9iamVjdFwiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAvLyB0ZXN0IHRvIG1ha2Ugc3VyZSB3ZSBjYW4gcGFzcyBpbiBhIG51bGxhYmxlIG9wdGlvbiBkZWZpbmVkIGFzIHBhcnRcbiAgICAgICAgLy8gb2YgdGhlIHR5cGUgYW5kIHRoYXQgd2UgY2FuIG1hcCBpdCB3aXRob3V0IGFueSB0eXBlIGlzc3Vlcy5cblxuICAgICAgICBpbnRlcmZhY2UgU3RhdGUge1xuICAgICAgICAgICAgemlwOiBzdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGF0ZTogU3RhdGUgfCBudWxsID0ge1xuICAgICAgICAgICAgemlwOiBcIjk0MTA3XCJcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCB6aXAgPSBPcHRpb25hbC5vZihzdGF0ZSlcbiAgICAgICAgICAgIC5tYXAoY3VycmVudCA9PiBjdXJyZW50LnppcClcbiAgICAgICAgICAgIC5tYXAoY3VycmVudCA9PiBwYXJzZUludChjdXJyZW50LCAxMCkpXG4gICAgICAgICAgICAuZ2V0KCk7XG5cbiAgICAgICAgYXNzZXJ0LmVxdWFsKHppcCwgOTQxMDcpO1xuXG4gICAgfSk7XG5cbiAgICBpdChcIkNoYW5nZSB0eXBlIHdpdGhpbiBtYXAgZnVuY3Rpb25cIiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgY29uc3QgdmFsdWUgPSBPcHRpb25hbC5vZignMTAwJylcbiAgICAgICAgICAgIC5tYXAoY3VycmVudCA9PiBwYXJzZUludChjdXJyZW50LCAxMCkpXG4gICAgICAgICAgICAuZmlsdGVyKGN1cnJlbnQgPT4gY3VycmVudCA9PT0gMTAwKVxuICAgICAgICAgICAgLmdldCgpO1xuXG4gICAgICAgIGFzc2VydC5lcXVhbCh2YWx1ZSwgMTAwKTtcblxuICAgIH0pO1xuXG5cbiAgICBpdChcImZpcnN0XCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGFzc2VydC5lcXVhbChPcHRpb25hbC5maXJzdCh1bmRlZmluZWQsICdzZWNvbmQnKS5nZXQoKSwgJ3NlY29uZCcpO1xuICAgICAgICBhc3NlcnQuZXF1YWwoT3B0aW9uYWwuZmlyc3QoJ2ZpcnN0JywgdW5kZWZpbmVkKS5nZXQoKSwgJ2ZpcnN0Jyk7XG5cbiAgICAgICAgYXNzZXJ0LmVxdWFsKE9wdGlvbmFsLmZpcnN0KG51bGwsICdzZWNvbmQnKS5nZXQoKSwgJ3NlY29uZCcpO1xuICAgICAgICBhc3NlcnQuZXF1YWwoT3B0aW9uYWwuZmlyc3QoJ2ZpcnN0JywgbnVsbCkuZ2V0KCksICdmaXJzdCcpO1xuXG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgndmFsaWRhdGVTdHJpbmcnLCBmdW5jdGlvbigpIHtcblxuICAgICAgICBpdChcInZhbGlkIGRhdGFcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoT3B0aW9uYWwub2YoJ2hlbGxvJykudmFsaWRhdGVTdHJpbmcoKS5nZXQoKSwgJ2hlbGxvJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiaW52YWxpZCBkYXRhXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKE9wdGlvbmFsLm9mKDY2NikudmFsaWRhdGVTdHJpbmcoKS5nZXRPclVuZGVmaW5lZCgpLCB1bmRlZmluZWQpO1xuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3ZhbGlkYXRlTnVtYmVyJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgaXQoXCJ2YWxpZCBkYXRhXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKE9wdGlvbmFsLm9mKDEwMSkudmFsaWRhdGVOdW1iZXIoKS5nZXQoKSwgMTAxKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJpbnZhbGlkIGRhdGFcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoT3B0aW9uYWwub2YoJ2FzZGYnKS52YWxpZGF0ZU51bWJlcigpLmdldE9yVW5kZWZpbmVkKCksIHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cblxuICAgIGRlc2NyaWJlKCd2YWxpZGF0ZUJvb2xlYW4nLCBmdW5jdGlvbigpIHtcblxuICAgICAgICBpdChcInZhbGlkIGRhdGFcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoT3B0aW9uYWwub2YoZmFsc2UpLnZhbGlkYXRlQm9vbGVhbigpLmdldCgpLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiaW52YWxpZCBkYXRhXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKE9wdGlvbmFsLm9mKCdoZWxsbycpLnZhbGlkYXRlQm9vbGVhbigpLmdldE9yVW5kZWZpbmVkKCksIHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cblxuICAgIGRlc2NyaWJlKCdtYXBwaW5nIG5vbi1udWxsYWJsZScsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGl0KFwiYmFzaWNcIiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIGludGVyZmFjZSBBZGRyZXNzIHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB0ZXN0OiBBZGRyZXNzID0ge1xuICAgICAgICAgICAgICAgIHN0YXRlOiAnQ0EnXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbmFsID0gT3B0aW9uYWwub2YodGVzdCk7XG5cbiAgICAgICAgICAgIGNvbnN0IG1hcHBlZCA9IG9wdGlvbmFsLm1hcChjdXJyZW50ID0+IGN1cnJlbnQuc3RhdGUpO1xuXG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cblxufSk7XG4iXX0=