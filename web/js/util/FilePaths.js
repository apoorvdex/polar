"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const libpath = __importStar(require("path"));
const os = __importStar(require("os"));
const Optional_1 = require("./ts/Optional");
const Preconditions_1 = require("../Preconditions");
class FilePaths {
    static create(dirname, basename) {
        let result = this.join(dirname, basename);
        if (result.endsWith(libpath.sep)) {
            result = result.substring(0, result.length - 1);
        }
        return result;
    }
    static join(...paths) {
        return libpath.join(...paths);
    }
    static resolve(...pathSegments) {
        return libpath.resolve(...pathSegments);
    }
    static basename(path, ext) {
        if (libpath) {
            return libpath.basename(path, ext);
        }
        else {
            return BrowserFilePaths.basename(path, ext);
        }
    }
    static dirname(path) {
        return libpath.dirname(path);
    }
    static tmpdir() {
        return os.tmpdir();
    }
    static tmpfile(name) {
        return this.join(os.tmpdir(), name);
    }
    static createTempName(name) {
        return this.join(os.tmpdir(), name);
    }
    static toWindowsPath(path) {
        path = path.replace(/\//g, '\\');
        return 'C:' + path;
    }
    static textToWindowsPath(text) {
        return text.replace(/(\/[a-zA-Z0-9_-]+)+(\/[a-zA-Z0-9_-]+\.[a-z]{2,3})/g, (substr) => {
            return this.toWindowsPath(substr);
        });
    }
    static toFileURL(path) {
        Preconditions_1.Preconditions.assertTypeOf(path, 'string', 'path');
        path = FilePaths.resolve(path);
        if (this.SEP === '\\') {
            path = path.replace(/\\/g, '/');
            if (path[0] !== '/') {
                path = '/' + path;
            }
        }
        return encodeURI('file://' + path);
    }
    static toExtension(path) {
        if (!Preconditions_1.isPresent(path)) {
            return Optional_1.Optional.empty();
        }
        const matches = path.match(/\.([a-z0-9]{3,4})$/);
        if (matches && matches.length === 2) {
            return Optional_1.Optional.of(matches[1]);
        }
        return Optional_1.Optional.empty();
    }
}
FilePaths.SEP = libpath.sep;
exports.FilePaths = FilePaths;
class BrowserContext {
    static separator() {
        const isWindows = ["Win32", "Win64"].includes(navigator.platform);
        return isWindows ? "\\" : "/";
    }
}
exports.BrowserContext = BrowserContext;
class BrowserFilePaths {
    static basename(path, ext) {
        const lastIndexOf = path.lastIndexOf(this.SEP);
        const result = lastIndexOf >= 0 ? path.substring(lastIndexOf + 1) : path;
        if (ext) {
            if (result.endsWith(ext)) {
                return result.substring(0, result.length - ext.length);
            }
            else {
                return result;
            }
        }
        else {
            return result;
        }
    }
}
BrowserFilePaths.SEP = typeof navigator !== 'undefined' && navigator.platform ? BrowserContext.separator() : '/';
exports.BrowserFilePaths = BrowserFilePaths;
//# sourceMappingURL=data:application/json;base64,