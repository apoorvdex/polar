"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Dictionaries_1 = require("./Dictionaries");
const Reducers_1 = require("./Reducers");
const Multimap_1 = require("./Multimap");
const Arrays_1 = require("./Arrays");
class HitMap {
    constructor() {
        this.index = {};
    }
    registerHit(key, delta = 1) {
        const entry = Dictionaries_1.Dictionaries.computeIfAbsent(this.index, key, () => {
            return { key, value: 0 };
        });
        return entry.value += delta;
    }
    registerHits(...keys) {
        for (const key of keys) {
            this.registerHit(key);
        }
    }
    toMap() {
        return Object.freeze(Object.assign({}, this.index));
    }
    toArray() {
        return Object.freeze(Object.values(this.index));
    }
    toLiteralMap() {
        const result = {};
        for (const key of Object.keys(this.index)) {
            result[key] = this.index[key].value;
        }
        return result;
    }
    toRanked() {
        return Object.values(this.toMap())
            .sort((a, b) => b.value - a.value);
    }
    toPercRanked(total) {
        const ranked = this.toRanked();
        if (total === undefined) {
            total = Object.values(ranked)
                .map(current => current.value)
                .reduce(Reducers_1.Reducers.SUM, 0);
        }
        let idx = 1;
        return ranked.map(current => {
            return {
                idx: idx++,
                key: current.key,
                hits: current.value,
                perc: Math.floor((current.value / total) * 100)
            };
        });
    }
}
exports.HitMap = HitMap;
class SampledHitMap {
    constructor() {
        this.hitMap = new HitMap();
        this.multiMap = new Multimap_1.ArrayListMultimap();
    }
    registerHit(key, value) {
        this.hitMap.registerHit(key);
        this.multiMap.put(key, value);
    }
    toPercRanked(nrSamples, total) {
        const ranked = this.hitMap.toRanked();
        if (total === undefined) {
            total = Object.values(ranked)
                .map(current => current.value)
                .reduce(Reducers_1.Reducers.SUM, 0);
        }
        let idx = 1;
        return ranked.map(current => {
            const samples = Arrays_1.Arrays.head(Arrays_1.Arrays.shuffle(...this.multiMap.get(current.key)), nrSamples);
            return {
                idx: idx++,
                key: current.key,
                hits: current.value,
                perc: Math.floor((current.value / total) * 100),
                samples
            };
        });
    }
}
exports.SampledHitMap = SampledHitMap;
//# sourceMappingURL=data:application/json;base64,