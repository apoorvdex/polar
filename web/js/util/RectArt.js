"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TextArray_1 = require("./TextArray");
class RectArt {
    constructor(width, height) {
        this.textArray = new TextArray_1.TextArray(width + 1, height + 1);
        this.width = width;
        this.height = height;
    }
    drawHorizontalLine(xOrigin, yAxis, width) {
        for (let idx = 0; idx < width; ++idx) {
            this.textArray.write(xOrigin + idx, yAxis, "-");
        }
    }
    drawVerticalLine(xAxis, yOrigin, height) {
        for (let idx = 0; idx < height; ++idx) {
            this.textArray.write(xAxis, yOrigin + idx, "|");
        }
    }
    write(x, y, val) {
        this.textArray.write(x, y, val);
    }
    toTextArray() {
        return this.textArray;
    }
    toString() {
        return this.textArray.toString();
    }
    static createFromRect(rect) {
        let rectArt = new RectArt(rect.left + rect.width, rect.top + rect.height);
        rectArt.drawHorizontalLine(rect.left, rect.top, rect.width);
        rectArt.drawHorizontalLine(rect.left, rect.bottom - 1, rect.width);
        rectArt.drawVerticalLine(rect.left, rect.top, rect.height);
        rectArt.drawVerticalLine(rect.right, rect.top, rect.height);
        rectArt.write(rect.left, rect.top, "+");
        rectArt.write(rect.left, rect.bottom - 1, "+");
        rectArt.write(rect.right, rect.top, "+");
        rectArt.write(rect.right, rect.bottom - 1, "+");
        return rectArt;
    }
    static formatRects(rects) {
        let rectArts = rects.map(RectArt.createFromRect);
        let rectTextArrays = rectArts.map(current => current.toTextArray());
        let width = Math.max(...rectTextArrays.map(current => current.width));
        let height = Math.max(...rectTextArrays.map(current => current.height));
        let target = new TextArray_1.TextArray(width, height);
        rectArts.forEach(current => {
            target.merge(current.toTextArray());
        });
        return target;
    }
}
exports.RectArt = RectArt;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVjdEFydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlJlY3RBcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSwyQ0FBc0M7QUFHdEMsTUFBYSxPQUFPO0lBWWhCLFlBQVksS0FBYSxFQUFFLE1BQWM7UUFJckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLHFCQUFTLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFLdEQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFLbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFFekIsQ0FBQztJQUVELGtCQUFrQixDQUFDLE9BQWUsRUFBRSxLQUFhLEVBQUUsS0FBYTtRQUU1RCxLQUFJLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ25EO0lBRUwsQ0FBQztJQUVELGdCQUFnQixDQUFDLEtBQWEsRUFBRSxPQUFlLEVBQUUsTUFBYztRQUUzRCxLQUFJLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsTUFBTSxFQUFFLEVBQUUsR0FBRyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLEdBQUcsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ25EO0lBRUwsQ0FBQztJQUVELEtBQUssQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLEdBQVc7UUFDbkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsV0FBVztRQUNQLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBRUQsUUFBUTtRQUNKLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBT0QsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFVO1FBRTVCLElBQUksT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUxRSxPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RCxPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFbkUsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0QsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFNUQsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDeEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQy9DLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUVoRCxPQUFPLE9BQU8sQ0FBQztJQUVuQixDQUFDO0lBU0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFhO1FBRTVCLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRWpELElBQUksY0FBYyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUVwRSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFFeEUsSUFBSSxNQUFNLEdBQUcsSUFBSSxxQkFBUyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUUxQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3ZCLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLE1BQU0sQ0FBQztJQUVsQixDQUFDO0NBRUo7QUE1R0QsMEJBNEdDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEcmF3IGFzY2lpIGFydCByZWN0cyBmb3IgdmlzdWFsaXphdGlvbi5cbiAqL1xuaW1wb3J0IHtUZXh0QXJyYXl9IGZyb20gJy4vVGV4dEFycmF5JztcbmltcG9ydCB7UmVjdH0gZnJvbSAnLi4vUmVjdCc7XG5cbmV4cG9ydCBjbGFzcyBSZWN0QXJ0IHtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgd2lkdGg6IG51bWJlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGhlaWdodDogbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSB0ZXh0QXJyYXk6IFRleHRBcnJheTtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHdpZHRoIHtudW1iZXJ9XG4gICAgICogQHBhcmFtIGhlaWdodCB7bnVtYmVyfVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG5cbiAgICAgICAgLy8gd2UgbmVlZCBhIGJ1ZmZlciBvZiBvbmUgc28gdGhhdCB3ZSBjYW4gcG9zaXRpb24gaXRlbXMgYXQgdGhlIFpFUk9cbiAgICAgICAgLy8gaW5kZXggb2YgdGhlIHggYW5kIHkgYXhpcy5cbiAgICAgICAgdGhpcy50ZXh0QXJyYXkgPSBuZXcgVGV4dEFycmF5KHdpZHRoICsgMSwgaGVpZ2h0ICsgMSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcblxuICAgIH1cblxuICAgIGRyYXdIb3Jpem9udGFsTGluZSh4T3JpZ2luOiBudW1iZXIsIHlBeGlzOiBudW1iZXIsIHdpZHRoOiBudW1iZXIpIHtcblxuICAgICAgICBmb3IobGV0IGlkeCA9IDA7IGlkeCA8IHdpZHRoOyArK2lkeCkge1xuICAgICAgICAgICAgdGhpcy50ZXh0QXJyYXkud3JpdGUoeE9yaWdpbiArIGlkeCwgeUF4aXMsIFwiLVwiKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgZHJhd1ZlcnRpY2FsTGluZSh4QXhpczogbnVtYmVyLCB5T3JpZ2luOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG5cbiAgICAgICAgZm9yKGxldCBpZHggPSAwOyBpZHggPCBoZWlnaHQ7ICsraWR4KSB7XG4gICAgICAgICAgICB0aGlzLnRleHRBcnJheS53cml0ZSh4QXhpcywgeU9yaWdpbiArIGlkeCwgXCJ8XCIpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICB3cml0ZSh4OiBudW1iZXIsIHk6IG51bWJlciwgdmFsOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy50ZXh0QXJyYXkud3JpdGUoeCx5LHZhbCk7XG4gICAgfVxuXG4gICAgdG9UZXh0QXJyYXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHRBcnJheTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dEFycmF5LnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVjdCB7UmVjdH1cbiAgICAgKiBAcmV0dXJuIHtSZWN0QXJ0fVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVGcm9tUmVjdChyZWN0OiBSZWN0KSB7XG5cbiAgICAgICAgbGV0IHJlY3RBcnQgPSBuZXcgUmVjdEFydChyZWN0LmxlZnQgKyByZWN0LndpZHRoLCByZWN0LnRvcCArIHJlY3QuaGVpZ2h0KTtcblxuICAgICAgICByZWN0QXJ0LmRyYXdIb3Jpem9udGFsTGluZShyZWN0LmxlZnQsIHJlY3QudG9wLCByZWN0LndpZHRoKTtcbiAgICAgICAgcmVjdEFydC5kcmF3SG9yaXpvbnRhbExpbmUocmVjdC5sZWZ0LCByZWN0LmJvdHRvbSAtIDEsIHJlY3Qud2lkdGgpO1xuXG4gICAgICAgIHJlY3RBcnQuZHJhd1ZlcnRpY2FsTGluZShyZWN0LmxlZnQsIHJlY3QudG9wLCByZWN0LmhlaWdodCk7XG4gICAgICAgIHJlY3RBcnQuZHJhd1ZlcnRpY2FsTGluZShyZWN0LnJpZ2h0LCByZWN0LnRvcCwgcmVjdC5oZWlnaHQpO1xuXG4gICAgICAgIHJlY3RBcnQud3JpdGUocmVjdC5sZWZ0LCByZWN0LnRvcCwgXCIrXCIpO1xuICAgICAgICByZWN0QXJ0LndyaXRlKHJlY3QubGVmdCwgcmVjdC5ib3R0b20gLSAxLCBcIitcIik7XG4gICAgICAgIHJlY3RBcnQud3JpdGUocmVjdC5yaWdodCwgcmVjdC50b3AsIFwiK1wiKTtcbiAgICAgICAgcmVjdEFydC53cml0ZShyZWN0LnJpZ2h0LCByZWN0LmJvdHRvbSAtIDEsIFwiK1wiKTtcblxuICAgICAgICByZXR1cm4gcmVjdEFydDtcblxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbWVyZ2VkIGRpc3BsYXkgb2YgYWxsIHRoZSBnaXZlbiByZWN0cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWN0cyB7QXJyYXk8UmVjdD59XG4gICAgICogQHJldHVybiB7VGV4dEFycmF5fVxuICAgICAqL1xuICAgIHN0YXRpYyBmb3JtYXRSZWN0cyhyZWN0czogUmVjdFtdKTogVGV4dEFycmF5IHtcblxuICAgICAgICBsZXQgcmVjdEFydHMgPSByZWN0cy5tYXAoUmVjdEFydC5jcmVhdGVGcm9tUmVjdCk7XG5cbiAgICAgICAgbGV0IHJlY3RUZXh0QXJyYXlzID0gcmVjdEFydHMubWFwKGN1cnJlbnQgPT4gY3VycmVudC50b1RleHRBcnJheSgpKTtcblxuICAgICAgICBsZXQgd2lkdGggPSBNYXRoLm1heCguLi5yZWN0VGV4dEFycmF5cy5tYXAoY3VycmVudCA9PiBjdXJyZW50LndpZHRoKSk7XG4gICAgICAgIGxldCBoZWlnaHQgPSBNYXRoLm1heCguLi5yZWN0VGV4dEFycmF5cy5tYXAoY3VycmVudCA9PiBjdXJyZW50LmhlaWdodCkpO1xuXG4gICAgICAgIGxldCB0YXJnZXQgPSBuZXcgVGV4dEFycmF5KHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIHJlY3RBcnRzLmZvckVhY2goY3VycmVudCA9PiB7XG4gICAgICAgICAgICB0YXJnZXQubWVyZ2UoY3VycmVudC50b1RleHRBcnJheSgpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcblxuICAgIH1cblxufVxuIl19