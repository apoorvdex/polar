"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Preconditions_1 = require("../Preconditions");
const Optional_1 = require("./ts/Optional");
class Arrays {
    static first(values) {
        if (values.length === 0) {
            return undefined;
        }
        return values[0];
    }
    static last(values) {
        if (values.length === 0) {
            return undefined;
        }
        return values[values.length - 1];
    }
    static sample(values, count) {
        if (count === 0) {
            return [];
        }
        if (values.length <= count) {
            return values;
        }
        const result = [];
        const gap = Math.floor(values.length / count);
        for (let idx = 0; idx < values.length; idx += gap) {
            result.push(values[idx]);
        }
        return result;
    }
    static toDict(val) {
        const isObject = typeof val === "object";
        const isArray = val instanceof Array;
        if (!isObject && !isArray) {
            throw new Error("Neither an object or an array.");
        }
        if (isObject && !isArray) {
            return val;
        }
        if (!isArray) {
            throw new Error("Not an array");
        }
        let result = {};
        let arrayVal = val;
        for (let idx = 0; idx < arrayVal.length; ++idx) {
            result[idx] = arrayVal[idx];
        }
        return result;
    }
    static createSiblings(arrayLikeObject) {
        Preconditions_1.Preconditions.assertNotNull(arrayLikeObject, "arrayLikeObject");
        const result = [];
        for (let idx = 0; idx < arrayLikeObject.length; ++idx) {
            result.push(new ArrayPosition(Optional_1.Optional.of(arrayLikeObject[idx - 1]).getOrUndefined(), arrayLikeObject[idx], Optional_1.Optional.of(arrayLikeObject[idx + 1]).getOrUndefined()));
        }
        return result;
    }
    static createBatches(input, batchSize) {
        const result = [];
        let batch = [];
        input.forEach(current => {
            if (batch.length === batchSize) {
                result.push(batch);
                batch = [];
            }
            batch.push(current);
        });
        if (batch.length > 0) {
            result.push(batch);
        }
        return result;
    }
    static asyncForEach(items, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const item of items) {
                yield callback(item);
            }
        });
    }
    static shuffle(...input) {
        const arr = Object.assign([], input);
        let j, x, i;
        for (i = arr.length - 1; i > 0; i--) {
            j = Math.floor(Math.random() * (i + 1));
            x = arr[i];
            arr[i] = arr[j];
            arr[j] = x;
        }
        return arr;
    }
    static head(input, limit) {
        limit = Math.min(limit, input.length);
        const result = [];
        for (let idx = 0; idx < limit; ++idx) {
            result[idx] = input[idx];
        }
        return result;
    }
}
exports.Arrays = Arrays;
class ArrayPosition {
    constructor(prev, curr, next) {
        this.prev = prev;
        this.curr = curr;
        this.next = next;
    }
}
//# sourceMappingURL=data:application/json;base64,