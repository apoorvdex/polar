"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Strings_1 = require("./Strings");
const ISODateTimeStrings_1 = require("../metadata/ISODateTimeStrings");
class Sequences {
    static create() {
        if (this.NONCE > 999999) {
            this.NONCE = 0;
        }
        const now = new Date();
        const nonce = Strings_1.Strings.lpad(this.NONCE++, '0', 6);
        const machine = Strings_1.Strings.lpad(this.MACHINE, '0', 12);
        return 'z' + ISODateTimeStrings_1.ISODateTimeStrings.create() + `+${nonce}-${machine}`;
    }
}
Sequences.MACHINE = Math.floor(999999999999 * Math.random());
Sequences.NONCE = 0;
exports.Sequences = Sequences;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VxdWVuY2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2VxdWVuY2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsdUNBQWtDO0FBQ2xDLHVFQUFrRTtBQVFsRSxNQUFhLFNBQVM7SUFNWCxNQUFNLENBQUMsTUFBTTtRQUVoQixJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQ2xCO1FBSUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUV2QixNQUFNLEtBQUssR0FBRyxpQkFBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sT0FBTyxHQUFHLGlCQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBR3BELE9BQU8sR0FBRyxHQUFHLHVDQUFrQixDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksS0FBSyxJQUFJLE9BQU8sRUFBRSxDQUFDO0lBRXRFLENBQUM7O0FBcEJhLGlCQUFPLEdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFFM0QsZUFBSyxHQUFXLENBQUMsQ0FBQztBQUpwQyw4QkF5QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdXRpbCBmcm9tICd1dGlsJztcbmltcG9ydCB7U3RyaW5nc30gZnJvbSAnLi9TdHJpbmdzJztcbmltcG9ydCB7SVNPRGF0ZVRpbWVTdHJpbmdzfSBmcm9tICcuLi9tZXRhZGF0YS9JU09EYXRlVGltZVN0cmluZ3MnO1xuXG4vKipcbiAqIENyZWF0ZXMgaHVtYW4gcmVhZGFibGUgc2VxdWVuY2VzIHRoYXQgYXJlIG9wYXF1ZSBzdHJpbmdzLiAgVGhleSBvbmx5IG5lZWQgdG9cbiAqIGJlIHNvcnRhYmxlIHNvIHRoYXQgbmV3ZXIgc2VxdWVuY2VzIHNvcnQgYWZ0ZXIgZWFybGllciBvbmVzLlxuICpcbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXF1ZW5jZXMge1xuXG4gICAgcHVibGljIHN0YXRpYyBNQUNISU5FOiBudW1iZXIgPSBNYXRoLmZsb29yKDk5OTk5OTk5OTk5OSAqIE1hdGgucmFuZG9tKCkpO1xuXG4gICAgcHVibGljIHN0YXRpYyBOT05DRTogbnVtYmVyID0gMDtcblxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCk6IFNlcXVlbmNlIHtcblxuICAgICAgICBpZiAodGhpcy5OT05DRSA+IDk5OTk5OSkge1xuICAgICAgICAgICAgdGhpcy5OT05DRSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyA0MWNjZjY2MC1mYjVhLTExZTgtYWU3OC0zYmY3MDgyMzczNjNcblxuICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICAgIGNvbnN0IG5vbmNlID0gU3RyaW5ncy5scGFkKHRoaXMuTk9OQ0UrKywgJzAnLCA2KTsgLy8gaG93IGRvIEkgZGVhbCB3aXRoIG5vbmNlIHJvbGxvdmVyPyAgSSBqdXN0IG5lZWQgdG8gaGFuZGxlXG4gICAgICAgIGNvbnN0IG1hY2hpbmUgPSBTdHJpbmdzLmxwYWQodGhpcy5NQUNISU5FLCAnMCcsIDEyKTtcblxuICAgICAgICAvLyB1c2UgYSB6IHByZWZpeCBzbyBpdCBzb3J0cyBsYXN0IGluIHN0cmluZyBjb21wYXJpc29uLlxuICAgICAgICByZXR1cm4gJ3onICsgSVNPRGF0ZVRpbWVTdHJpbmdzLmNyZWF0ZSgpICsgYCske25vbmNlfS0ke21hY2hpbmV9YDtcblxuICAgIH1cblxuXG59XG5cbmV4cG9ydCB0eXBlIFNlcXVlbmNlID0gc3RyaW5nO1xuIl19