"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Hashcodes_1 = require("../Hashcodes");
const Preconditions_1 = require("../Preconditions");
class Fingerprints {
    static fromFilename(filename) {
        let match = filename.match(/-([^-]+)\.[^.]+$/);
        return Preconditions_1.notNull(match)[1];
    }
    static toFilename(path, fingerprint) {
        let index = path.lastIndexOf(".");
        let prefix = path.substring(0, index);
        let suffix = path.substring(index + 1, path.length);
        return `${prefix}-${fingerprint}.${suffix}`;
    }
    static create(data) {
        return Hashcodes_1.Hashcodes.create(data).substring(0, 20);
    }
}
exports.Fingerprints = Fingerprints;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmluZ2VycHJpbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRmluZ2VycHJpbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNENBQXVDO0FBQ3ZDLG9EQUF5QztBQUV6QyxNQUFhLFlBQVk7SUFLckIsTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFnQjtRQUNoQyxJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDL0MsT0FBTyx1QkFBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFNRCxNQUFNLENBQUMsVUFBVSxDQUFDLElBQVksRUFBRSxXQUFtQjtRQUMvQyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWxDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFbEQsT0FBTyxHQUFHLE1BQU0sSUFBSSxXQUFXLElBQUksTUFBTSxFQUFFLENBQUM7SUFDaEQsQ0FBQztJQU9ELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBWTtRQUN0QixPQUFPLHFCQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEQsQ0FBQztDQUVKO0FBaENELG9DQWdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SGFzaGNvZGVzfSBmcm9tICcuLi9IYXNoY29kZXMnO1xuaW1wb3J0IHtub3ROdWxsfSBmcm9tICcuLi9QcmVjb25kaXRpb25zJztcblxuZXhwb3J0IGNsYXNzIEZpbmdlcnByaW50cyB7XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZSB0aGUgZmluZ2VycHJpbnQgZnJvbSB0aGUgZmlsZW5hbWUuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21GaWxlbmFtZShmaWxlbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGxldCBtYXRjaCA9IGZpbGVuYW1lLm1hdGNoKC8tKFteLV0rKVxcLlteLl0rJC8pO1xuICAgICAgICByZXR1cm4gbm90TnVsbChtYXRjaClbMV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBleHRlbnNpb24gZnJvbSBhIGZpbGUsIGFkZCB0aGUgZmluZ2VycHJpbnQsIHRoZW4gYWRkIHRoZVxuICAgICAqIGV4dGVuc2lvbiBhZ2Fpbi5cbiAgICAgKi9cbiAgICBzdGF0aWMgdG9GaWxlbmFtZShwYXRoOiBzdHJpbmcsIGZpbmdlcnByaW50OiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gcGF0aC5sYXN0SW5kZXhPZihcIi5cIik7XG5cbiAgICAgICAgbGV0IHByZWZpeCA9IHBhdGguc3Vic3RyaW5nKDAsaW5kZXgpO1xuICAgICAgICBsZXQgc3VmZml4ID0gcGF0aC5zdWJzdHJpbmcoaW5kZXgrMSwgcGF0aC5sZW5ndGgpO1xuXG4gICAgICAgIHJldHVybiBgJHtwcmVmaXh9LSR7ZmluZ2VycHJpbnR9LiR7c3VmZml4fWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZmluZ2VycHJpbnQgZnJvbSB0aGUgZ2l2ZW4gZGF0YS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZShkYXRhOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIEhhc2hjb2Rlcy5jcmVhdGUoZGF0YSkuc3Vic3RyaW5nKDAsMjApO1xuICAgIH1cblxufVxuIl19