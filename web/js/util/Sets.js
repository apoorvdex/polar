"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Sets {
    static difference(a, b) {
        return a.filter(x => !b.includes(x));
    }
    static union(a, b) {
        const set = new Set();
        a.forEach(current => set.add(current));
        b.forEach(current => set.add(current));
        return Array.from(set);
    }
    static intersection(left, right) {
        const a = new Set(left);
        const b = new Set(right);
        const intersection = new Set([...a].filter(x => b.has(x)));
        return Array.from(intersection);
    }
    static toSet(arr) {
        const set = new Set();
        arr.forEach(current => set.add(current));
        return set;
    }
}
exports.Sets = Sets;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNldHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSxNQUFhLElBQUk7SUFPTixNQUFNLENBQUMsVUFBVSxDQUFJLENBQU0sRUFBRSxDQUFNO1FBRXRDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFDLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFJLENBQU0sRUFBRSxDQUFNO1FBRWpDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxFQUFLLENBQUM7UUFDekIsQ0FBQyxDQUFDLE9BQU8sQ0FBRSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsT0FBTyxDQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUUzQixDQUFDO0lBRU0sTUFBTSxDQUFDLFlBQVksQ0FBSSxJQUFTLEVBQUUsS0FBVTtRQUUvQyxNQUFNLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QixNQUFNLFlBQVksR0FBRyxJQUFJLEdBQUcsQ0FDeEIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWxDLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUVwQyxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBSSxHQUFRO1FBRTNCLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxFQUFLLENBQUM7UUFFekIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUV6QyxPQUFPLEdBQUcsQ0FBQztJQUVmLENBQUM7Q0FFSjtBQTNDRCxvQkEyQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNldCB0aGVvcmV0aWMgb3BlcmF0aW9ucyBmb3IgVHlwZXNjcmlwdCBhcnJheXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXRzIHtcblxuICAgIC8qKlxuICAgICAqIERpZmZlcmVuY2UgKGEgXFwgYik6IGNyZWF0ZSBhIHNldCB0aGF0IGNvbnRhaW5zIHRob3NlIGVsZW1lbnRzIG9mIHNldCBhXG4gICAgICogdGhhdCBhcmUgbm90IGluIHNldCBiXG4gICAgICpcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGRpZmZlcmVuY2U8VD4oYTogVFtdLCBiOiBUW10pOiBUW10ge1xuXG4gICAgICAgIHJldHVybiBhLmZpbHRlcih4ID0+ICEgYi5pbmNsdWRlcyh4KSk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHVuaW9uPFQ+KGE6IFRbXSwgYjogVFtdKTogVFtdIHtcblxuICAgICAgICBjb25zdCBzZXQgPSBuZXcgU2V0PFQ+KCk7XG4gICAgICAgIGEuZm9yRWFjaCggY3VycmVudCA9PiBzZXQuYWRkKGN1cnJlbnQpKTtcbiAgICAgICAgYi5mb3JFYWNoKCBjdXJyZW50ID0+IHNldC5hZGQoY3VycmVudCkpO1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShzZXQpO1xuXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBpbnRlcnNlY3Rpb248VD4obGVmdDogVFtdLCByaWdodDogVFtdKTogVFtdIHtcblxuICAgICAgICBjb25zdCBhID0gbmV3IFNldChsZWZ0KTtcbiAgICAgICAgY29uc3QgYiA9IG5ldyBTZXQocmlnaHQpO1xuICAgICAgICBjb25zdCBpbnRlcnNlY3Rpb24gPSBuZXcgU2V0KFxuICAgICAgICAgICAgWy4uLmFdLmZpbHRlcih4ID0+IGIuaGFzKHgpKSk7XG5cbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oaW50ZXJzZWN0aW9uKTtcblxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgdG9TZXQ8VD4oYXJyOiBUW10pOiBTZXQ8VD4ge1xuXG4gICAgICAgIGNvbnN0IHNldCA9IG5ldyBTZXQ8VD4oKTtcblxuICAgICAgICBhcnIuZm9yRWFjaChjdXJyZW50ID0+IHNldC5hZGQoY3VycmVudCkpO1xuXG4gICAgICAgIHJldHVybiBzZXQ7XG5cbiAgICB9XG5cbn1cbiJdfQ==