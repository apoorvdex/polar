"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const Paths_1 = require("./Paths");
describe('Paths', function () {
    describe('create()', function () {
        it("no dirname", function () {
            chai_1.assert.throws(function () {
                Paths_1.Paths.create(null, "subdir");
            });
        });
        it("no basename", function () {
            chai_1.assert.throws(function () {
                Paths_1.Paths.create("/", null);
            });
        });
        it("no trailing /", function () {
            chai_1.assert.equal(Paths_1.Paths.create("/", "first/"), "/first");
        });
        it("two basic paths", function () {
            chai_1.assert.equal(Paths_1.Paths.create("/", "first"), "/first");
        });
        it("two leading slashes", function () {
            chai_1.assert.equal(Paths_1.Paths.create("/", "/first"), "/first");
        });
        it("two leading and one trailing slash", function () {
            chai_1.assert.equal(Paths_1.Paths.create("/cat/", "/dog"), "/cat/dog");
        });
        it("four slashes", function () {
            chai_1.assert.equal(Paths_1.Paths.create("/cat/", "/dog/"), "/cat/dog");
        });
    });
    describe('join()', function () {
        it("no dirname", function () {
            chai_1.assert.throws(function () {
                Paths_1.Paths.join(null, "subdir");
            });
        });
        it("no basename", function () {
            chai_1.assert.throws(function () {
                Paths_1.Paths.join("/", null);
            });
        });
        it("two basic paths", function () {
            chai_1.assert.equal(Paths_1.Paths.join("/", "first"), "/first");
        });
        it("two leading slashes", function () {
            chai_1.assert.equal(Paths_1.Paths.join("/", "/first"), "/first");
        });
        it("two leading and one trailing slash", function () {
            chai_1.assert.equal(Paths_1.Paths.join("/cat/", "/dog"), "/cat/dog");
        });
        it("four slashes", function () {
            chai_1.assert.equal(Paths_1.Paths.join("/cat/", "/dog/"), "/cat/dog");
        });
        xit("too many slashes", function () {
            chai_1.assert.equal(Paths_1.Paths.join("/cat//", "//dog/"), "/cat/dog");
        });
    });
    describe('basename', function () {
        it("basic", function () {
            chai_1.assert.equal(Paths_1.Paths.basename("hello"), 'hello');
        });
        it("basic", function () {
            chai_1.assert.equal(Paths_1.Paths.basename("/files/0x000"), "0x000");
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGF0aHNUZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUGF0aHNUZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQTRCO0FBQzVCLG1DQUE4QjtBQUU5QixRQUFRLENBQUMsT0FBTyxFQUFFO0lBRWQsUUFBUSxDQUFDLFVBQVUsRUFBRTtRQUVqQixFQUFFLENBQUMsWUFBWSxFQUFFO1lBRWIsYUFBTSxDQUFDLE1BQU0sQ0FBQztnQkFDVixhQUFLLENBQUMsTUFBTSxDQUFDLElBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNsQyxDQUFDLENBQUMsQ0FBQTtRQUVOLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGFBQWEsRUFBRTtZQUVkLGFBQU0sQ0FBQyxNQUFNLENBQUM7Z0JBQ1YsYUFBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSyxDQUFDLENBQUM7WUFDN0IsQ0FBQyxDQUFDLENBQUE7UUFFTixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxlQUFlLEVBQUU7WUFDaEIsYUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN4RCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpQkFBaUIsRUFBRTtZQUNsQixhQUFNLENBQUMsS0FBSyxDQUFDLGFBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHFCQUFxQixFQUFFO1lBQ3RCLGFBQU0sQ0FBQyxLQUFLLENBQUMsYUFBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsb0NBQW9DLEVBQUU7WUFDckMsYUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM1RCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxjQUFjLEVBQUU7WUFDZixhQUFNLENBQUMsS0FBSyxDQUFDLGFBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQyxDQUFDLENBQUM7SUFHSCxRQUFRLENBQUMsUUFBUSxFQUFFO1FBRWYsRUFBRSxDQUFDLFlBQVksRUFBRTtZQUViLGFBQU0sQ0FBQyxNQUFNLENBQUM7Z0JBQ1YsYUFBSyxDQUFDLElBQUksQ0FBQyxJQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDaEMsQ0FBQyxDQUFDLENBQUE7UUFFTixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxhQUFhLEVBQUU7WUFFZCxhQUFNLENBQUMsTUFBTSxDQUFDO2dCQUNWLGFBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUssQ0FBQyxDQUFDO1lBQzNCLENBQUMsQ0FBQyxDQUFBO1FBRU4sQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsaUJBQWlCLEVBQUU7WUFDbEIsYUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxxQkFBcUIsRUFBRTtZQUN0QixhQUFNLENBQUMsS0FBSyxDQUFDLGFBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLG9DQUFvQyxFQUFFO1lBQ3JDLGFBQU0sQ0FBQyxLQUFLLENBQUMsYUFBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDMUQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsY0FBYyxFQUFFO1lBQ2YsYUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUMzRCxDQUFDLENBQUMsQ0FBQztRQUVILEdBQUcsQ0FBQyxrQkFBa0IsRUFBRTtZQUNwQixhQUFNLENBQUMsS0FBSyxDQUFDLGFBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQyxDQUFDLENBQUM7SUFHSCxRQUFRLENBQUMsVUFBVSxFQUFFO1FBRWpCLEVBQUUsQ0FBQyxPQUFPLEVBQUU7WUFDUixhQUFNLENBQUMsS0FBSyxDQUFDLGFBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsT0FBTyxFQUFFO1lBQ1IsYUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFLLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzFELENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQyxDQUFDLENBQUM7QUFFUCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXNzZXJ0fSBmcm9tICdjaGFpJztcbmltcG9ydCB7UGF0aHN9IGZyb20gJy4vUGF0aHMnO1xuXG5kZXNjcmliZSgnUGF0aHMnLCBmdW5jdGlvbigpIHtcblxuICAgIGRlc2NyaWJlKCdjcmVhdGUoKScsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGl0KFwibm8gZGlybmFtZVwiLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGFzc2VydC50aHJvd3MoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIFBhdGhzLmNyZWF0ZShudWxsISwgXCJzdWJkaXJcIik7XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwibm8gYmFzZW5hbWVcIiwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBhc3NlcnQudGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBQYXRocy5jcmVhdGUoXCIvXCIsIG51bGwhKTtcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJubyB0cmFpbGluZyAvXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChQYXRocy5jcmVhdGUoXCIvXCIsIFwiZmlyc3QvXCIpLCBcIi9maXJzdFwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJ0d28gYmFzaWMgcGF0aHNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKFBhdGhzLmNyZWF0ZShcIi9cIiwgXCJmaXJzdFwiKSwgXCIvZmlyc3RcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwidHdvIGxlYWRpbmcgc2xhc2hlc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoUGF0aHMuY3JlYXRlKFwiL1wiLCBcIi9maXJzdFwiKSwgXCIvZmlyc3RcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwidHdvIGxlYWRpbmcgYW5kIG9uZSB0cmFpbGluZyBzbGFzaFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoUGF0aHMuY3JlYXRlKFwiL2NhdC9cIiwgXCIvZG9nXCIpLCBcIi9jYXQvZG9nXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImZvdXIgc2xhc2hlc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoUGF0aHMuY3JlYXRlKFwiL2NhdC9cIiwgXCIvZG9nL1wiKSwgXCIvY2F0L2RvZ1wiKTtcbiAgICAgICAgfSk7XG5cbiAgICB9KTtcblxuXG4gICAgZGVzY3JpYmUoJ2pvaW4oKScsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGl0KFwibm8gZGlybmFtZVwiLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGFzc2VydC50aHJvd3MoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIFBhdGhzLmpvaW4obnVsbCEsIFwic3ViZGlyXCIpO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICB9KTtcblxuICAgICAgICBpdChcIm5vIGJhc2VuYW1lXCIsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgYXNzZXJ0LnRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgUGF0aHMuam9pbihcIi9cIiwgbnVsbCEpO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInR3byBiYXNpYyBwYXRoc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoUGF0aHMuam9pbihcIi9cIiwgXCJmaXJzdFwiKSwgXCIvZmlyc3RcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwidHdvIGxlYWRpbmcgc2xhc2hlc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoUGF0aHMuam9pbihcIi9cIiwgXCIvZmlyc3RcIiksIFwiL2ZpcnN0XCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInR3byBsZWFkaW5nIGFuZCBvbmUgdHJhaWxpbmcgc2xhc2hcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKFBhdGhzLmpvaW4oXCIvY2F0L1wiLCBcIi9kb2dcIiksIFwiL2NhdC9kb2dcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiZm91ciBzbGFzaGVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChQYXRocy5qb2luKFwiL2NhdC9cIiwgXCIvZG9nL1wiKSwgXCIvY2F0L2RvZ1wiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgeGl0KFwidG9vIG1hbnkgc2xhc2hlc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoUGF0aHMuam9pbihcIi9jYXQvL1wiLCBcIi8vZG9nL1wiKSwgXCIvY2F0L2RvZ1wiKTtcbiAgICAgICAgfSk7XG5cbiAgICB9KTtcblxuXG4gICAgZGVzY3JpYmUoJ2Jhc2VuYW1lJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgaXQoXCJiYXNpY1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoUGF0aHMuYmFzZW5hbWUoXCJoZWxsb1wiKSwgJ2hlbGxvJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiYmFzaWNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKFBhdGhzLmJhc2VuYW1lKFwiL2ZpbGVzLzB4MDAwXCIpLCBcIjB4MDAwXCIpO1xuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG59KTtcbiJdfQ==