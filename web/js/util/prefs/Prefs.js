"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Optional_1 = require("../ts/Optional");
class Prefs {
    mark(key, value = true) {
        if (value) {
            this.set(key, 'true');
        }
        else {
            this.set(key, 'false');
        }
    }
    toggle(key, value = false) {
        this.mark(key, !this.isMarked(key, value));
    }
    isMarked(key, defaultValue = false) {
        const currentValue = this.get(key).getOrElse(`${defaultValue}`);
        return currentValue === 'true';
    }
    defined(key) {
        return this.get(key).isPresent();
    }
}
exports.Prefs = Prefs;
class DictionaryPrefs extends Prefs {
    constructor(delegate = {}) {
        super();
        this.delegate = {};
        this.delegate = delegate;
    }
    get(key) {
        return Optional_1.Optional.of(this.delegate[key]);
    }
    set(key, value) {
        this.delegate[key] = value;
    }
    toDict() {
        return Object.assign({}, this.delegate);
    }
}
exports.DictionaryPrefs = DictionaryPrefs;
class LocalStoragePrefs extends Prefs {
    get(key) {
        return Optional_1.Optional.of(window.localStorage.getItem(key));
    }
    set(key, value) {
        window.localStorage.setItem(key, value);
    }
}
exports.LocalStoragePrefs = LocalStoragePrefs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJlZnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQcmVmcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUF3QztBQUV4QyxNQUFzQixLQUFLO0lBRWhCLElBQUksQ0FBQyxHQUFXLEVBQUUsUUFBaUIsSUFBSTtRQUUxQyxJQUFJLEtBQUssRUFBRTtZQUNQLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3pCO2FBQU07WUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUMxQjtJQUVMLENBQUM7SUFFTSxNQUFNLENBQUMsR0FBVyxFQUFFLFFBQWlCLEtBQUs7UUFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFTSxRQUFRLENBQUMsR0FBVyxFQUFFLGVBQXdCLEtBQUs7UUFFdEQsTUFBTSxZQUFZLEdBQ2QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBRS9DLE9BQU8sWUFBWSxLQUFLLE1BQU0sQ0FBQztJQUVuQyxDQUFDO0lBS00sT0FBTyxDQUFDLEdBQVc7UUFDdEIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3JDLENBQUM7Q0FNSjtBQXBDRCxzQkFvQ0M7QUFLRCxNQUFhLGVBQWdCLFNBQVEsS0FBSztJQUl0QyxZQUFZLFdBQStCLEVBQUU7UUFDekMsS0FBSyxFQUFFLENBQUM7UUFITCxhQUFRLEdBQXVCLEVBQUUsQ0FBQztRQUlyQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM3QixDQUFDO0lBRU0sR0FBRyxDQUFDLEdBQVc7UUFDbEIsT0FBTyxtQkFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVNLEdBQUcsQ0FBQyxHQUFXLEVBQUUsS0FBYTtRQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUMvQixDQUFDO0lBRU0sTUFBTTtRQUNULHlCQUFXLElBQUksQ0FBQyxRQUFRLEVBQUU7SUFDOUIsQ0FBQztDQUVKO0FBckJELDBDQXFCQztBQUtELE1BQWEsaUJBQWtCLFNBQVEsS0FBSztJQUVqQyxHQUFHLENBQUMsR0FBVztRQUNsQixPQUFPLG1CQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVNLEdBQUcsQ0FBQyxHQUFXLEVBQUUsS0FBYTtRQUNqQyxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDNUMsQ0FBQztDQUVKO0FBVkQsOENBVUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge09wdGlvbmFsfSBmcm9tIFwiLi4vdHMvT3B0aW9uYWxcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFByZWZzIHtcblxuICAgIHB1YmxpYyBtYXJrKGtleTogc3RyaW5nLCB2YWx1ZTogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcblxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgJ3RydWUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgJ2ZhbHNlJyk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHB1YmxpYyB0b2dnbGUoa2V5OiBzdHJpbmcsIHZhbHVlOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5tYXJrKGtleSwgISB0aGlzLmlzTWFya2VkKGtleSwgdmFsdWUpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNNYXJrZWQoa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZTogYm9vbGVhbiA9IGZhbHNlKSB7XG5cbiAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID1cbiAgICAgICAgICAgIHRoaXMuZ2V0KGtleSkuZ2V0T3JFbHNlKGAke2RlZmF1bHRWYWx1ZX1gKTtcblxuICAgICAgICByZXR1cm4gY3VycmVudFZhbHVlID09PSAndHJ1ZSc7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgZ2l2ZW4gcHJlZiBpcyBkZWZpbmVkLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZWZpbmVkKGtleTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldChrZXkpLmlzUHJlc2VudCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXQoa2V5OiBzdHJpbmcpOiBPcHRpb25hbDxzdHJpbmc+O1xuXG4gICAgcHVibGljIGFic3RyYWN0IHNldChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQ7XG5cbn1cblxuLyoqXG4gKiBQcmVmcyBvYmplY3QganVzdCBiYWNrZWQgYnkgYSBsb2NhbCBkaWN0aW9uYXJ5LlxuICovXG5leHBvcnQgY2xhc3MgRGljdGlvbmFyeVByZWZzIGV4dGVuZHMgUHJlZnMge1xuXG4gICAgcHVibGljIGRlbGVnYXRlOiBTdHJpbmdUb1N0cmluZ0RpY3QgPSB7fTtcblxuICAgIGNvbnN0cnVjdG9yKGRlbGVnYXRlOiBTdHJpbmdUb1N0cmluZ0RpY3QgPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmRlbGVnYXRlID0gZGVsZWdhdGU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldChrZXk6IHN0cmluZyk6IE9wdGlvbmFsPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gT3B0aW9uYWwub2YodGhpcy5kZWxlZ2F0ZVtrZXldKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGVba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b0RpY3QoKTogU3RyaW5nVG9TdHJpbmdEaWN0IHtcbiAgICAgICAgcmV0dXJuIHsuLi50aGlzLmRlbGVnYXRlfTtcbiAgICB9XG5cbn1cblxuLyoqXG4gKiBEZXNpZ25lZCB0byBiZSB1c2VkIGluIGJyb3dzZXJzLlxuICovXG5leHBvcnQgY2xhc3MgTG9jYWxTdG9yYWdlUHJlZnMgZXh0ZW5kcyBQcmVmcyB7XG5cbiAgICBwdWJsaWMgZ2V0KGtleTogc3RyaW5nKTogT3B0aW9uYWw8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiBPcHRpb25hbC5vZih3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RyaW5nVG9TdHJpbmdEaWN0IHtcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG59XG4iXX0=