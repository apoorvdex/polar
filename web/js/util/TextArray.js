"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class TextArray {
    constructor(width, height) {
        this.backing = [];
        this.width = width;
        this.height = height;
        this.backing = [];
        for (let idx = 0; idx < height; ++idx) {
            this.backing[idx] = this.createArray(width);
        }
    }
    createArray(length, defaultValue = " ") {
        let result = new Array(length);
        result.fill(defaultValue);
        return result;
    }
    write(x, y, val) {
        if (!val) {
            throw new Error("No val");
        }
        if (val.length !== 1) {
            throw new Error("Strings can only be 1 char");
        }
        let row = this.backing[y];
        if (!row) {
            throw new Error(`No row for y index: ${y} (width=${this.width}, height=${this.height})`);
        }
        row[x] = val;
    }
    charAt(x, y) {
        return this.backing[y][x];
    }
    merge(source) {
        for (let x = 0; x < source.width; ++x) {
            for (let y = 0; y < source.height; ++y) {
                let ch = source.charAt(x, y);
                if (ch === " ")
                    continue;
                this.write(x, y, ch);
            }
        }
    }
    toString() {
        let result = "";
        this.backing.forEach(current => {
            result += current.join("");
            result += "\n";
        });
        return result;
    }
}
exports.TextArray = TextArray;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dEFycmF5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGV4dEFycmF5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsTUFBYSxTQUFTO0lBT2xCLFlBQVksS0FBYSxFQUFFLE1BQWM7UUFGeEIsWUFBTyxHQUFlLEVBQUUsQ0FBQztRQUd0QyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUVsQixLQUFJLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsTUFBTSxFQUFFLEVBQUUsR0FBRyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMvQztJQUVMLENBQUM7SUFLRCxXQUFXLENBQUMsTUFBYyxFQUFFLGVBQXVCLEdBQUc7UUFDbEQsSUFBSSxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMxQixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBU0QsS0FBSyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsR0FBVztRQUVuQyxJQUFHLENBQUMsR0FBRyxFQUFFO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM3QjtRQUVELElBQUcsR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1NBQ2pEO1FBRUQsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUxQixJQUFHLENBQUUsR0FBRyxFQUFFO1lBQ04sTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLElBQUksQ0FBQyxLQUFLLFlBQVksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7U0FDNUY7UUFFRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBRWpCLENBQUM7SUFJRCxNQUFNLENBQUMsQ0FBUyxFQUFFLENBQVM7UUFDdkIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFNRCxLQUFLLENBQUMsTUFBaUI7UUFFbkIsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFFbEMsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBRW5DLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUU1QixJQUFHLEVBQUUsS0FBSyxHQUFHO29CQUNULFNBQVM7Z0JBRWIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBRXhCO1NBRUo7SUFFTCxDQUFDO0lBTUQsUUFBUTtRQUVKLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUVoQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMzQixNQUFNLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMzQixNQUFNLElBQUksSUFBSSxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxNQUFNLENBQUM7SUFFbEIsQ0FBQztDQUVKO0FBcEdELDhCQW9HQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSAyRCBhcnJheSBvZiB0ZXh0IHNvIHdlIGNhbiB1cGRhdGUgcG9zaXRpb25zIGRpcmVjdGx5LlxuICovXG5leHBvcnQgY2xhc3MgVGV4dEFycmF5IHtcblxuICAgIHB1YmxpYyByZWFkb25seSB3aWR0aDogbnVtYmVyO1xuICAgIHB1YmxpYyByZWFkb25seSBoZWlnaHQ6IG51bWJlcjtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgYmFja2luZzogc3RyaW5nW11bXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3Iod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5iYWNraW5nID0gW107XG5cbiAgICAgICAgZm9yKGxldCBpZHggPSAwOyBpZHggPCBoZWlnaHQ7ICsraWR4KSB7XG4gICAgICAgICAgICB0aGlzLmJhY2tpbmdbaWR4XSA9IHRoaXMuY3JlYXRlQXJyYXkod2lkdGgpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBnaXZlbiBhcnJheSBvZiB0aGUgbGVuZ3RoIHdpdGggdGhlIGdpdmVuIGRlZmF1bHRcbiAgICAgKi9cbiAgICBjcmVhdGVBcnJheShsZW5ndGg6IG51bWJlciwgZGVmYXVsdFZhbHVlOiBzdHJpbmcgPSBcIiBcIik6IHN0cmluZ1tdIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgICAgICByZXN1bHQuZmlsbChkZWZhdWx0VmFsdWUpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdyaXRlIHRvIHRoZSBnaXZlbiB4LCB5IGNvb3JkXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCB7bnVtYmVyfVxuICAgICAqIEBwYXJhbSB5IHtudW1iZXJ9XG4gICAgICogQHBhcmFtIHZhbCB7c3RyaW5nfVxuICAgICAqL1xuICAgIHdyaXRlKHg6IG51bWJlciwgeTogbnVtYmVyLCB2YWw6IHN0cmluZykge1xuXG4gICAgICAgIGlmKCF2YWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHZhbFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHZhbC5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN0cmluZ3MgY2FuIG9ubHkgYmUgMSBjaGFyXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJvdyA9IHRoaXMuYmFja2luZ1t5XTtcblxuICAgICAgICBpZighIHJvdykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyByb3cgZm9yIHkgaW5kZXg6ICR7eX0gKHdpZHRoPSR7dGhpcy53aWR0aH0sIGhlaWdodD0ke3RoaXMuaGVpZ2h0fSlgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJvd1t4XSA9IHZhbDtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqL1xuICAgIGNoYXJBdCh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5iYWNraW5nW3ldW3hdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdyaXRlIGV2ZXJ5IG5vbi1kZWZhdWx0IChub24gc3BhY2UpIGNoYXIgaW4gdGhlIHNvdXJjZSBpbnRvIHRoZSB0YXJnZXQuXG4gICAgICpcbiAgICAgKi9cbiAgICBtZXJnZShzb3VyY2U6IFRleHRBcnJheSkge1xuXG4gICAgICAgIGZvcihsZXQgeCA9IDA7IHggPCBzb3VyY2Uud2lkdGg7ICsreCkge1xuXG4gICAgICAgICAgICBmb3IobGV0IHkgPSAwOyB5IDwgc291cmNlLmhlaWdodDsgKyt5KSB7XG5cbiAgICAgICAgICAgICAgICBsZXQgY2ggPSBzb3VyY2UuY2hhckF0KHgseSk7XG5cbiAgICAgICAgICAgICAgICBpZihjaCA9PT0gXCIgXCIpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZSh4LCB5LCBjaCk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcblxuICAgICAgICBsZXQgcmVzdWx0ID0gXCJcIjtcblxuICAgICAgICB0aGlzLmJhY2tpbmcuZm9yRWFjaChjdXJyZW50ID0+IHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBjdXJyZW50LmpvaW4oXCJcIik7XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJcXG5cIjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIH1cblxufVxuIl19