"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Objects_1 = require("./Objects");
const Assertions_1 = require("../test/Assertions");
describe('Objects', function () {
    describe('defaults', function () {
        it("with no current", function () {
            let value = Objects_1.Objects.defaults(null, { hello: "world" });
            Assertions_1.assertJSON(value, { hello: "world" });
        });
        it("with no value", function () {
            let value = Objects_1.Objects.defaults({}, { hello: "world" });
            Assertions_1.assertJSON(value, { hello: "world" });
        });
        it("with existing", function () {
            let value = Objects_1.Objects.defaults({ hello: "buddy" }, { hello: "world" });
            Assertions_1.assertJSON(value, { hello: "buddy" });
        });
    });
    describe('clear', function () {
        it("clear dictionary", function () {
            let myDict = {
                hello: "world"
            };
            Objects_1.Objects.clear(myDict);
            Assertions_1.assertJSON(myDict, {});
        });
        it("clear array", function () {
            let myArr = [
                "world"
            ];
            Objects_1.Objects.clear(myArr);
            Assertions_1.assertJSON(myArr, []);
        });
    });
    describe('createInstance', function () {
        class Address {
            constructor(city, state, zip) {
                this.city = city;
                this.state = state;
                this.zip = zip;
            }
        }
        class Animal {
        }
        it("using generics", function () {
            let myDict = {
                city: "San Francisco",
                state: "CA",
                zip: 94107
            };
            function myFunc(address) {
            }
            let animal = new Animal();
        });
        it("should not compile", function () {
            function create(proto) {
                return Object.create(proto);
            }
            function createInstance(prototype, val) {
                let result = create(prototype);
                return val;
            }
            let val = createInstance(Address.prototype, {});
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JqZWN0c1Rlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJPYmplY3RzVGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUFrQztBQUNsQyxtREFBOEM7QUFFOUMsUUFBUSxDQUFDLFNBQVMsRUFBRTtJQUVoQixRQUFRLENBQUMsVUFBVSxFQUFFO1FBRWpCLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRTtZQUVsQixJQUFJLEtBQUssR0FBRyxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBQyxLQUFLLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FBQztZQUVyRCx1QkFBVSxDQUFDLEtBQUssRUFBRSxFQUFDLEtBQUssRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO1FBRXhDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGVBQWUsRUFBRTtZQUVoQixJQUFJLEtBQUssR0FBRyxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBQyxLQUFLLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FBQztZQUVuRCx1QkFBVSxDQUFDLEtBQUssRUFBRSxFQUFDLEtBQUssRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO1FBRXhDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGVBQWUsRUFBRTtZQUVoQixJQUFJLEtBQUssR0FBRyxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUMsRUFBRSxFQUFDLEtBQUssRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO1lBRWxFLHVCQUFVLENBQUMsS0FBSyxFQUFFLEVBQUMsS0FBSyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7UUFFeEMsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDLENBQUMsQ0FBQztJQUdILFFBQVEsQ0FBQyxPQUFPLEVBQUU7UUFFZCxFQUFFLENBQUMsa0JBQWtCLEVBQUU7WUFFbkIsSUFBSSxNQUFNLEdBQUc7Z0JBQ1QsS0FBSyxFQUFFLE9BQU87YUFDakIsQ0FBQztZQUVGLGlCQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRXRCLHVCQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRTNCLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGFBQWEsRUFBRTtZQUVkLElBQUksS0FBSyxHQUFHO2dCQUNSLE9BQU87YUFDVixDQUFDO1lBRUYsaUJBQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFckIsdUJBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFMUIsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRTtRQUV2QixNQUFNLE9BQU87WUFNVCxZQUFZLElBQVksRUFBRSxLQUFhLEVBQUUsR0FBVztnQkFDaEQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO2dCQUNuQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUNuQixDQUFDO1NBRUo7UUFFRCxNQUFNLE1BQU07U0FFWDtRQUVELEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRTtZQUVqQixJQUFJLE1BQU0sR0FBRztnQkFDVCxJQUFJLEVBQUUsZUFBZTtnQkFDckIsS0FBSyxFQUFFLElBQUk7Z0JBQ1gsR0FBRyxFQUFFLEtBQUs7YUFDYixDQUFDO1lBRUYsU0FBUyxNQUFNLENBQUMsT0FBZ0I7WUFFaEMsQ0FBQztZQUVELElBQUksTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7UUEwQzlCLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLG9CQUFvQixFQUFFO1lBRXJCLFNBQVMsTUFBTSxDQUFJLEtBQVU7Z0JBQ3pCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoQyxDQUFDO1lBRUQsU0FBUyxjQUFjLENBQUksU0FBWSxFQUFFLEdBQVE7Z0JBQzdDLElBQUksTUFBTSxHQUFNLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDbEMsT0FBTyxHQUFHLENBQUM7WUFDZixDQUFDO1lBRUQsSUFBSSxHQUFHLEdBQVcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDLENBQUM7SUFHUCxDQUFDLENBQUMsQ0FBQztBQUdQLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPYmplY3RzfSBmcm9tICcuL09iamVjdHMnO1xuaW1wb3J0IHthc3NlcnRKU09OfSBmcm9tICcuLi90ZXN0L0Fzc2VydGlvbnMnO1xuXG5kZXNjcmliZSgnT2JqZWN0cycsIGZ1bmN0aW9uKCkge1xuXG4gICAgZGVzY3JpYmUoJ2RlZmF1bHRzJywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIGl0KFwid2l0aCBubyBjdXJyZW50XCIsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbGV0IHZhbHVlID0gT2JqZWN0cy5kZWZhdWx0cyhudWxsLCB7aGVsbG86IFwid29ybGRcIn0pO1xuXG4gICAgICAgICAgICBhc3NlcnRKU09OKHZhbHVlLCB7aGVsbG86IFwid29ybGRcIn0pO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwid2l0aCBubyB2YWx1ZVwiLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IE9iamVjdHMuZGVmYXVsdHMoe30sIHtoZWxsbzogXCJ3b3JsZFwifSk7XG5cbiAgICAgICAgICAgIGFzc2VydEpTT04odmFsdWUsIHtoZWxsbzogXCJ3b3JsZFwifSk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJ3aXRoIGV4aXN0aW5nXCIsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbGV0IHZhbHVlID0gT2JqZWN0cy5kZWZhdWx0cyh7IGhlbGxvOiBcImJ1ZGR5XCJ9LCB7aGVsbG86IFwid29ybGRcIn0pO1xuXG4gICAgICAgICAgICBhc3NlcnRKU09OKHZhbHVlLCB7aGVsbG86IFwiYnVkZHlcIn0pO1xuXG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cblxuICAgIGRlc2NyaWJlKCdjbGVhcicsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBpdChcImNsZWFyIGRpY3Rpb25hcnlcIiwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBsZXQgbXlEaWN0ID0ge1xuICAgICAgICAgICAgICAgIGhlbGxvOiBcIndvcmxkXCJcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIE9iamVjdHMuY2xlYXIobXlEaWN0KTtcblxuICAgICAgICAgICAgYXNzZXJ0SlNPTihteURpY3QsIHt9KTtcblxuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNsZWFyIGFycmF5XCIsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbGV0IG15QXJyID0gW1xuICAgICAgICAgICAgICAgIFwid29ybGRcIlxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgT2JqZWN0cy5jbGVhcihteUFycik7XG5cbiAgICAgICAgICAgIGFzc2VydEpTT04obXlBcnIsIFtdKTtcblxuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2NyZWF0ZUluc3RhbmNlJywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIGNsYXNzIEFkZHJlc3Mge1xuXG4gICAgICAgICAgICBwdWJsaWMgcmVhZG9ubHkgY2l0eTogc3RyaW5nO1xuICAgICAgICAgICAgcHVibGljIHJlYWRvbmx5IHN0YXRlOiBzdHJpbmc7XG4gICAgICAgICAgICBwdWJsaWMgcmVhZG9ubHkgemlwOiBudW1iZXI7XG5cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKGNpdHk6IHN0cmluZywgc3RhdGU6IHN0cmluZywgemlwOiBudW1iZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNpdHkgPSBjaXR5O1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnppcCA9IHppcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgY2xhc3MgQW5pbWFsIHtcblxuICAgICAgICB9XG5cbiAgICAgICAgaXQoXCJ1c2luZyBnZW5lcmljc1wiLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGxldCBteURpY3QgPSB7XG4gICAgICAgICAgICAgICAgY2l0eTogXCJTYW4gRnJhbmNpc2NvXCIsXG4gICAgICAgICAgICAgICAgc3RhdGU6IFwiQ0FcIixcbiAgICAgICAgICAgICAgICB6aXA6IDk0MTA3XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBteUZ1bmMoYWRkcmVzczogQWRkcmVzcykge1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBhbmltYWwgPSBuZXcgQW5pbWFsKCk7XG4gICAgICAgICAgICAvL215RnVuYyhhbmltYWwpO1xuXG4gICAgICAgICAgICAvL215RnVuYygpO1xuXG4gICAgICAgICAgICAvLyBVc2luZyBDbGFzcyBUeXBlcyBpbiBHZW5lcmljc1xuICAgICAgICAgICAgLy8gV2hlbiBjcmVhdGluZyBmYWN0b3JpZXMgaW4gVHlwZVNjcmlwdCB1c2luZyBnZW5lcmljcywgaXQgaXMgbmVjZXNzYXJ5IHRvIHJlZmVyIHRvIGNsYXNzIHR5cGVzIGJ5IHRoZWlyIGNvbnN0cnVjdG9yIGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGUsXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gICAgIGZ1bmN0aW9uIGNyZWF0ZTxUPihjOiB7bmV3KCk6IFQ7IH0pOiBUIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgcmV0dXJuIG5ldyBjKCk7XG4gICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgLy8gQSBtb3JlIGFkdmFuY2VkIGV4YW1wbGUgdXNlcyB0aGUgcHJvdG90eXBlIHByb3BlcnR5IHRvIGluZmVyIGFuZCBjb25zdHJhaW4gcmVsYXRpb25zaGlwcyBiZXR3ZWVuIHRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBhbmQgdGhlIGluc3RhbmNlIHNpZGUgb2YgY2xhc3MgdHlwZXMuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy9cblxuICAgICAgICAgICAgLy8gRklYTUU6IHRoaXMgc2hvdWxkIGZhaWwhXG4gICAgICAgICAgICAvLyBsZXQgYWRkcmVzcyA9IE9iamVjdHMuY3JlYXRlSW5zdGFuY2UoQW5pbWFsLnByb3RvdHlwZSwgbXlEaWN0KTtcbiAgICAgICAgICAgIC8vIG15RnVuYyhhZGRyZXNzKTtcblxuICAgICAgICAgICAgLy8gY2xhc3MgRm9vIHtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgICAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcih2YWw6IGFueSkge1xuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gZnVuY3Rpb24gY3JlYXRlPFQ+KHR5cGVDb25zdHJ1Y3RvcjogbmV3KHZhbDogYW55KSA9PiBUICk6IFQge1xuICAgICAgICAgICAgLy8gICAgIHJldHVybiBuZXcgdHlwZUNvbnN0cnVjdG9yKHt9KTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBsZXQgYWRkcmVzcz0gIGNyZWF0ZShGb28pO1xuXG4gICAgICAgICAgICAvLyBmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZTxUPih0OiBULCB2YWw6IGFueSkge1xuICAgICAgICAgICAgLy8gICAgIGxldCByZXN1bHQ6IFQgPSBjcmVhdGUocHJvdG90eXBlKTtcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gdmFsO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIGxldCB2YWw6IHN0cmluZyA9IGNyZWF0ZUluc3RhbmNlKEFkZHJlc3MsIHt9KTtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBBZGRyZXNzLmNvbnN0cnVjdG9yXG5cblxuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInNob3VsZCBub3QgY29tcGlsZVwiLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZTxUPihwcm90bzogYW55KTogVCB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUocHJvdG8pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZTxUPihwcm90b3R5cGU6IFQsIHZhbDogYW55KSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdDogVCA9IGNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCB2YWw6IHN0cmluZyA9IGNyZWF0ZUluc3RhbmNlKEFkZHJlc3MucHJvdG90eXBlLCB7fSk7XG4gICAgICAgIH0pO1xuXG5cbiAgICB9KTtcblxuXG59KTtcbiJdfQ==