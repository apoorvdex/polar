"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const URLs_1 = require("../URLs");
const Files_1 = require("../Files");
class InputSources {
    static ofValue(value, basename) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof value === 'string') {
                if (value.startsWith("blob:")) {
                    const response = yield fetch(value);
                    const blob = yield response.blob();
                    return this.ofBlob(blob, basename);
                }
                if (URLs_1.URLs.isURL(value)) {
                    throw new Error("Not implemented yet");
                }
                return this.ofStream(Files_1.Files.createReadStream(value), basename);
            }
            if (value instanceof File) {
                return this.ofFile(value, basename);
            }
            if (value instanceof Blob) {
                return this.ofBlob(value, basename);
            }
            if (value instanceof Buffer) {
                return this.ofBuffer(value, basename);
            }
            return this.ofStream(value, basename);
        });
    }
    static ofBuffer(buffer, basename) {
        return this.of('buffer', buffer, basename);
    }
    static ofStream(stream, basename) {
        return this.of('stream', stream, basename);
    }
    static ofBlob(blob, basename) {
        return this.of('blob', blob, basename);
    }
    static ofFile(file, basename) {
        return this.of('file', file, basename);
    }
    static of(type, value, basename) {
        return { type, value, basename };
    }
    static open(inputSource, inputListener) {
        switch (inputSource.type) {
            case 'blob':
                this.openBlobOrFile(inputSource.value, inputListener);
                break;
            case 'file':
                this.openBlobOrFile(inputSource.value, inputListener);
                break;
            case 'stream':
                this.openStream(inputSource.value, inputListener);
                break;
            case 'buffer':
                this.openBuffer(inputSource.value, inputListener);
                break;
        }
    }
    static openBuffer(buffer, inputListener) {
        inputListener(buffer.buffer, undefined);
        inputListener(undefined, undefined);
    }
    static openBlobOrFile(blob, inputListener) {
        const reader = new FileReader();
        reader.onload = () => {
            inputListener(reader.result, undefined);
            inputListener(undefined, undefined);
        };
        reader.onerror = () => {
            inputListener(undefined, reader.error);
        };
        reader.onabort = () => {
            inputListener(undefined, reader.error);
        };
        reader.readAsBinaryString(blob);
    }
    static openStream(readableStream, inputListener) {
        readableStream.on('end', chunk => {
            inputListener(chunk, undefined);
            inputListener(undefined, undefined);
        });
        readableStream.on('error', err => {
            inputListener(undefined, err);
        });
        readableStream.on('data', chunk => {
            inputListener(chunk, undefined);
        });
    }
}
exports.InputSources = InputSources;
//# sourceMappingURL=data:application/json;base64,