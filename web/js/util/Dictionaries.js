"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Preconditions_1 = require("../Preconditions");
const Optional_1 = require("./ts/Optional");
class Dictionaries {
    static values(dict) {
        const result = [];
        if (!dict) {
            return result;
        }
        return Object.values(dict);
    }
    static entries(dict) {
        if (!dict) {
            return [];
        }
        return Object.entries(dict).map(current => {
            return {
                key: current[0],
                value: current[1]
            };
        });
    }
    static forDict(dict, callback) {
        Preconditions_1.Preconditions.assertNotNull(dict, "dict");
        Preconditions_1.Preconditions.assertNotNull(callback, "callback");
        for (const key in dict) {
            if (dict.hasOwnProperty(key)) {
                const value = dict[key];
                callback(key, value);
            }
        }
    }
    static sorted(dict) {
        if (dict === undefined || dict === null) {
            return dict;
        }
        if (!(typeof dict === 'object')) {
            return dict;
        }
        if (Array.isArray(dict)) {
            const result = [];
            for (let idx = 0; idx < dict.length; ++idx) {
                result[idx] = this.sorted(dict[idx]);
            }
            return result;
        }
        else {
            const result = {};
            Object.keys(dict).sort().forEach(key => {
                result[key] = this.sorted(dict[key]);
            });
            return result;
        }
    }
    static onlyDefinedProperties(dict) {
        if (dict === undefined || dict === null) {
            return dict;
        }
        if (!(typeof dict === 'object')) {
            return dict;
        }
        const result = {};
        for (const key of Object.keys(dict).sort()) {
            const value = dict[key];
            if (value === undefined) {
                continue;
            }
            result[key] = this.sorted(value);
        }
        return result;
    }
    static copyOf(dict) {
        if (dict === undefined || dict === null) {
            return dict;
        }
        if (typeof dict !== 'object') {
            return dict;
        }
        const result = {};
        Object.keys(dict).forEach(key => {
            result[key] = this.copyOf(dict[key]);
        });
        return result;
    }
    static toDict(values, converter) {
        const result = {};
        values.forEach(value => {
            result[converter(value)] = value;
        });
        return result;
    }
    static countOf(dict) {
        return Optional_1.Optional.of(dict)
            .map(current => Object.keys(current).length)
            .getOrElse(0);
    }
    static size(dict) {
        return Object.keys(dict).length;
    }
    static computeIfAbsent(dict, key, mappingFunction) {
        const currentValue = dict[key];
        if (currentValue) {
            return currentValue;
        }
        else {
            const newValue = mappingFunction(key);
            if (newValue) {
                dict[key] = newValue;
            }
            return newValue;
        }
    }
    static putAll(source, target = {}) {
        for (const key of Object.keys(source)) {
            target[key] = source[key];
        }
    }
    static empty(dict) {
        if (!dict) {
            return true;
        }
        return Object.values(dict).length === 0;
    }
}
exports.Dictionaries = Dictionaries;
//# sourceMappingURL=data:application/json;base64,