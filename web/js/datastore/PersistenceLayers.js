"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Functions_1 = require("../util/Functions");
const Backend_1 = require("./Backend");
const AsyncWorkQueue_1 = require("../util/AsyncWorkQueue");
const Datastore_1 = require("./Datastore");
const UUIDs_1 = require("../metadata/UUIDs");
const ProgressTracker_1 = require("../util/ProgressTracker");
const DocMetas_1 = require("../metadata/DocMetas");
const DefaultPersistenceLayer_1 = require("./DefaultPersistenceLayer");
const Preconditions_1 = require("../Preconditions");
const URLs_1 = require("../util/URLs");
const Logger_1 = require("../logger/Logger");
const log = Logger_1.Logger.create();
class PersistenceLayers {
    static toPersistenceLayer(input) {
        return new DefaultPersistenceLayer_1.DefaultPersistenceLayer(input);
    }
    static toSyncDocMap(datastore, progressStateListener = Functions_1.NULL_FUNCTION) {
        return __awaiter(this, void 0, void 0, function* () {
            const docMetaFiles = yield datastore.getDocMetaRefs();
            return this.toSyncDocMapFromDocs(datastore, docMetaFiles, progressStateListener);
        });
    }
    static toSyncDocMapFromDocs(datastore, docMetaRefs, progressStateListener = Functions_1.NULL_FUNCTION) {
        return __awaiter(this, void 0, void 0, function* () {
            const syncDocsMap = {};
            const work = [];
            const asyncWorkQueue = new AsyncWorkQueue_1.AsyncWorkQueue(work);
            const progressTracker = new ProgressTracker_1.ProgressTracker(docMetaRefs.length, `datastore:${datastore.id}#toSyncDocMapFromDocs`);
            for (const docMetaRef of docMetaRefs) {
                work.push(() => __awaiter(this, void 0, void 0, function* () {
                    let docMeta = docMetaRef.docMeta;
                    if (!docMeta) {
                        const data = yield datastore.getDocMeta(docMetaRef.fingerprint);
                        if (Preconditions_1.isPresent(data)) {
                            docMeta = DocMetas_1.DocMetas.deserialize(data, docMetaRef.fingerprint);
                        }
                    }
                    if (Preconditions_1.isPresent(docMeta)) {
                        syncDocsMap[docMetaRef.fingerprint] = Datastore_1.SyncDocs.fromDocInfo(docMeta.docInfo, 'created');
                        progressStateListener(progressTracker.peek());
                    }
                    else {
                    }
                }));
            }
            yield asyncWorkQueue.execute();
            progressStateListener(progressTracker.terminate());
            return syncDocsMap;
        });
    }
    static merge(syncOrigin0, syncOrigin1, listener = Functions_1.ASYNC_NULL_FUNCTION) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.transfer(syncOrigin0, syncOrigin1, listener);
            yield this.transfer(syncOrigin1, syncOrigin0, listener);
        });
    }
    static synchronizeOrigins(localSyncOrigin, cloudSyncOrigin, listener = Functions_1.ASYNC_NULL_FUNCTION) {
        return __awaiter(this, void 0, void 0, function* () {
            log.notice("Transferring from local -> cloud...");
            const localToCloud = yield PersistenceLayers.transfer(localSyncOrigin, cloudSyncOrigin, listener, 'local-to-cloud');
            log.notice("Transferring from local -> cloud...done", localToCloud);
            log.notice("Transferring from cloud -> local...");
            const cloudToLocal = yield PersistenceLayers.transfer(cloudSyncOrigin, localSyncOrigin, listener, 'cloud-to-local');
            log.notice("Transferring from cloud -> local...done", cloudToLocal);
        });
    }
    static transfer(source, target, listener = Functions_1.ASYNC_NULL_FUNCTION, id = 'none') {
        return __awaiter(this, void 0, void 0, function* () {
            const result = {
                docMeta: {
                    total: 0,
                    writes: 0
                },
                files: {
                    total: 0,
                    writes: 0
                }
            };
            function handleSyncFile(syncDoc, fileRef) {
                return __awaiter(this, void 0, void 0, function* () {
                    ++result.files.total;
                    if (!(yield target.datastore.containsFile(Backend_1.Backend.STASH, fileRef))) {
                        let optionalFile;
                        try {
                            optionalFile = yield source.datastore.getFile(Backend_1.Backend.STASH, fileRef);
                        }
                        catch (e) {
                            log.error(`Could not get file ${fileRef.name} for doc with fingerprint: ${syncDoc.fingerprint}`, fileRef, e);
                            throw e;
                        }
                        if (optionalFile.isPresent()) {
                            const file = optionalFile.get();
                            const buffer = yield URLs_1.URLs.toStream(file.url);
                            yield target.datastore.writeFile(file.backend, fileRef, buffer, file.meta);
                            ++result.files.writes;
                        }
                    }
                });
            }
            function handleSyncDoc(sourceSyncDoc, targetSyncDoc) {
                return __awaiter(this, void 0, void 0, function* () {
                    ++result.docMeta.total;
                    for (const sourceSyncFile of sourceSyncDoc.files) {
                        if (sourceSyncFile.ref.name) {
                            yield handleSyncFile(sourceSyncDoc, sourceSyncFile.ref);
                        }
                    }
                    let doWriteDocMeta = !targetSyncDoc;
                    if (targetSyncDoc) {
                        const cmp = UUIDs_1.UUIDs.compare(targetSyncDoc.uuid, sourceSyncDoc.uuid);
                        doWriteDocMeta = cmp < 0;
                    }
                    if (doWriteDocMeta) {
                        const data = yield source.datastore.getDocMeta(sourceSyncDoc.fingerprint);
                        yield target.datastore.write(sourceSyncDoc.fingerprint, data, sourceSyncDoc.docMetaFileRef.docInfo);
                        ++result.docMeta.writes;
                    }
                    const progress = progressTracker.incr();
                    const docMetaSnapshotEvent = {
                        datastore: source.datastore.id,
                        progress,
                        consistency: 'committed',
                        docMetaMutations: []
                    };
                    yield listener(docMetaSnapshotEvent);
                });
            }
            const docFileAsyncWorkQueue = new AsyncWorkQueue_1.AsyncWorkQueue([]);
            const docMetaAsyncWorkQueue = new AsyncWorkQueue_1.AsyncWorkQueue([]);
            const sourceSyncDocs = Object.values(source.syncDocMap);
            const progressID = `transfer:source=${source.datastore.id},target=${target.datastore.id}`;
            const progressTracker = new ProgressTracker_1.ProgressTracker(sourceSyncDocs.length, progressID);
            for (const sourceSyncDoc of sourceSyncDocs) {
                const targetSyncDoc = target.syncDocMap[sourceSyncDoc.fingerprint];
                const handler = () => __awaiter(this, void 0, void 0, function* () {
                    try {
                        yield handleSyncDoc(sourceSyncDoc, targetSyncDoc);
                    }
                    catch (e) {
                        log.error("Unable to sync between source and target: ", { sourceSyncDoc, targetSyncDoc });
                    }
                });
                docMetaAsyncWorkQueue.enqueue(handler);
            }
            const docFileExecutionPromise = docFileAsyncWorkQueue.execute();
            const docMetaExecutionPromise = docMetaAsyncWorkQueue.execute();
            yield Promise.all([docFileExecutionPromise, docMetaExecutionPromise]);
            yield listener({
                datastore: source.datastore.id,
                progress: progressTracker.terminate(),
                consistency: 'committed',
                docMetaMutations: []
            });
            return result;
        });
    }
}
exports.PersistenceLayers = PersistenceLayers;
//# sourceMappingURL=data:application/json;base64,