"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const DocMetaRef_1 = require("./DocMetaRef");
const Backend_1 = require("./Backend");
const DatastoreMutation_1 = require("./DatastoreMutation");
const AsyncWorkQueues_1 = require("../util/AsyncWorkQueues");
const DocMetas_1 = require("../metadata/DocMetas");
const DatastoreMutations_1 = require("./DatastoreMutations");
class AbstractDatastore {
    constructor() {
        this.datastoreMutations = DatastoreMutations_1.DatastoreMutations.create('written');
    }
    writeDocMeta(docMeta, datastoreMutation = new DatastoreMutation_1.DefaultDatastoreMutation()) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = DocMetas_1.DocMetas.serialize(docMeta);
            const docInfo = docMeta.docInfo;
            const syncMutation = new DatastoreMutation_1.DefaultDatastoreMutation();
            this.datastoreMutations.pipe(syncMutation, datastoreMutation, () => docInfo);
            yield this.write(docMeta.docInfo.fingerprint, data, docInfo, syncMutation);
            return docInfo;
        });
    }
    synchronizeDocs(...docMetaRefs) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    deactivate() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    createBackup() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
}
exports.AbstractDatastore = AbstractDatastore;
class DocMetaSnapshotEvents {
    static format(ev) {
        let batch = "NO BATCH";
        if (ev.batch) {
            batch = `(id: ${ev.batch.id}, terminated: ${ev.batch.terminated})`;
        }
        const progress = ev.progress.progress;
        const nrMutations = ev.docMetaMutations.length;
        return `${ev.datastore} ${progress}% (consistency: ${ev.consistency}, nr mutations: ${nrMutations}, batch: ${batch})`;
    }
    static toDocInfos(docMetaSnapshotEvent) {
        return __awaiter(this, void 0, void 0, function* () {
            return AsyncWorkQueues_1.AsyncWorkQueues
                .awaitPromises(docMetaSnapshotEvent.docMetaMutations.map(current => current.docInfoProvider()));
        });
    }
    static toSyncDocs(docMetaSnapshotEvent) {
        return __awaiter(this, void 0, void 0, function* () {
            const promises = docMetaSnapshotEvent.docMetaMutations.map(docMetaMutation => {
                return () => __awaiter(this, void 0, void 0, function* () {
                    const docInfo = yield docMetaMutation.docInfoProvider();
                    return SyncDocs.fromDocInfo(docInfo, docMetaMutation.mutationType);
                });
            }).map(current => current());
            return yield AsyncWorkQueues_1.AsyncWorkQueues.awaitPromises(promises);
        });
    }
}
exports.DocMetaSnapshotEvents = DocMetaSnapshotEvents;
class SyncDocMaps {
    static putAll(syncDocMap, syncDocs) {
        for (const syncDoc of syncDocs) {
            syncDocMap[syncDoc.fingerprint] = syncDoc;
        }
    }
    static fromArray(syncDocs) {
        const result = {};
        for (const syncDoc of syncDocs) {
            result[syncDoc.fingerprint] = syncDoc;
        }
        return result;
    }
}
exports.SyncDocMaps = SyncDocMaps;
class SyncDocs {
    static fromDocInfo(docInfo, mutationType) {
        const files = [];
        if (docInfo.filename) {
            const stashFile = {
                backend: Backend_1.Backend.STASH,
                ref: {
                    name: docInfo.filename,
                    hashcode: docInfo.hashcode
                }
            };
            files.push(stashFile);
        }
        return {
            fingerprint: docInfo.fingerprint,
            docMetaFileRef: DocMetaRef_1.DocMetaFileRefs.createFromDocInfo(docInfo),
            mutationType,
            uuid: docInfo.uuid,
            files
        };
    }
}
exports.SyncDocs = SyncDocs;
//# sourceMappingURL=data:application/json;base64,