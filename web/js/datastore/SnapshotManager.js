"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SimpleReactor_1 = require("../reactor/SimpleReactor");
class SnapshotManager {
    constructor(datastore) {
        this.docMetaSnapshotEventDispatcher = new SimpleReactor_1.SimpleReactor();
        this.datastore = datastore;
    }
    addDocMetaSnapshotEventListener(docMetaSnapshotEventListener) {
        this.docMetaSnapshotEventDispatcher.addEventListener(docMetaSnapshotEventListener);
    }
    stop() {
        this.docMetaSnapshotEventDispatcher.clear();
    }
}
exports.SnapshotManager = SnapshotManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU25hcHNob3RNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU25hcHNob3RNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBT0EsNERBQXlFO0FBUXpFLE1BQWEsZUFBZTtJQU14QixZQUFZLFNBQW9CO1FBSmYsbUNBQThCLEdBQTJDLElBQUksNkJBQWEsRUFBRSxDQUFDO1FBSzFHLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQy9CLENBQUM7SUFvRE0sK0JBQStCLENBQUMsNEJBQTBEO1FBQzdGLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxnQkFBZ0IsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFTSxJQUFJO1FBQ1AsSUFBSSxDQUFDLDhCQUE4QixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2hELENBQUM7Q0FFSjtBQXBFRCwwQ0FvRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RhdGFzdG9yZSwgRGF0YXN0b3JlQ29uc2lzdGVuY3ksIERhdGFzdG9yZUlELCBEb2NNZXRhTXV0YXRpb24sIERvY01ldGFTbmFwc2hvdEJhdGNoLCBEb2NNZXRhU25hcHNob3RFdmVudCwgRG9jTWV0YVNuYXBzaG90RXZlbnRMaXN0ZW5lciwgRXJyb3JMaXN0ZW5lciwgU25hcHNob3RQcm9ncmVzcywgU25hcHNob3RSZXN1bHQsIFN5bmNocm9uaXphdGlvbkV2ZW50fSBmcm9tIFwiLi9EYXRhc3RvcmVcIjtcbmltcG9ydCB7RGlyZWN0b3JpZXN9IGZyb20gJy4vRGlyZWN0b3JpZXMnO1xuaW1wb3J0IHtEb2NNZXRhRmlsZVJlZiwgRG9jTWV0YUZpbGVSZWZzfSBmcm9tICcuL0RvY01ldGFSZWYnO1xuaW1wb3J0IHtEYXRhc3RvcmVNdXRhdGlvbiwgRGVmYXVsdERhdGFzdG9yZU11dGF0aW9ufSBmcm9tICcuL0RhdGFzdG9yZU11dGF0aW9uJztcbmltcG9ydCB7RGlza0RlbGV0ZVJlc3VsdH0gZnJvbSAnLi9EaXNrRGF0YXN0b3JlJztcbmltcG9ydCB7TlVMTF9GVU5DVElPTn0gZnJvbSAnLi4vdXRpbC9GdW5jdGlvbnMnO1xuaW1wb3J0IHtEYXRhc3RvcmVzfSBmcm9tICcuL0RhdGFzdG9yZXMnO1xuaW1wb3J0IHtJRXZlbnREaXNwYXRjaGVyLCBTaW1wbGVSZWFjdG9yfSBmcm9tICcuLi9yZWFjdG9yL1NpbXBsZVJlYWN0b3InO1xuaW1wb3J0IHtQcm9ncmVzc1RyYWNrZXJzfSBmcm9tIFwiLi4vdXRpbC9Qcm9ncmVzc1RyYWNrZXJzXCI7XG5pbXBvcnQge0lEb2NJbmZvfSBmcm9tICcuLi9tZXRhZGF0YS9Eb2NJbmZvJztcbmltcG9ydCB7RG9jTWV0YXN9IGZyb20gJy4uL21ldGFkYXRhL0RvY01ldGFzJztcbmltcG9ydCB7QXN5bmNQcm92aWRlcnN9IGZyb20gJy4uL3V0aWwvUHJvdmlkZXJzJztcblxuLyoqXG4gKi9cbmV4cG9ydCBjbGFzcyBTbmFwc2hvdE1hbmFnZXIge1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBkb2NNZXRhU25hcHNob3RFdmVudERpc3BhdGNoZXI6IElFdmVudERpc3BhdGNoZXI8RG9jTWV0YVNuYXBzaG90RXZlbnQ+ID0gbmV3IFNpbXBsZVJlYWN0b3IoKTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgZGF0YXN0b3JlOiBEYXRhc3RvcmU7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhc3RvcmU6IERhdGFzdG9yZSkge1xuICAgICAgICB0aGlzLmRhdGFzdG9yZSA9IGRhdGFzdG9yZTtcbiAgICB9XG4gICAgLy9cbiAgICAvLyBwdWJsaWMgb25EZWxldGUoZG9jTWV0YUZpbGVSZWY6IERvY01ldGFGaWxlUmVmKTogdm9pZCB7XG4gICAgLy9cbiAgICAvLyAgICAgY29uc3QgZmFpbHVyZVByb3ZpZGVyID0gYXN5bmMgKCkgPT4gUHJvbWlzZS5yZWplY3QoXCJObyByZWFkcyBkdXJpbmcgZGVsZXRlIGFsbG93ZWRcIik7XG4gICAgLy9cbiAgICAvLyAgICAgY29uc3QgZG9jTWV0YVNuYXBzaG90RXZlbnQ6IERvY01ldGFTbmFwc2hvdEV2ZW50ID0ge1xuICAgIC8vICAgICAgICAgZGF0YXN0b3JlOiB0aGlzLmRhdGFzdG9yZS5pZCxcbiAgICAvLyAgICAgICAgIHByb2dyZXNzOiBQcm9ncmVzc1RyYWNrZXJzLmNvbXBsZXRlZCgnb25EZWxldGUnKSxcbiAgICAvLyAgICAgICAgIGNvbnNpc3RlbmN5OiAnY29tbWl0dGVkJyxcbiAgICAvLyAgICAgICAgIGRvY01ldGFNdXRhdGlvbnM6IFtcbiAgICAvLyAgICAgICAgICAgICB7XG4gICAgLy8gICAgICAgICAgICAgICAgIGZpbmdlcnByaW50OiBkb2NNZXRhRmlsZVJlZi5maW5nZXJwcmludCxcbiAgICAvLyAgICAgICAgICAgICAgICAgLy8gZm9yIGRlbGV0ZXMgZG8gbm90IHJlZmVyZW5jZSB0aGUgRG9jSW5mbyBvciB0aGUgRG9jTWV0YVxuICAgIC8vICAgICAgICAgICAgICAgICBkYXRhUHJvdmlkZXI6IGZhaWx1cmVQcm92aWRlcixcbiAgICAvLyAgICAgICAgICAgICAgICAgZG9jTWV0YVByb3ZpZGVyOiBmYWlsdXJlUHJvdmlkZXIsXG4gICAgLy8gICAgICAgICAgICAgICAgIGRvY0luZm9Qcm92aWRlcjogZmFpbHVyZVByb3ZpZGVyLFxuICAgIC8vICAgICAgICAgICAgICAgICBkb2NNZXRhRmlsZVJlZlByb3ZpZGVyOiBhc3luYyAoKSA9PiBkb2NNZXRhRmlsZVJlZixcbiAgICAvLyAgICAgICAgICAgICAgICAgbXV0YXRpb25UeXBlOiAnZGVsZXRlZCdcbiAgICAvLyAgICAgICAgICAgICB9XG4gICAgLy9cbiAgICAvLyAgICAgICAgIF1cbiAgICAvLyAgICAgfTtcbiAgICAvL1xuICAgIC8vICAgICB0aGlzLmRvY01ldGFTbmFwc2hvdEV2ZW50RGlzcGF0Y2hlci5kaXNwYXRjaEV2ZW50KGRvY01ldGFTbmFwc2hvdEV2ZW50KTtcbiAgICAvL1xuICAgIC8vIH1cbiAgICAvL1xuICAgIC8vIHB1YmxpYyBvbldyaXRlKGZpbmdlcnByaW50OiBzdHJpbmcsIGRhdGE6IHN0cmluZywgZG9jSW5mbzogSURvY0luZm8pOiB2b2lkIHtcbiAgICAvL1xuICAgIC8vICAgICBjb25zdCBkb2NNZXRhU25hcHNob3RFdmVudDogRG9jTWV0YVNuYXBzaG90RXZlbnQgPSB7XG4gICAgLy8gICAgICAgICBkYXRhc3RvcmU6IHRoaXMuZGF0YXN0b3JlLmlkLFxuICAgIC8vICAgICAgICAgcHJvZ3Jlc3M6IFByb2dyZXNzVHJhY2tlcnMuY29tcGxldGVkKCdvbldyaXRlJyksXG4gICAgLy8gICAgICAgICBjb25zaXN0ZW5jeTogJ2NvbW1pdHRlZCcsXG4gICAgLy8gICAgICAgICBkb2NNZXRhTXV0YXRpb25zOiBbXG4gICAgLy8gICAgICAgICAgICAge1xuICAgIC8vICAgICAgICAgICAgICAgICBmaW5nZXJwcmludCxcbiAgICAvLyAgICAgICAgICAgICAgICAgZGF0YVByb3ZpZGVyOiBBc3luY1Byb3ZpZGVycy5vZihkYXRhKSxcbiAgICAvLyAgICAgICAgICAgICAgICAgZG9jTWV0YVByb3ZpZGVyOiBhc3luYyAoKSA9PiBEb2NNZXRhcy5kZXNlcmlhbGl6ZShkYXRhKSxcbiAgICAvLyAgICAgICAgICAgICAgICAgZG9jSW5mb1Byb3ZpZGVyOiBhc3luYyAoKSA9PiBkb2NJbmZvLFxuICAgIC8vICAgICAgICAgICAgICAgICBkb2NNZXRhRmlsZVJlZlByb3ZpZGVyOiBhc3luYyAoKSA9PiBEb2NNZXRhRmlsZVJlZnMuY3JlYXRlRnJvbURvY0luZm8oZG9jSW5mbyksXG4gICAgLy8gICAgICAgICAgICAgICAgIC8vIFRPRE86IHdlIGRvbid0IGtub3cgcmlnaHQgbm93IGlmIGl0J3MgY3JlYXRlZCBvciB1cGRhdGVkXG4gICAgLy8gICAgICAgICAgICAgICAgIC8vIGJ1dCBmb3Igb3VyIHVzZXMgSSBkb24ndCB0aGluayBpdCBtYXR0ZXJzLlxuICAgIC8vICAgICAgICAgICAgICAgICBtdXRhdGlvblR5cGU6ICd1cGRhdGVkJ1xuICAgIC8vICAgICAgICAgICAgIH1cbiAgICAvLyAgICAgICAgIF0sXG4gICAgLy8gICAgIH07XG4gICAgLy9cbiAgICAvLyAgICAgdGhpcy5kb2NNZXRhU25hcHNob3RFdmVudERpc3BhdGNoZXIuZGlzcGF0Y2hFdmVudChkb2NNZXRhU25hcHNob3RFdmVudCk7XG4gICAgLy9cbiAgICAvLyB9XG5cbiAgICBwdWJsaWMgYWRkRG9jTWV0YVNuYXBzaG90RXZlbnRMaXN0ZW5lcihkb2NNZXRhU25hcHNob3RFdmVudExpc3RlbmVyOiBEb2NNZXRhU25hcHNob3RFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuZG9jTWV0YVNuYXBzaG90RXZlbnREaXNwYXRjaGVyLmFkZEV2ZW50TGlzdGVuZXIoZG9jTWV0YVNuYXBzaG90RXZlbnRMaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgcHVibGljIHN0b3AoKSB7XG4gICAgICAgIHRoaXMuZG9jTWV0YVNuYXBzaG90RXZlbnREaXNwYXRjaGVyLmNsZWFyKCk7XG4gICAgfVxuXG59XG4iXX0=