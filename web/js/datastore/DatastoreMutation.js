"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Latch_1 = require("../util/Latch");
class AbstractDatastoreMutation {
}
class DefaultDatastoreMutation extends AbstractDatastoreMutation {
    constructor() {
        super(...arguments);
        this.written = new Latch_1.Latch();
        this.committed = new Latch_1.Latch();
    }
}
exports.DefaultDatastoreMutation = DefaultDatastoreMutation;
class CommittedDatastoreMutation extends AbstractDatastoreMutation {
    constructor(value) {
        super();
        this.written = new Latch_1.Latch();
        this.committed = new Latch_1.Latch();
        this.written.resolve(value);
        this.committed.resolve(value);
    }
}
exports.CommittedDatastoreMutation = CommittedDatastoreMutation;
class BatchDatastoreMutation extends AbstractDatastoreMutation {
    constructor(dm0, dm1, target) {
        super();
        this.written = target.written;
        this.committed = target.committed;
        this.batched(dm0.written.get(), dm1.written.get(), this.written);
        this.batched(dm0.committed.get(), dm1.committed.get(), this.committed);
    }
    batched(promise0, promise1, latch) {
        const batch = Promise.all([promise0, promise1]);
        batch.then((result) => {
            latch.resolve(result[0]);
        }).catch(err => {
            latch.reject(err);
        });
    }
}
exports.BatchDatastoreMutation = BatchDatastoreMutation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YXN0b3JlTXV0YXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEYXRhc3RvcmVNdXRhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUFvQztBQXNCcEMsTUFBZSx5QkFBeUI7Q0FNdkM7QUFNRCxNQUFhLHdCQUE0QixTQUFRLHlCQUE0QjtJQUE3RTs7UUFFb0IsWUFBTyxHQUFHLElBQUksYUFBSyxFQUFLLENBQUM7UUFFekIsY0FBUyxHQUFHLElBQUksYUFBSyxFQUFLLENBQUM7SUFFL0MsQ0FBQztDQUFBO0FBTkQsNERBTUM7QUFLRCxNQUFhLDBCQUE4QixTQUFRLHlCQUE0QjtJQU0zRSxZQUFZLEtBQVE7UUFDaEIsS0FBSyxFQUFFLENBQUM7UUFMSSxZQUFPLEdBQUcsSUFBSSxhQUFLLEVBQUssQ0FBQztRQUV6QixjQUFTLEdBQUcsSUFBSSxhQUFLLEVBQUssQ0FBQztRQUl2QyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDO0NBRUo7QUFaRCxnRUFZQztBQUtELE1BQWEsc0JBQTBCLFNBQVEseUJBQTRCO0lBTXZFLFlBQVksR0FBeUIsRUFBRSxHQUF5QixFQUFFLE1BQTRCO1FBQzFGLEtBQUssRUFBRSxDQUFDO1FBRVIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQzlCLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUVsQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTNFLENBQUM7SUFFTyxPQUFPLENBQUMsUUFBb0IsRUFBRSxRQUFvQixFQUFFLEtBQWU7UUFFdkUsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBRWhELEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNsQixLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNYLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDO0NBRUo7QUE3QkQsd0RBNkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtMYXRjaH0gZnJvbSAnLi4vdXRpbC9MYXRjaCc7XG5cbi8qKlxuICogVGhlIHJlc3VsdCBvZiBhIERhdGFzdG9yZSBtdXRhdGlvbiBpbmNsdWRpbmcgbGF0Y2hlcyBmb3Igd2hldGhlciB0aGUgcmVzdWx0XG4gKiB3YXMgZnVsbCB3cml0dGVuIG9yIG5vdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEYXRhc3RvcmVNdXRhdGlvbjxUPiB7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbXV0YXRpb24gd2FzIHdyaXR0ZW4gYnV0IHN0aWxsIHBlbmRpbmcuICBUaGlzIGhhcHBlbnMgd2hlbiB3ZSdyZVxuICAgICAqIHdyaXRpbmcgdG8gYSBXQUwgb3IgYSBsb2NhbCB2cyBjbG91ZCBlbnZpcm9ubWVudCB3aGVyZSB0aGUgd3JpdGUgbWF5IG5lZWRcbiAgICAgKiB0byBiZSB3cml0dGVuIHRvIGEgY2xvdWQgcHJvdmlkZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgd3JpdHRlbjogTGF0Y2g8VD47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbXV0YXRpb24gd2FzIGZ1bGx5IGNvbW1taXRlZCBhbmQgY2FuIG5vdCBiZSBsb3N0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbW1pdHRlZDogTGF0Y2g8VD47XG5cbn1cblxuYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3REYXRhc3RvcmVNdXRhdGlvbjxUPiBpbXBsZW1lbnRzIERhdGFzdG9yZU11dGF0aW9uPFQ+IHtcblxuICAgIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSB3cml0dGVuOiBMYXRjaDxUPjtcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgY29tbWl0dGVkOiBMYXRjaDxUPjtcblxuXG59XG5cbi8qKlxuICogRnVsbHkgY29tbWl0ZWQgYWhlYWQgb2YgdGltZSBhbmQgd2l0aCBhIGdpdmVuIHZhbHVlLiBUaGlzIGlzIHVzZWQgZm9yIHRoZVxuICogZGlzayBkYXRhc3RvcmVcbiAqL1xuZXhwb3J0IGNsYXNzIERlZmF1bHREYXRhc3RvcmVNdXRhdGlvbjxUPiBleHRlbmRzIEFic3RyYWN0RGF0YXN0b3JlTXV0YXRpb248VD4ge1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHdyaXR0ZW4gPSBuZXcgTGF0Y2g8VD4oKTtcblxuICAgIHB1YmxpYyByZWFkb25seSBjb21taXR0ZWQgPSBuZXcgTGF0Y2g8VD4oKTtcblxufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21taXR0ZWREYXRhc3RvcmVNdXRhdGlvbjxUPiBleHRlbmRzIEFic3RyYWN0RGF0YXN0b3JlTXV0YXRpb248VD4ge1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHdyaXR0ZW4gPSBuZXcgTGF0Y2g8VD4oKTtcblxuICAgIHB1YmxpYyByZWFkb25seSBjb21taXR0ZWQgPSBuZXcgTGF0Y2g8VD4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiBUKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMud3JpdHRlbi5yZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgdGhpcy5jb21taXR0ZWQucmVzb2x2ZSh2YWx1ZSk7XG4gICAgfVxuXG59XG5cbi8qKlxuICogVGhlIHdyaXRlcyB3cml0dGVuIGFuZCBjb21taXR0ZWQgbXV0YXRpb25zIGNvbXBsZXRlIHRvZ2V0aGVyIGFzIGEgYmF0Y2guXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXRjaERhdGFzdG9yZU11dGF0aW9uPFQ+IGV4dGVuZHMgQWJzdHJhY3REYXRhc3RvcmVNdXRhdGlvbjxUPiB7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgd3JpdHRlbjogTGF0Y2g8VD47XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgY29tbWl0dGVkOiBMYXRjaDxUPjtcblxuICAgIGNvbnN0cnVjdG9yKGRtMDogRGF0YXN0b3JlTXV0YXRpb248VD4sIGRtMTogRGF0YXN0b3JlTXV0YXRpb248VD4sIHRhcmdldDogRGF0YXN0b3JlTXV0YXRpb248VD4gKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy53cml0dGVuID0gdGFyZ2V0LndyaXR0ZW47XG4gICAgICAgIHRoaXMuY29tbWl0dGVkID0gdGFyZ2V0LmNvbW1pdHRlZDtcblxuICAgICAgICB0aGlzLmJhdGNoZWQoZG0wLndyaXR0ZW4uZ2V0KCksIGRtMS53cml0dGVuLmdldCgpLCB0aGlzLndyaXR0ZW4pO1xuICAgICAgICB0aGlzLmJhdGNoZWQoZG0wLmNvbW1pdHRlZC5nZXQoKSwgZG0xLmNvbW1pdHRlZC5nZXQoKSwgdGhpcy5jb21taXR0ZWQpO1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBiYXRjaGVkKHByb21pc2UwOiBQcm9taXNlPFQ+LCBwcm9taXNlMTogUHJvbWlzZTxUPiwgbGF0Y2g6IExhdGNoPFQ+KTogdm9pZCB7XG5cbiAgICAgICAgY29uc3QgYmF0Y2ggPSBQcm9taXNlLmFsbChbcHJvbWlzZTAsIHByb21pc2UxXSk7XG5cbiAgICAgICAgYmF0Y2gudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBsYXRjaC5yZXNvbHZlKHJlc3VsdFswXSk7XG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICBsYXRjaC5yZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbn1cbiJdfQ==