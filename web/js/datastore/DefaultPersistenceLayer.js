"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const DocMeta_1 = require("../metadata/DocMeta");
const DocMetas_1 = require("../metadata/DocMetas");
const Preconditions_1 = require("../Preconditions");
const Logger_1 = require("../logger/Logger");
const Dictionaries_1 = require("../util/Dictionaries");
const ISODateTimeStrings_1 = require("../metadata/ISODateTimeStrings");
const Reducers_1 = require("../util/Reducers");
const DatastoreMutation_1 = require("./DatastoreMutation");
const DatastoreMutations_1 = require("./DatastoreMutations");
const UUIDs_1 = require("../metadata/UUIDs");
const Functions_1 = require("../util/Functions");
const log = Logger_1.Logger.create();
class DefaultPersistenceLayer {
    constructor(datastore) {
        this.id = 'default';
        this.datastore = datastore;
        this.datastoreMutations = DatastoreMutations_1.DatastoreMutations.create('written');
    }
    init(errorListener = Functions_1.NULL_FUNCTION) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.datastore.init(errorListener);
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.datastore.stop();
        });
    }
    contains(fingerprint) {
        return this.datastore.contains(fingerprint);
    }
    delete(docMetaFileRef, datastoreMutation = new DatastoreMutation_1.DefaultDatastoreMutation()) {
        return this.datastore.delete(docMetaFileRef, datastoreMutation);
    }
    getDocMeta(fingerprint) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.datastore.getDocMeta(fingerprint);
            if (!Preconditions_1.isPresent(data)) {
                return undefined;
            }
            if (!(typeof data === "string")) {
                throw new Error("Expected string and received: " + typeof data);
            }
            const docMeta = DocMetas_1.DocMetas.deserialize(data, fingerprint);
            return docMeta;
        });
    }
    writeDocMeta(docMeta, datastoreMutation) {
        return __awaiter(this, void 0, void 0, function* () {
            Preconditions_1.Preconditions.assertPresent(docMeta, "No docMeta");
            Preconditions_1.Preconditions.assertPresent(docMeta.docInfo, "No docInfo on docMeta");
            Preconditions_1.Preconditions.assertPresent(docMeta.docInfo.fingerprint, "No fingerprint on docInfo");
            return this.write(docMeta.docInfo.fingerprint, docMeta, datastoreMutation);
        });
    }
    write(fingerprint, docMeta, datastoreMutation = new DatastoreMutation_1.DefaultDatastoreMutation()) {
        return __awaiter(this, void 0, void 0, function* () {
            Preconditions_1.Preconditions.assertNotNull(fingerprint, "fingerprint");
            Preconditions_1.Preconditions.assertNotNull(docMeta, "docMeta");
            if (!(docMeta instanceof DocMeta_1.DocMeta)) {
                throw new Error("Can not sync anything other than DocMeta.");
            }
            docMeta = Dictionaries_1.Dictionaries.copyOf(docMeta);
            docMeta.docInfo.lastUpdated = ISODateTimeStrings_1.ISODateTimeStrings.create();
            docMeta.docInfo.nrComments = Object.values(docMeta.pageMetas)
                .map(current => Dictionaries_1.Dictionaries.countOf(current.comments))
                .reduce(Reducers_1.Reducers.SUM, 0);
            docMeta.docInfo.nrNotes = Object.values(docMeta.pageMetas)
                .map(current => Dictionaries_1.Dictionaries.countOf(current.notes))
                .reduce(Reducers_1.Reducers.SUM, 0);
            docMeta.docInfo.nrFlashcards = Object.values(docMeta.pageMetas)
                .map(current => Dictionaries_1.Dictionaries.countOf(current.flashcards))
                .reduce(Reducers_1.Reducers.SUM, 0);
            docMeta.docInfo.nrTextHighlights = Object.values(docMeta.pageMetas)
                .map(current => Dictionaries_1.Dictionaries.countOf(current.textHighlights))
                .reduce(Reducers_1.Reducers.SUM, 0);
            docMeta.docInfo.nrAreaHighlights = Object.values(docMeta.pageMetas)
                .map(current => Dictionaries_1.Dictionaries.countOf(current.areaHighlights))
                .reduce(Reducers_1.Reducers.SUM, 0);
            docMeta.docInfo.nrAnnotations =
                docMeta.docInfo.nrComments +
                    docMeta.docInfo.nrNotes +
                    docMeta.docInfo.nrFlashcards +
                    docMeta.docInfo.nrTextHighlights +
                    docMeta.docInfo.nrAreaHighlights;
            if (docMeta.docInfo.added === undefined) {
                docMeta.docInfo.added = ISODateTimeStrings_1.ISODateTimeStrings.create();
            }
            docMeta.docInfo.uuid = UUIDs_1.UUIDs.create();
            log.info(`Sync of docMeta with fingerprint: ${fingerprint} and UUID: ` + docMeta.docInfo.uuid);
            const data = DocMetas_1.DocMetas.serialize(docMeta);
            const docInfo = Object.assign({}, docMeta.docInfo);
            const syncMutation = new DatastoreMutation_1.DefaultDatastoreMutation();
            this.datastoreMutations.pipe(syncMutation, datastoreMutation, () => docInfo);
            yield this.datastore.write(fingerprint, data, docInfo, syncMutation);
            return docInfo;
        });
    }
    synchronizeDocs(...docMetaRefs) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.datastore.synchronizeDocs(...docMetaRefs);
        });
    }
    getDocMetaRefs() {
        return this.datastore.getDocMetaRefs();
    }
    snapshot(listener, errorListener = Functions_1.NULL_FUNCTION) {
        return this.datastore.snapshot(listener, errorListener);
    }
    createBackup() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.datastore.createBackup();
        });
    }
    writeFile(backend, ref, data, meta = {}) {
        return this.datastore.writeFile(backend, ref, data, meta);
    }
    containsFile(backend, ref) {
        return this.datastore.containsFile(backend, ref);
    }
    getFile(backend, ref) {
        return this.datastore.getFile(backend, ref);
    }
    addDocMetaSnapshotEventListener(docMetaSnapshotEventListener) {
        this.datastore.addDocMetaSnapshotEventListener(docMetaSnapshotEventListener);
    }
    deactivate() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.datastore.deactivate();
        });
    }
}
exports.DefaultPersistenceLayer = DefaultPersistenceLayer;
//# sourceMappingURL=data:application/json;base64,