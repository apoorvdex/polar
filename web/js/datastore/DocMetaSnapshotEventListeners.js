"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const DocMetaComparisonIndex_1 = require("./DocMetaComparisonIndex");
class DocMetaSnapshotEventListeners {
    static createDeduplicatedListener(outputListener, docMetaComparisonIndex = new DocMetaComparisonIndex_1.DocMetaComparisonIndex()) {
        if (!docMetaComparisonIndex) {
            docMetaComparisonIndex = new DocMetaComparisonIndex_1.DocMetaComparisonIndex();
        }
        const listener = (docMetaSnapshotEvent) => __awaiter(this, void 0, void 0, function* () {
            const acceptedDocMetaMutations = [];
            for (const docMetaMutation of docMetaSnapshotEvent.docMetaMutations) {
                const docInfo = yield docMetaMutation.docInfoProvider();
                if (docMetaComparisonIndex.handleDocMetaMutation(docMetaMutation, docInfo)) {
                    acceptedDocMetaMutations.push(docMetaMutation);
                }
            }
            yield outputListener(Object.assign({}, docMetaSnapshotEvent, { docMetaMutations: acceptedDocMetaMutations }));
        });
        return {
            handleDocMetaMutation: docMetaComparisonIndex.handleDocMetaMutation.bind(docMetaComparisonIndex),
            listener,
        };
    }
}
exports.DocMetaSnapshotEventListeners = DocMetaSnapshotEventListeners;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9jTWV0YVNuYXBzaG90RXZlbnRMaXN0ZW5lcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEb2NNZXRhU25hcHNob3RFdmVudExpc3RlbmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQ0EscUVBQWdFO0FBR2hFLE1BQWEsNkJBQTZCO0lBWS9CLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxjQUE0QyxFQUM1QyxzQkFBc0IsR0FBRyxJQUFJLCtDQUFzQixFQUFFO1FBRTFGLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUN6QixzQkFBc0IsR0FBRyxJQUFJLCtDQUFzQixFQUFFLENBQUM7U0FDekQ7UUFVRCxNQUFNLFFBQVEsR0FBRyxDQUFPLG9CQUEwQyxFQUFFLEVBQUU7WUFFbEUsTUFBTSx3QkFBd0IsR0FBc0IsRUFBRSxDQUFDO1lBRXZELEtBQUssTUFBTSxlQUFlLElBQUksb0JBQW9CLENBQUMsZ0JBQWdCLEVBQUU7Z0JBRWpFLE1BQU0sT0FBTyxHQUFHLE1BQU0sZUFBZSxDQUFDLGVBQWUsRUFBRSxDQUFDO2dCQUV4RCxJQUFJLHNCQUFzQixDQUFDLHFCQUFxQixDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsRUFBRTtvQkFDeEUsd0JBQXdCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2lCQUNsRDthQUVKO1lBT0QsTUFBTSxjQUFjLG1CQUNiLG9CQUFvQixJQUN2QixnQkFBZ0IsRUFBRSx3QkFBd0IsSUFDNUMsQ0FBQztRQUVQLENBQUMsQ0FBQSxDQUFDO1FBRUYsT0FBTztZQUNILHFCQUFxQixFQUFFLHNCQUFzQixDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztZQUNoRyxRQUFRO1NBQ1gsQ0FBQztJQUVOLENBQUM7Q0FFSjtBQTVERCxzRUE0REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RvY01ldGFNdXRhdGlvbiwgRG9jTWV0YVNuYXBzaG90RXZlbnQsIERvY01ldGFTbmFwc2hvdEV2ZW50TGlzdGVuZXJ9IGZyb20gJy4vRGF0YXN0b3JlJztcbmltcG9ydCB7RG9jTWV0YUNvbXBhcmlzb25JbmRleH0gZnJvbSAnLi9Eb2NNZXRhQ29tcGFyaXNvbkluZGV4JztcbmltcG9ydCB7SURvY0luZm99IGZyb20gJy4uL21ldGFkYXRhL0RvY0luZm8nO1xuXG5leHBvcnQgY2xhc3MgRG9jTWV0YVNuYXBzaG90RXZlbnRMaXN0ZW5lcnMge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGxpc3RlbmVyIHRoYXQgdGFrZXMgaW5wdXRzIGFuZCBjcmVhdGVzIGEgZGUtZHVwbGljYXRlZFxuICAgICAqIGxpc3RlbmVyIHRoYXQgb25seSBlbWl0cyBuZXcgb3IgdXBkYXRlZCBkb2N1bWVudHMgYnkgdGhlIFVVSUQgb3IgZGVsZXRlZFxuICAgICAqIGRvY3VtZW50cy5cbiAgICAgKlxuICAgICAqIFRoaXMgd29yayB3aXRoIG9uZSBvcmUgbW9yZSBsaXN0ZW5lcnMgd2hpY2ggZW5hYmxlcyB1cyB0byBoYXZlXG4gICAgICogZXhpc3RpbmcgbGlzdGVuZXJzIHRoYXQgc2VuZHMgZnJvbSBJUEMgYXMgd2VsbCB0aGUgZmlyZWJhc2UgbGlzdGVuZXJzXG4gICAgICogYW5kIHdlIHdpbGwganVzdCBnZXQgdGhlIGVhcmxpZXN0IG9uZS5cbiAgICAgKlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlRGVkdXBsaWNhdGVkTGlzdGVuZXIob3V0cHV0TGlzdGVuZXI6IERvY01ldGFTbmFwc2hvdEV2ZW50TGlzdGVuZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2NNZXRhQ29tcGFyaXNvbkluZGV4ID0gbmV3IERvY01ldGFDb21wYXJpc29uSW5kZXgoKSk6IEV2ZW50RGVkdXBsaWNhdG9yIHtcblxuICAgICAgICBpZiAoIWRvY01ldGFDb21wYXJpc29uSW5kZXgpIHtcbiAgICAgICAgICAgIGRvY01ldGFDb21wYXJpc29uSW5kZXggPSBuZXcgRG9jTWV0YUNvbXBhcmlzb25JbmRleCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogU2hvdWxkIHdlIGZpbHRlciBvbiB0aGUgY29uc2lzdGVuY3kgbGV2ZWw/ICBXZSBuZWVkIGEgd2F5IHRvXG4gICAgICAgIC8vIHRyaWdnZXIgdGhlIGZpcnN0IHN5bmMgd2hlbiB3ZSBnZXQgdGhlIGNvbW1pdHRlZCB3cml0ZXMgZnJvbSB0aGVcbiAgICAgICAgLy8gRmlyZWJhc2VEYXRhc3RvcmUgc28gaWYgd2UgZ2V0ICd3cml0dGVuJyBjb25zaXN0ZW5jeSBsZXZlbCBmcm9tIEZpcmViYXNlXG4gICAgICAgIC8vIGFuZCB0aGUgcmVzdCBhcmUgZmlsdGVyZWQgd2UgY2FuJ3QgZXZlciB0cmlnZ2VyIHRoZSBzeW5jaHJvbml6ZSAuLi5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gV2UgY291bGQgaGF2ZSBjdXN0b20gZmlsdGVycyBmb3IgdGhlIGxldmVsLi4uIHNvIHdlIGNvdWxkIHN1cHBvcnRcbiAgICAgICAgLy8gQk9USCwgY29tbWl0dGVkLCBvciB3cml0dGVuIGxldmVscy4uLlxuXG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gYXN5bmMgKGRvY01ldGFTbmFwc2hvdEV2ZW50OiBEb2NNZXRhU25hcHNob3RFdmVudCkgPT4ge1xuXG4gICAgICAgICAgICBjb25zdCBhY2NlcHRlZERvY01ldGFNdXRhdGlvbnM6IERvY01ldGFNdXRhdGlvbltdID0gW107XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgZG9jTWV0YU11dGF0aW9uIG9mIGRvY01ldGFTbmFwc2hvdEV2ZW50LmRvY01ldGFNdXRhdGlvbnMpIHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGRvY0luZm8gPSBhd2FpdCBkb2NNZXRhTXV0YXRpb24uZG9jSW5mb1Byb3ZpZGVyKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZG9jTWV0YUNvbXBhcmlzb25JbmRleC5oYW5kbGVEb2NNZXRhTXV0YXRpb24oZG9jTWV0YU11dGF0aW9uLCBkb2NJbmZvKSkge1xuICAgICAgICAgICAgICAgICAgICBhY2NlcHRlZERvY01ldGFNdXRhdGlvbnMucHVzaChkb2NNZXRhTXV0YXRpb24pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBhbHdheXMgZW1pdCB0aGUgbGlzdGVuZXIgZXZlbiBpZiB3ZSd2ZSBhY2NlcHRlZCBubyBtdXRhdGlvbnNcbiAgICAgICAgICAgIC8vIGJlY2F1c2Ugb3RoZXIgbWV0YWRhdGEgaGVyZSBpbmNsdWRpbmcgdGhlIGJhdGNoIGFuZCBwcm9ncmVzcyBpc1xuICAgICAgICAgICAgLy8gbmVjZXNzYXJ5IHRvIGhhbmRsZSB3aXRoaW4gdGhlIGxpc3RlbmVyIGZvciBkb3duc3RyZWFtIGV2ZW50XG4gICAgICAgICAgICAvLyBoYW5kbGVyc1xuXG4gICAgICAgICAgICBhd2FpdCBvdXRwdXRMaXN0ZW5lcih7XG4gICAgICAgICAgICAgICAgLi4uZG9jTWV0YVNuYXBzaG90RXZlbnQsXG4gICAgICAgICAgICAgICAgZG9jTWV0YU11dGF0aW9uczogYWNjZXB0ZWREb2NNZXRhTXV0YXRpb25zLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGFuZGxlRG9jTWV0YU11dGF0aW9uOiBkb2NNZXRhQ29tcGFyaXNvbkluZGV4LmhhbmRsZURvY01ldGFNdXRhdGlvbi5iaW5kKGRvY01ldGFDb21wYXJpc29uSW5kZXgpLFxuICAgICAgICAgICAgbGlzdGVuZXIsXG4gICAgICAgIH07XG5cbiAgICB9XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFdmVudERlZHVwbGljYXRvciB7XG5cbiAgICBoYW5kbGVEb2NNZXRhTXV0YXRpb24oZG9jTWV0YU11dGF0aW9uOiBEb2NNZXRhTXV0YXRpb24sIGRvY0luZm86IElEb2NJbmZvKTogYm9vbGVhbjtcblxuICAgIGxpc3RlbmVyOiBEb2NNZXRhU25hcHNob3RFdmVudExpc3RlbmVyO1xuXG59XG4iXX0=