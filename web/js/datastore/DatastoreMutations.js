"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const DatastoreMutation_1 = require("./DatastoreMutation");
class DatastoreMutations {
    constructor(consistency) {
        this.consistency = consistency;
    }
    static create(consistency) {
        return new DatastoreMutations(consistency);
    }
    batched(dm0, dm1, target) {
        this.batchPromises(dm0.written.get(), dm1.written.get(), target.written);
        if (this.consistency === 'committed') {
            this.batchPromises(dm0.committed.get(), dm1.committed.get(), target.committed);
        }
    }
    handle(promise, target, converter) {
        promise.then((result) => {
            try {
                target.written.resolve(converter(result));
                target.committed.resolve(converter(result));
            }
            catch (err) {
                console.error("Unable to resolve: ", err);
            }
        }).catch(err => {
            try {
                target.written.reject(err);
                target.committed.reject(err);
            }
            catch (err) {
                console.error("Unable to reject: ", err);
            }
        });
    }
    pipe(source, target, converter) {
        this.pipeLatch(source.written, target.written, converter);
        this.pipeLatch(source.committed, target.committed, converter);
    }
    executeBatchedWrite(datastoreMutation, remoteSync, localSync, remoteCoordinator = new DatastoreMutation_1.DefaultDatastoreMutation(), localCoordinator = new DatastoreMutation_1.DefaultDatastoreMutation()) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                remoteSync(remoteCoordinator)
                    .catch((err) => reject(err));
                remoteCoordinator.written.get()
                    .then(() => {
                    localSync(localCoordinator)
                        .catch(err => reject(err));
                })
                    .catch((err) => reject(err));
                this.batched(remoteCoordinator, localCoordinator, datastoreMutation);
                if (this.consistency === 'committed') {
                    datastoreMutation.committed.get()
                        .then(() => resolve())
                        .catch((err) => reject(err));
                }
                else {
                    datastoreMutation.written.get()
                        .then(() => resolve())
                        .catch((err) => reject(err));
                }
            });
        });
    }
    pipeLatch(source, target, converter) {
        source.get()
            .then((value) => target.resolve(converter(value)))
            .catch(err => target.reject(err));
    }
    batchPromises(promise0, promise1, latch) {
        const batch = Promise.all([promise0, promise1]);
        batch.then((result) => {
            latch.resolve(result[0]);
        }).catch(err => {
            latch.reject(err);
        });
    }
}
exports.DatastoreMutations = DatastoreMutations;
//# sourceMappingURL=data:application/json;base64,