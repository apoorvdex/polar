"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Objects_1 = require("../../util/Objects");
class CacheEntry {
    constructor(options) {
        this.headers = {};
        this.statusCode = 200;
        this.statusMessage = "OK";
        this.contentType = "text/html";
        this.mimeType = "text/html";
        this.encoding = "UTF-8";
        this.method = "GET";
        this.url = options.url;
        Object.assign(this, options);
        Objects_1.Objects.defaults(this, {
            method: "GET",
            headers: {},
            statusCode: 200,
            statusMessage: "OK",
            contentType: "text/html",
            mimeType: "text/html",
            encoding: "UTF-8",
        });
    }
}
exports.CacheEntry = CacheEntry;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FjaGVFbnRyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNhY2hlRW50cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFLQSxnREFBMkM7QUFFM0MsTUFBc0IsVUFBVTtJQWE1QixZQUFzQixPQUFvQjtRQVRuQyxZQUFPLEdBQXVDLEVBQUUsQ0FBQztRQUNqRCxlQUFVLEdBQUcsR0FBRyxDQUFDO1FBQ2pCLGtCQUFhLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLGdCQUFXLEdBQUcsV0FBVyxDQUFDO1FBQzFCLGFBQVEsR0FBRyxXQUFXLENBQUM7UUFDdkIsYUFBUSxHQUFHLE9BQU8sQ0FBQztRQU10QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUVwQixJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFFdkIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFHN0IsaUJBQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFO1lBQ25CLE1BQU0sRUFBRSxLQUFLO1lBQ2IsT0FBTyxFQUFFLEVBQUU7WUFDWCxVQUFVLEVBQUUsR0FBRztZQUNmLGFBQWEsRUFBRSxJQUFJO1lBQ25CLFdBQVcsRUFBRSxXQUFXO1lBQ3hCLFFBQVEsRUFBRSxXQUFXO1lBQ3JCLFFBQVEsRUFBRSxPQUFPO1NBQ3BCLENBQUMsQ0FBQztJQUVQLENBQUM7Q0FpQko7QUFqREQsZ0NBaURDIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBodHRwczovL2V4cHJlc3Nqcy5jb20vZW4vNHgvYXBpLmh0bWwjcmVxXG4vLyBodHRwczovL2V4cHJlc3Nqcy5jb20vZW4vNHgvYXBpLmh0bWwjcmVzXG5cbmltcG9ydCB7aXNQcmVzZW50fSBmcm9tICcuLi8uLi9QcmVjb25kaXRpb25zJztcbmltcG9ydCB7T2JqZWN0c30gZnJvbSAnLi4vLi4vdXRpbC9PYmplY3RzJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENhY2hlRW50cnkgaW1wbGVtZW50cyBJQ2FjaGVFbnRyeSB7XG5cbiAgICBwdWJsaWMgbWV0aG9kOiBzdHJpbmc7XG4gICAgcHVibGljIHVybDogc3RyaW5nO1xuICAgIHB1YmxpYyBoZWFkZXJzOiB7W2tleTogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW119ID0ge307XG4gICAgcHVibGljIHN0YXR1c0NvZGUgPSAyMDA7XG4gICAgcHVibGljIHN0YXR1c01lc3NhZ2UgPSBcIk9LXCI7XG4gICAgcHVibGljIGNvbnRlbnRUeXBlID0gXCJ0ZXh0L2h0bWxcIjtcbiAgICBwdWJsaWMgbWltZVR5cGUgPSBcInRleHQvaHRtbFwiO1xuICAgIHB1YmxpYyBlbmNvZGluZyA9IFwiVVRGLThcIjtcbiAgICBwdWJsaWMgY29udGVudExlbmd0aD86IG51bWJlcjtcbiAgICBwdWJsaWMgZG9jVHlwZUZvcm1hdD86IERvY1R5cGVGb3JtYXQ7XG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3Iob3B0aW9uczogSUNhY2hlRW50cnkpIHtcblxuICAgICAgICB0aGlzLm1ldGhvZCA9IFwiR0VUXCI7XG5cbiAgICAgICAgdGhpcy51cmwgPSBvcHRpb25zLnVybDtcblxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBoYXZlIGRlZmF1bHRzIGZvciBldmVyeXRoaW5nLlxuICAgICAgICBPYmplY3RzLmRlZmF1bHRzKHRoaXMsIHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICAgICAgc3RhdHVzTWVzc2FnZTogXCJPS1wiLFxuICAgICAgICAgICAgY29udGVudFR5cGU6IFwidGV4dC9odG1sXCIsXG4gICAgICAgICAgICBtaW1lVHlwZTogXCJ0ZXh0L2h0bWxcIixcbiAgICAgICAgICAgIGVuY29kaW5nOiBcIlVURi04XCIsXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIGRhdGEgZm9yIHRoaXMgcmVxdWVzdC4gIFRoZSBjYWxsYmFjayBpcyBjYWxsZWQgYXMgYSBmdW5jdGlvblxuICAgICAqIHdpdGggb25lICdkYXRhJyBwYXJhbWV0ZXIgd2hpY2ggaXMgYSBidWZmZXIgb2YgZGF0YSB0byB3cml0ZS5cbiAgICAgKlxuICAgICAqIFRoZSBoYW5kbGVEYXRhIHNob3VsZCByZXR1cm4gZmFsc2Ugd2hlbiB0aGVyZSBpcyBubyBtb3JlIGRhdGEgdG8gaGFuZGxlLlxuICAgICAqXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGFzeW5jIGhhbmRsZURhdGEoY2FsbGJhY2s6IERhdGFDYWxsYmFjayk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgICAvKipcbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgYXN5bmMgdG9CdWZmZXIoKTogUHJvbWlzZTxCdWZmZXI+O1xuXG4gICAgcHVibGljIGFic3RyYWN0IGFzeW5jIHRvU3RyZWFtKCk6IFByb21pc2U8Tm9kZUpTLlJlYWRhYmxlU3RyZWFtPjtcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFDYWxsYmFjayB7XG4gICAgLy8gbm9pbnNwZWN0aW9uIFRzTGludFxuICAgIChkYXRhOiBCdWZmZXIpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElDYWNoZUVudHJ5IHtcblxuICAgIG1ldGhvZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFVSTCB0byByZXF1ZXN0LlxuICAgICAqL1xuICAgIHVybDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJlcXVlc3QgaGVhZGVycy5cbiAgICAgKlxuICAgICAqL1xuICAgIGhlYWRlcnM6IHtba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXX07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc3RhdHVzIGNvZGUgZm9yIHRoaXMgY2FjaGUgZW50cnkuXG4gICAgICovXG4gICAgc3RhdHVzQ29kZTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHN0YXR1cyBtZXNzYWdlLlxuICAgICAqL1xuICAgIHN0YXR1c01lc3NhZ2U6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogVGhlIGNvbnRlbnQgdHlwZSBvZiB0aGlzIGNvbnRlbnQuICBEZWZhdWx0IGlzIHRleHQvaHRtbC4gIFdlIHVzZVxuICAgICAqIGV4dGVuc2lvbnMgb2YgdGhlIGZpbGVzIGJhc2VkIG9uIHRoZSBjb250ZW50IHR5cGUuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGNvbnRlbnRUeXBlOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGVjb2RlZCBtaW5lIHR5cGUuIFRoZSBjb250ZW50VHlwZSBjYW4gaW5jbHVkZSBhbiBlbmNvZGluZyBzb1xuICAgICAqIGNvbnRlbnRUeXBlIGNhbiBiZSBicm9rZW4gZG93biBpbnRvIG1pbWVUeXBlICsgZW5jb2RpbmcuXG4gICAgICpcbiAgICAgKi9cbiAgICBtaW1lVHlwZTogc3RyaW5nO1xuXG4gICAgZW5jb2Rpbmc6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb250ZW50IGxlbmd0aCBvZiB0aGUgZGF0YSwgaWYga25vd25cbiAgICAgKi9cbiAgICBjb250ZW50TGVuZ3RoPzogbnVtYmVyO1xuXG4gICAgZG9jVHlwZUZvcm1hdD86IERvY1R5cGVGb3JtYXQ7XG5cbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGRvY3VtZW50IGZvcm1hdCBvZiB0aGUgdW5kZXJseWluZyBkb2N1bWVudCBieSBkZXRlcm1pbmluZyBpZlxuICogaXQncyBYTUwgb3IgSFRNTFxuICovXG5leHBvcnQgdHlwZSBEb2NUeXBlRm9ybWF0ID0gJ2h0bWwnIHwgJ3htbCc7XG4iXX0=