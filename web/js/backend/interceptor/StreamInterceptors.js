"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const electron_1 = require("electron");
const Logger_1 = require("../../logger/Logger");
const stream_1 = require("stream");
const Files_1 = require("../../util/Files");
const log = Logger_1.Logger.create();
class StreamInterceptors {
    static mockInterceptor(request, callback) {
        callback({
            statusCode: 200,
            headers: {
                'content-type': 'text/html'
            },
            data: createStream('HTTP 200 OK\r\n<h5>Response</h5>')
        });
    }
    static withSetTimeout(delegate) {
        setTimeout(() => {
            delegate();
        }, 0);
    }
    static handleWithNetRequest(request, callback) {
        log.debug("Handling request: ", request.url);
        const options = {
            method: request.method,
            url: request.url,
        };
        const responseStream = new stream_1.PassThrough();
        const netRequest = electron_1.net.request(options)
            .on('response', (response) => __awaiter(this, void 0, void 0, function* () {
            response
                .on('data', chunk => {
                responseStream.push(chunk);
            })
                .on('end', () => {
                responseStream.push(null);
            })
                .on('aborted', () => {
                log.error(`Response aborted: ${request.url}`);
                callback(undefined);
            })
                .on('error', () => {
                log.error(`Response error: ${request.url}`);
                callback(undefined);
            });
            const headers = Object.assign({}, response.headers);
            delete headers['content-encoding'];
            const streamProtocolResponse = {
                headers,
                data: responseStream,
                statusCode: response.statusCode
            };
            callback(streamProtocolResponse);
        }))
            .on('abort', () => {
            log.error(`Request abort: ${request.url}`);
            callback(undefined);
        })
            .on('error', (error) => {
            log.error(`Request error: ${request.url}`, error);
            callback(undefined);
        });
        for (const header of Object.keys(request.headers)) {
            log.debug("Setting request header: ", header);
            const headerValue = request.headers[header];
            netRequest.setHeader(header, headerValue);
        }
        ;
        if (request.uploadData) {
            log.debug(`Writing data to request with method ${request.method}`);
            request.uploadData.forEach(current => {
                if (current.file) {
                    Files_1.Files.readFileAsync(current.file)
                        .then(buffer => netRequest.write(buffer))
                        .catch(err => log.error("Could not upload: ", err));
                }
                else if (current.blobUUID) {
                    throw new Error("Do not currently handle blobs");
                }
                else {
                    netRequest.write(this.assertChunk(current.bytes));
                }
            });
        }
        netRequest.end();
    }
    static assertChunk(chunk) {
        if (chunk === undefined) {
            throw new TypeError('Must not be undefined.');
        }
        if (chunk === null) {
            throw new TypeError('Must not be null.');
        }
        const chunkIsString = typeof chunk === 'string';
        const chunkIsBuffer = chunk instanceof Buffer;
        if (!chunkIsString && !chunkIsBuffer) {
            log.error("Invalid data given: ", chunk);
            throw new TypeError('Must be a string or Buffer.');
        }
        return chunk;
    }
}
exports.StreamInterceptors = StreamInterceptors;
function createStream(text) {
    const rv = new stream_1.PassThrough();
    rv.push(text);
    rv.push(null);
    return rv;
}
//# sourceMappingURL=data:application/json;base64,