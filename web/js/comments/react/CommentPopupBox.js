"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Button_1 = __importDefault(require("reactstrap/lib/Button"));
const Popover_1 = __importDefault(require("reactstrap/lib/Popover"));
const PopoverBody_1 = __importDefault(require("reactstrap/lib/PopoverBody"));
const PopoverHeader_1 = __importDefault(require("reactstrap/lib/PopoverHeader"));
class CommentPopupBox extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.text = "";
        this.toggle = this.toggle.bind(this);
        this.handleComment = this.handleComment.bind(this);
        this.onTextAreaChange = this.onTextAreaChange.bind(this);
        this.state = {
            popoverOpen: false
        };
        this.props.commentEventDispatcher.addEventListener(commentEvent => {
            this.onCommentEvent(commentEvent);
        });
    }
    onCommentEvent(commentInputEvent) {
        const point = commentInputEvent.point;
        document.getElementById('comment-anchor').style.cssText
            = `position: absolute; top: ${point.y}px; left: ${point.x}px;`;
        this.setState({
            popoverOpen: true,
            commentInputEvent
        });
    }
    toggle() {
        this.setState({
            popoverOpen: !this.state.popoverOpen
        });
    }
    handleComment() {
        console.log("Got a comment: ", this.text);
        this.props.onComment({
            text: this.text,
            type: 'text',
            annotationDescriptor: this.state.commentInputEvent.annotationDescriptor,
            pageNum: this.state.commentInputEvent.pageNum
        });
        this.setState({
            popoverOpen: false
        });
    }
    onTextAreaChange(event) {
        const textArea = event.currentTarget;
        this.text = textArea.value;
    }
    render() {
        return (React.createElement("div", { id: "comment-popup-box" },
            React.createElement("div", { id: "comment-anchor" }),
            React.createElement(Popover_1.default, { placement: "bottom", id: "comment-popup-box-popover", isOpen: this.state.popoverOpen, target: "comment-anchor", toggle: this.toggle, style: { width: '650px' } },
                React.createElement(PopoverHeader_1.default, null, "Add Comment"),
                React.createElement(PopoverBody_1.default, null,
                    React.createElement("div", null,
                        React.createElement("textarea", { onChange: this.onTextAreaChange })),
                    React.createElement("div", null,
                        React.createElement(Button_1.default, { size: "sm", color: "primary", className: "mt-2", onClick: this.handleComment }, "Comment"))))));
    }
}
exports.CommentPopupBox = CommentPopupBox;
//# sourceMappingURL=data:application/json;base64,