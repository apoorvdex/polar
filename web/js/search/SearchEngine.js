"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoRW5naW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2VhcmNoRW5naW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lTT0RhdGVTdHJpbmcsIElTT0RhdGVUaW1lU3RyaW5nfSBmcm9tIFwiLi4vbWV0YWRhdGEvSVNPRGF0ZVRpbWVTdHJpbmdzXCI7XG5cbm5hbWVzcGFjZSBzZWFyY2gge1xuXG4gICAgLyoqXG4gICAgICogUmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHNlYXJjaCBlbmdpbmVzIGJ5IG1hdGNoaW5nIHRoZSBxdWVyeSB0byB0aGVcbiAgICAgKiBpbXBsZW1lbnRhdGlvbi5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElFbmdpbmVGYWN0b3J5IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGVuZ2luZXMgdGhhdCBjYW4gZXhlY3V0ZSB0aGUgZ2l2ZW4gcXVlcnkuICBUaGUgZW5naW5lIGlzIGNyZWF0ZWRcbiAgICAgICAgICogYnV0IGRvZXNuJ3QgeWV0IGhhdmUgYSBzZWFyY2ggZXhlY3V0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRFbmdpbmVzKHF1ZXJ5OiBRdWVyeVN0cik6IFByb21pc2U8UmVhZG9ubHlBcnJheTxFbmdpbmU+PjtcblxuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRW5naW5lIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSB1bmlxdWUgaWQgZm9yIHRoZSBzZWFyY2ggZW5naW5lLlxuICAgICAgICAgKi9cbiAgICAgICAgaWQ6IEVuZ2luZUlEU3RyO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSdW4gYSBzZWFyY2ggYW5kIHByb3ZpZGUgYSByZXN1bHRzIG9iamVjdCB0byBhbGxvdyB1cyB0byBpdGVyYXRlXG4gICAgICAgICAqIHRocm91Z2ggdGhlIHJlc3VsdHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZSBxdWVyeSBpcyBnaXZlbiB0byB0aGUgRW5naW5lIGZyb20gdGhlIElFbmdpbmVGYWN0b3J5LlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZXhlY3V0ZVF1ZXJ5KCk6IFByb21pc2U8UmVzdWx0cz47XG5cbiAgICB9XG5cbiAgICBleHBvcnQgdHlwZSBFbmdpbmVJRFN0ciA9IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEEgYmFzaWMgcXVlcnkgc3RyaW5nLlxuICAgICAqL1xuICAgIGV4cG9ydCB0eXBlIFF1ZXJ5U3RyID0gc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIFJlc3VsdHMge1xuXG4gICAgICAgIC8vIEV4YW1wbGUgQVBJcyB0aGF0IHdlIHNob3VsZCBzdXBwb3J0LlxuXG4gICAgICAgIC8vIGh0dHA6Ly9leHBvcnQuYXJ4aXYub3JnL2FwaS9xdWVyeT9zZWFyY2hfcXVlcnk9YWxsOmVsZWN0cm9uXG5cbiAgICAgICAgLy8gaHR0cHM6Ly9hcGkudW5wYXl3YWxsLm9yZy92Mi8xMC4xMDM4L25hdHVyZTEyMzczP2VtYWlsPVlPVVJfRU1BSUxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHRvdGFsIG51bWJlciBvZiByZXN1bHRzIGF2YWlsYWJsZS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHRvdGFsOiBudW1iZXI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIGN1cnJlbnQgc2VhcmNoIHBhZ2UsIHBvc3NpYmx5IGV4ZWN1dGluZyB0aGUgcXVlcnkgZm9yIHRoZSBmaXJzdFxuICAgICAgICAgKiB0aW1lLlxuICAgICAgICAgKi9cbiAgICAgICAgY3VycmVudCgpOiBQcm9taXNlPFBhZ2UgfCB1bmRlZmluZWQ+O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZHZhbmNlZCB0aGUgcmVzdWx0cyB0byB0aGUgbmV4dCBwYWdlLlxuICAgICAgICAgKi9cbiAgICAgICAgbmV4dCgpOiBQcm9taXNlPFBhZ2UgfCB1bmRlZmluZWQ+O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgc2VhcmNoIHJlc3VsdCBoYXMgYSBjdXJyZW50IHBhZ2UuXG4gICAgICAgICAqL1xuICAgICAgICBoYXNDdXJyZW50KCk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRydWUgaWYgd2UgaGF2ZSBhbm90aGVyIHBhZ2Ugb2YgcmVzdWx0cy5cbiAgICAgICAgICovXG4gICAgICAgIGhhc05leHQoKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgUGFnZSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsbCB0aGUgZW50cmllcyBvbiB0aGlzIHBhZ2UuXG4gICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBlbnRyaWVzOiBSZWFkb25seUFycmF5PEVudHJ5PjtcblxuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRW50cnkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVbmlxdWUgSUQgZm9yIHRoaXMgc2VhcmNoIHJlc3VsdCBlbnRyeS5cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGlkOiBzdHJpbmc7XG5cbiAgICAgICAgcmVhZG9ubHkgdXBkYXRlZD86IElTT0RhdGVUaW1lU3RyaW5nIHwgSVNPRGF0ZVN0cmluZztcblxuICAgICAgICByZWFkb25seSBwdWJsaXNoZWQ6IElTT0RhdGVUaW1lU3RyaW5nIHwgSVNPRGF0ZVN0cmluZztcblxuICAgICAgICByZWFkb25seSBzdW1tYXJ5PzogQ29udGVudFN0cjtcblxuICAgICAgICByZWFkb25seSBwdWJsaXNoZXI/OiBzdHJpbmc7XG5cbiAgICAgICAgcmVhZG9ubHkgbGlua3M6IFJlYWRvbmx5QXJyYXk8RG9jTGluaz47XG5cbiAgICAgICAgcmVhZG9ubHkgZG9pPzogRE9JU3RyO1xuXG4gICAgICAgIHJlYWRvbmx5IHBtaWQ/OiBQTUlEU3RyO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50IHRleHQgb3IgaHRtbCBjb250ZW50IGFuZCBpbmNsdWRlcyBhIGJhc2ljIHR5cGUgZmllbGQgc28gd2UgY2FuXG4gICAgICogZGV0ZXJtaW5lIHRoZSBkaWZmZXJlbmNlLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29udGVudFN0ciB7XG5cbiAgICAgICAgcmVhZG9ubHkgdHlwZTogQ29udGVudFN0clR5cGU7XG5cbiAgICAgICAgcmVhZG9ubHkgdmFsdWU6IHN0cmluZztcblxuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIENvbnRlbnRTdHJUeXBlID0gJ3RleHQnIHwgJ2h0bWwnO1xuXG4gICAgZXhwb3J0IGludGVyZmFjZSBBdXRob3Ige1xuXG4gICAgICAgIHJlYWRvbmx5IGRpc3BsYXlOYW1lOiBzdHJpbmc7XG5cbiAgICAgICAgcmVhZG9ubHkgZmlyc3ROYW1lPzogc3RyaW5nO1xuXG4gICAgICAgIHJlYWRvbmx5IGxhc3ROYW1lPzogc3RyaW5nO1xuXG4gICAgICAgIHJlYWRvbmx5IGFmZmlsaWF0aW9uOiBzdHJpbmc7XG5cbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIERvY0xpbmsge1xuICAgICAgICByZWFkb25seSBjb250ZW50VHlwZTogRG9jQ29udGVudFR5cGU7XG4gICAgICAgIHJlYWRvbmx5IGhyZWY6IHN0cmluZztcbiAgICAgICAgcmVhZG9ubHkgcmVsPzogRG9jTGlua1JlbDtcbiAgICB9XG5cbiAgICBleHBvcnQgdHlwZSBEb2NDb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi9wZGYnIHwgJ3RleHQvaHRtbCc7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHNvIHRoYXQgd2Uga25vdyB3aGF0IHR5cGUgb2YgbGluayB0aGlzIGlzLiAgSXMgaXQgZm9yIGRvd25sb2FkaW5nIHRoZVxuICAgICAqIHBhcGVyLCBhIGxhbmRpbmcgcGFnZSBmb3IgbW9yZSBpbmZvcm1hdGlvbiwgZXRjLlxuICAgICAqL1xuICAgIGV4cG9ydCB0eXBlIERvY0xpbmtSZWwgPSAnZG93bmxvYWQnIHwgJ2xhbmRpbmcnO1xuXG4gICAgLyoqXG4gICAgICogQSBzdHJpbmcgZm9ybWF0dGVkIGFzIGEgRE9JIDEwLjEwMzgvbmF0dXJlMTIzNzNcbiAgICAgKi9cbiAgICBleHBvcnQgdHlwZSBET0lTdHIgPSBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBQdWJNZWQgSUQgc3RyaW5nLlxuICAgICAqL1xuICAgIGV4cG9ydCB0eXBlIFBNSURTdHIgPSBzdHJpbmc7XG5cbn1cbiJdfQ==