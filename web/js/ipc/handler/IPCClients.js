"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const IPCClient_1 = require("./IPCClient");
const ElectronIPCPipe_1 = require("./ElectronIPCPipe");
const ElectronRendererPipe_1 = require("../pipes/ElectronRendererPipe");
const ElectronRenderToRendererPipe_1 = require("../pipes/ElectronRenderToRendererPipe");
const BrowserWindowReference_1 = require("../../ui/dialog_window/BrowserWindowReference");
const ElectronMainToBrowserWindowPipe_1 = require("../pipes/ElectronMainToBrowserWindowPipe");
const ElectronContext_1 = require("./ElectronContext");
class IPCClients {
    static rendererProcess() {
        return new IPCClient_1.IPCClient(new ElectronIPCPipe_1.ElectronIPCPipe(new ElectronRendererPipe_1.ElectronRendererPipe()));
    }
    static fromMainToRenderer(browserWindow) {
        let electronMainToBrowserWindowPipe = new ElectronMainToBrowserWindowPipe_1.ElectronMainToBrowserWindowPipe(browserWindow);
        let electronIPCPipe = new ElectronIPCPipe_1.ElectronIPCPipe(electronMainToBrowserWindowPipe);
        let targetContext = new ElectronContext_1.ElectronRendererContext(new BrowserWindowReference_1.BrowserWindowReference(browserWindow.id));
        return new IPCClient_1.IPCClient(electronIPCPipe, targetContext);
    }
    static fromRendererToRenderer(windowReference) {
        let electronRenderToRendererPipe = new ElectronRenderToRendererPipe_1.ElectronRenderToRendererPipe(windowReference);
        let electronIPCPipe = new ElectronIPCPipe_1.ElectronIPCPipe(electronRenderToRendererPipe);
        let targetContext = new ElectronContext_1.ElectronRendererContext(windowReference);
        return new IPCClient_1.IPCClient(electronIPCPipe, targetContext);
    }
}
exports.IPCClients = IPCClients;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSVBDQ2xpZW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIklQQ0NsaWVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBc0M7QUFDdEMsdURBQWtEO0FBQ2xELHdFQUFtRTtBQUNuRSx3RkFBbUY7QUFDbkYsMEZBQXFGO0FBQ3JGLDhGQUF5RjtBQUN6Rix1REFBMEQ7QUFFMUQsTUFBYSxVQUFVO0lBRW5CLE1BQU0sQ0FBQyxlQUFlO1FBQ2xCLE9BQU8sSUFBSSxxQkFBUyxDQUFDLElBQUksaUNBQWUsQ0FBQyxJQUFJLDJDQUFvQixFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxNQUFNLENBQUMsa0JBQWtCLENBQUMsYUFBcUM7UUFDM0QsSUFBSSwrQkFBK0IsR0FBRyxJQUFJLGlFQUErQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3pGLElBQUksZUFBZSxHQUFHLElBQUksaUNBQWUsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBRTNFLElBQUksYUFBYSxHQUFHLElBQUkseUNBQXVCLENBQUMsSUFBSSwrQ0FBc0IsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM5RixPQUFPLElBQUkscUJBQVMsQ0FBQyxlQUFlLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFFekQsQ0FBQztJQUVELE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxlQUF1QztRQUNqRSxJQUFJLDRCQUE0QixHQUFHLElBQUksMkRBQTRCLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDckYsSUFBSSxlQUFlLEdBQUcsSUFBSSxpQ0FBZSxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFFeEUsSUFBSSxhQUFhLEdBQUcsSUFBSSx5Q0FBdUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNqRSxPQUFPLElBQUkscUJBQVMsQ0FBQyxlQUFlLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDekQsQ0FBQztDQUVKO0FBdkJELGdDQXVCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SVBDQ2xpZW50fSBmcm9tICcuL0lQQ0NsaWVudCc7XG5pbXBvcnQge0VsZWN0cm9uSVBDUGlwZX0gZnJvbSAnLi9FbGVjdHJvbklQQ1BpcGUnO1xuaW1wb3J0IHtFbGVjdHJvblJlbmRlcmVyUGlwZX0gZnJvbSAnLi4vcGlwZXMvRWxlY3Ryb25SZW5kZXJlclBpcGUnO1xuaW1wb3J0IHtFbGVjdHJvblJlbmRlclRvUmVuZGVyZXJQaXBlfSBmcm9tICcuLi9waXBlcy9FbGVjdHJvblJlbmRlclRvUmVuZGVyZXJQaXBlJztcbmltcG9ydCB7QnJvd3NlcldpbmRvd1JlZmVyZW5jZX0gZnJvbSAnLi4vLi4vdWkvZGlhbG9nX3dpbmRvdy9Ccm93c2VyV2luZG93UmVmZXJlbmNlJztcbmltcG9ydCB7RWxlY3Ryb25NYWluVG9Ccm93c2VyV2luZG93UGlwZX0gZnJvbSAnLi4vcGlwZXMvRWxlY3Ryb25NYWluVG9Ccm93c2VyV2luZG93UGlwZSc7XG5pbXBvcnQge0VsZWN0cm9uUmVuZGVyZXJDb250ZXh0fSBmcm9tICcuL0VsZWN0cm9uQ29udGV4dCc7XG5cbmV4cG9ydCBjbGFzcyBJUENDbGllbnRzIHtcblxuICAgIHN0YXRpYyByZW5kZXJlclByb2Nlc3MoKSB7XG4gICAgICAgIHJldHVybiBuZXcgSVBDQ2xpZW50KG5ldyBFbGVjdHJvbklQQ1BpcGUobmV3IEVsZWN0cm9uUmVuZGVyZXJQaXBlKCkpKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbU1haW5Ub1JlbmRlcmVyKGJyb3dzZXJXaW5kb3c6IEVsZWN0cm9uLkJyb3dzZXJXaW5kb3cpIHtcbiAgICAgICAgbGV0IGVsZWN0cm9uTWFpblRvQnJvd3NlcldpbmRvd1BpcGUgPSBuZXcgRWxlY3Ryb25NYWluVG9Ccm93c2VyV2luZG93UGlwZShicm93c2VyV2luZG93KTtcbiAgICAgICAgbGV0IGVsZWN0cm9uSVBDUGlwZSA9IG5ldyBFbGVjdHJvbklQQ1BpcGUoZWxlY3Ryb25NYWluVG9Ccm93c2VyV2luZG93UGlwZSk7XG5cbiAgICAgICAgbGV0IHRhcmdldENvbnRleHQgPSBuZXcgRWxlY3Ryb25SZW5kZXJlckNvbnRleHQobmV3IEJyb3dzZXJXaW5kb3dSZWZlcmVuY2UoYnJvd3NlcldpbmRvdy5pZCkpO1xuICAgICAgICByZXR1cm4gbmV3IElQQ0NsaWVudChlbGVjdHJvbklQQ1BpcGUsIHRhcmdldENvbnRleHQpO1xuXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21SZW5kZXJlclRvUmVuZGVyZXIod2luZG93UmVmZXJlbmNlOiBCcm93c2VyV2luZG93UmVmZXJlbmNlKSB7XG4gICAgICAgIGxldCBlbGVjdHJvblJlbmRlclRvUmVuZGVyZXJQaXBlID0gbmV3IEVsZWN0cm9uUmVuZGVyVG9SZW5kZXJlclBpcGUod2luZG93UmVmZXJlbmNlKTtcbiAgICAgICAgbGV0IGVsZWN0cm9uSVBDUGlwZSA9IG5ldyBFbGVjdHJvbklQQ1BpcGUoZWxlY3Ryb25SZW5kZXJUb1JlbmRlcmVyUGlwZSk7XG5cbiAgICAgICAgbGV0IHRhcmdldENvbnRleHQgPSBuZXcgRWxlY3Ryb25SZW5kZXJlckNvbnRleHQod2luZG93UmVmZXJlbmNlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBJUENDbGllbnQoZWxlY3Ryb25JUENQaXBlLCB0YXJnZXRDb250ZXh0KTtcbiAgICB9XG5cbn1cbiJdfQ==