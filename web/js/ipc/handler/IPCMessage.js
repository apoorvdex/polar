"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Optional_1 = require("../../util/ts/Optional");
const ElectronContexts_1 = require("./ElectronContexts");
const Logger_1 = require("../../logger/Logger");
const Preconditions_1 = require("../../Preconditions");
const log = Logger_1.Logger.create();
class IPCMessage {
    constructor(type, value, nonce = IPCMessage.createNonce(), error, context = ElectronContexts_1.ElectronContexts.create()) {
        if (value && value instanceof IPCMessage) {
            throw new Error("Value is already an IPCMessage");
        }
        this._type = type;
        this._value = value;
        this._nonce = nonce;
        this._context = context;
        this._error = error;
    }
    get type() {
        return this._type;
    }
    get value() {
        if (this._error) {
            throw new Error(this._error.msg);
        }
        if (!this._value) {
            throw new Error("Value was undefined and no error defined.");
        }
        return this._value;
    }
    get nonce() {
        return this._nonce;
    }
    get error() {
        return this._error;
    }
    get context() {
        return this._context;
    }
    computeResponseChannel() {
        return '/ipc/response:' + this.nonce;
    }
    static createNonce() {
        return Date.now();
    }
    static createError(type, error) {
        return new IPCMessage(type, undefined, IPCMessage.createNonce(), error);
    }
    static create(obj, valueFactory) {
        if (obj._value === undefined) {
            log.warn("IPC message missing value: ", obj);
        }
        obj._value = Optional_1.Optional.of(obj._value, "value")
            .getOrUndefined();
        if (Preconditions_1.isPresent(obj._value) && valueFactory) {
            obj._value = valueFactory(obj._value);
        }
        const result = Object.create(IPCMessage.prototype);
        Object.assign(result, obj);
        return result;
    }
}
exports.IPCMessage = IPCMessage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSVBDTWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIklQQ01lc3NhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSxxREFBZ0Q7QUFHaEQseURBQW9EO0FBQ3BELGdEQUEyQztBQUMzQyx1REFBOEM7QUFFOUMsTUFBTSxHQUFHLEdBQUcsZUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRTVCLE1BQWEsVUFBVTtJQWlCbkIsWUFBWSxJQUFZLEVBQ1osS0FBUyxFQUNULEtBQUssR0FBRyxVQUFVLENBQUMsV0FBVyxFQUFFLEVBQ2hDLEtBQWdCLEVBQ2hCLE9BQU8sR0FBRyxtQ0FBZ0IsQ0FBQyxNQUFNLEVBQUU7UUFFM0MsSUFBSSxLQUFLLElBQUksS0FBSyxZQUFZLFVBQVUsRUFBRTtZQUN0QyxNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7U0FDckQ7UUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUN4QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ0osT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFFTCxJQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWixNQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDcEM7UUFFRCxJQUFHLENBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUVkLE1BQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztTQUNoRTtRQUVELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ0wsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDTCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQUksT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN6QixDQUFDO0lBRUQsc0JBQXNCO1FBQ2xCLE9BQU8sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN6QyxDQUFDO0lBRU8sTUFBTSxDQUFDLFdBQVc7UUFDdEIsT0FBTyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFXLENBQUksSUFBWSxFQUFFLEtBQWU7UUFDL0MsT0FBTyxJQUFJLFVBQVUsQ0FBSSxJQUFJLEVBQUUsU0FBUyxFQUFFLFVBQVUsQ0FBQyxXQUFXLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQU0sQ0FBSSxHQUFRLEVBQUUsWUFBOEI7UUFFNUQsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUMxQixHQUFHLENBQUMsSUFBSSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsR0FBRyxDQUFDLE1BQU0sR0FBRyxtQkFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQzthQUN4QyxjQUFjLEVBQUUsQ0FBQztRQUV0QixJQUFJLHlCQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFlBQVksRUFBRTtZQUN2QyxHQUFHLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekM7UUFFRCxNQUFNLE1BQU0sR0FBa0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbEUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFM0IsT0FBTyxNQUFNLENBQUM7SUFFbEIsQ0FBQztDQUdKO0FBakdELGdDQWlHQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBnZW5lcmljIElQQyByZXF1ZXN0IG1lc3NhZ2Ugd2l0aCBhIHR5cGUgcGFyYW1ldGVyLlxuICovXG5pbXBvcnQge09wdGlvbmFsfSBmcm9tICcuLi8uLi91dGlsL3RzL09wdGlvbmFsJztcbmltcG9ydCB7SVBDRXJyb3J9IGZyb20gJy4vSVBDRXJyb3InO1xuaW1wb3J0IHtFbGVjdHJvbkNvbnRleHR9IGZyb20gJy4vRWxlY3Ryb25Db250ZXh0JztcbmltcG9ydCB7RWxlY3Ryb25Db250ZXh0c30gZnJvbSAnLi9FbGVjdHJvbkNvbnRleHRzJztcbmltcG9ydCB7TG9nZ2VyfSBmcm9tICcuLi8uLi9sb2dnZXIvTG9nZ2VyJztcbmltcG9ydCB7aXNQcmVzZW50fSBmcm9tICcuLi8uLi9QcmVjb25kaXRpb25zJztcblxuY29uc3QgbG9nID0gTG9nZ2VyLmNyZWF0ZSgpO1xuXG5leHBvcnQgY2xhc3MgSVBDTWVzc2FnZTxUPiB7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IF90eXBlOiBzdHJpbmc7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IF92YWx1ZT86IFQgO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY29udGV4dDogRWxlY3Ryb25Db250ZXh0O1xuXG4gICAgLyoqXG4gICAgICogQSBub25jZSByZXByZXNlbnRpbmcgdGhpcyB1bmlxdWUgSVBDIGNoYW5uZWwgdmlhIGEgcmVxdWVzdC9yZXNwb25zZSBwYWlyLlxuICAgICAqXG4gICAgICogVGhlIG1lc3NhZ2UgaXMgdW5pcXVlIGJ5IGNvbWJpbmluZyB0aGUgdHlwZSArIG5vbmNlLlxuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX25vbmNlOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9lcnJvcj86IElQQ0Vycm9yO1xuXG4gICAgY29uc3RydWN0b3IodHlwZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgIHZhbHVlPzogVCxcbiAgICAgICAgICAgICAgICBub25jZSA9IElQQ01lc3NhZ2UuY3JlYXRlTm9uY2UoKSxcbiAgICAgICAgICAgICAgICBlcnJvcj86IElQQ0Vycm9yLFxuICAgICAgICAgICAgICAgIGNvbnRleHQgPSBFbGVjdHJvbkNvbnRleHRzLmNyZWF0ZSgpKSB7XG5cbiAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgSVBDTWVzc2FnZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsdWUgaXMgYWxyZWFkeSBhbiBJUENNZXNzYWdlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX25vbmNlID0gbm9uY2U7XG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLl9lcnJvciA9IGVycm9yO1xuICAgIH1cblxuICAgIGdldCB0eXBlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xuICAgIH1cblxuICAgIGdldCB2YWx1ZSgpOiBUIHtcblxuICAgICAgICBpZih0aGlzLl9lcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuX2Vycm9yLm1zZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZighIHRoaXMuX3ZhbHVlKSB7XG4gICAgICAgICAgICAvLyB0ZWNobmljYWxseSB0aGlzIHNob3VsZCBuZXZlciBoYXBwZW4uXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJWYWx1ZSB3YXMgdW5kZWZpbmVkIGFuZCBubyBlcnJvciBkZWZpbmVkLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgbm9uY2UoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vbmNlO1xuICAgIH1cblxuICAgIGdldCBlcnJvcigpOiBJUENFcnJvciB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lcnJvcjtcbiAgICB9XG5cbiAgICBnZXQgY29udGV4dCgpOiBFbGVjdHJvbkNvbnRleHQge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGV4dDtcbiAgICB9XG5cbiAgICBjb21wdXRlUmVzcG9uc2VDaGFubmVsKCkge1xuICAgICAgICByZXR1cm4gJy9pcGMvcmVzcG9uc2U6JyArIHRoaXMubm9uY2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgY3JlYXRlTm9uY2UoKSB7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdygpO1xuICAgIH1cblxuICAgIHN0YXRpYyBjcmVhdGVFcnJvcjxUPih0eXBlOiBzdHJpbmcsIGVycm9yOiBJUENFcnJvcik6IElQQ01lc3NhZ2U8VD4ge1xuICAgICAgICByZXR1cm4gbmV3IElQQ01lc3NhZ2U8VD4odHlwZSwgdW5kZWZpbmVkLCBJUENNZXNzYWdlLmNyZWF0ZU5vbmNlKCksIGVycm9yKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZTxUPihvYmo6IGFueSwgdmFsdWVGYWN0b3J5PzogVmFsdWVGYWN0b3J5PFQ+ICk6IElQQ01lc3NhZ2U8VD4ge1xuXG4gICAgICAgIGlmIChvYmouX3ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGxvZy53YXJuKFwiSVBDIG1lc3NhZ2UgbWlzc2luZyB2YWx1ZTogXCIsIG9iaik7XG4gICAgICAgIH1cblxuICAgICAgICBvYmouX3ZhbHVlID0gT3B0aW9uYWwub2Yob2JqLl92YWx1ZSwgXCJ2YWx1ZVwiKVxuICAgICAgICAgICAgLmdldE9yVW5kZWZpbmVkKCk7XG5cbiAgICAgICAgaWYgKGlzUHJlc2VudChvYmouX3ZhbHVlKSAmJiB2YWx1ZUZhY3RvcnkpIHtcbiAgICAgICAgICAgIG9iai5fdmFsdWUgPSB2YWx1ZUZhY3Rvcnkob2JqLl92YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXN1bHQ6IElQQ01lc3NhZ2U8VD4gPSBPYmplY3QuY3JlYXRlKElQQ01lc3NhZ2UucHJvdG90eXBlKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihyZXN1bHQsIG9iaik7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIH1cblxuXG59XG5cbmludGVyZmFjZSBWYWx1ZUZhY3Rvcnk8VD4ge1xuXG4gICAgKG9iajogYW55KTogVDtcblxufVxuIl19