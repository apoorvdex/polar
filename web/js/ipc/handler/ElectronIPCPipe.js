"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const electron_1 = require("electron");
const IPCPipe_1 = require("./IPCPipe");
const IPCMessage_1 = require("./IPCMessage");
const ElectronIPCEvent_1 = require("./ElectronIPCEvent");
const ElectronContext_1 = require("./ElectronContext");
const ElectronContexts_1 = require("./ElectronContexts");
const WritablePipes_1 = require("./WritablePipes");
class ElectronIPCPipe extends IPCPipe_1.IPCPipe {
    constructor(source) {
        super(source);
    }
    convertEvent(pipeNotification) {
        let request = IPCMessage_1.IPCMessage.create(pipeNotification.message);
        let responsePipe = WritablePipes_1.WritablePipes.createFromFunction((channel, message) => {
            let electronContext = ElectronContexts_1.ElectronContexts.create();
            if (electronContext.type === ElectronContext_1.ElectronContextType.RENDERER &&
                request.context.type === ElectronContext_1.ElectronContextType.RENDERER) {
                let target = request.context;
                electron_1.ipcRenderer.sendTo(target.windowReference.id, channel, message);
            }
            else {
                pipeNotification.event.sender.send(channel, message);
            }
        });
        let message = IPCMessage_1.IPCMessage.create(pipeNotification.message);
        return new ElectronIPCEvent_1.ElectronIPCEvent(responsePipe, message, pipeNotification.event.sender);
    }
}
exports.ElectronIPCPipe = ElectronIPCPipe;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWxlY3Ryb25JUENQaXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRWxlY3Ryb25JUENQaXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQXFDO0FBQ3JDLHVDQUFrQztBQUVsQyw2Q0FBd0M7QUFDeEMseURBQW9EO0FBQ3BELHVEQUErRTtBQUMvRSx5REFBb0Q7QUFDcEQsbURBQThDO0FBRTlDLE1BQWEsZUFBZ0IsU0FBUSxpQkFBeUI7SUFFMUQsWUFBWSxNQUFpQztRQUN6QyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVELFlBQVksQ0FBQyxnQkFBdUQ7UUFFaEUsSUFBSSxPQUFPLEdBQUcsdUJBQVUsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFMUQsSUFBSSxZQUFZLEdBQ1osNkJBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE9BQWUsRUFBRSxPQUF3QixFQUFFLEVBQUU7WUFNM0UsSUFBSSxlQUFlLEdBQUcsbUNBQWdCLENBQUMsTUFBTSxFQUFFLENBQUM7WUFFaEQsSUFBSSxlQUFlLENBQUMsSUFBSSxLQUFLLHFDQUFtQixDQUFDLFFBQVE7Z0JBQ3JELE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLHFDQUFtQixDQUFDLFFBQVEsRUFBRztnQkFPeEQsSUFBSSxNQUFNLEdBQTRCLE9BQU8sQ0FBQyxPQUFPLENBQUM7Z0JBRXRELHNCQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQzthQUVuRTtpQkFBTTtnQkFJSCxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDeEQ7UUFFTCxDQUFDLENBQUMsQ0FBQztRQUVQLElBQUksT0FBTyxHQUFHLHVCQUFVLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTFELE9BQU8sSUFBSSxtQ0FBZ0IsQ0FBQyxZQUFZLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV0RixDQUFDO0NBRUo7QUE5Q0QsMENBOENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtpcGNSZW5kZXJlcn0gZnJvbSAnZWxlY3Ryb24nO1xuaW1wb3J0IHtJUENQaXBlfSBmcm9tICcuL0lQQ1BpcGUnO1xuaW1wb3J0IHtQaXBlLCBQaXBlTm90aWZpY2F0aW9ufSBmcm9tICcuLi9waXBlcy9QaXBlJztcbmltcG9ydCB7SVBDTWVzc2FnZX0gZnJvbSAnLi9JUENNZXNzYWdlJztcbmltcG9ydCB7RWxlY3Ryb25JUENFdmVudH0gZnJvbSAnLi9FbGVjdHJvbklQQ0V2ZW50JztcbmltcG9ydCB7RWxlY3Ryb25Db250ZXh0VHlwZSwgRWxlY3Ryb25SZW5kZXJlckNvbnRleHR9IGZyb20gJy4vRWxlY3Ryb25Db250ZXh0JztcbmltcG9ydCB7RWxlY3Ryb25Db250ZXh0c30gZnJvbSAnLi9FbGVjdHJvbkNvbnRleHRzJztcbmltcG9ydCB7V3JpdGFibGVQaXBlc30gZnJvbSAnLi9Xcml0YWJsZVBpcGVzJztcblxuZXhwb3J0IGNsYXNzIEVsZWN0cm9uSVBDUGlwZSBleHRlbmRzIElQQ1BpcGU8RWxlY3Ryb25JUENFdmVudD4ge1xuXG4gICAgY29uc3RydWN0b3Ioc291cmNlOiBQaXBlPEVsZWN0cm9uLkV2ZW50LCBhbnk+KSB7XG4gICAgICAgIHN1cGVyKHNvdXJjZSk7XG4gICAgfVxuXG4gICAgY29udmVydEV2ZW50KHBpcGVOb3RpZmljYXRpb246IFBpcGVOb3RpZmljYXRpb248RWxlY3Ryb24uRXZlbnQsIGFueT4pOiBFbGVjdHJvbklQQ0V2ZW50IHtcblxuICAgICAgICBsZXQgcmVxdWVzdCA9IElQQ01lc3NhZ2UuY3JlYXRlKHBpcGVOb3RpZmljYXRpb24ubWVzc2FnZSk7XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlUGlwZSA9XG4gICAgICAgICAgICBXcml0YWJsZVBpcGVzLmNyZWF0ZUZyb21GdW5jdGlvbigoY2hhbm5lbDogc3RyaW5nLCBtZXNzYWdlOiBJUENNZXNzYWdlPGFueT4pID0+IHtcblxuICAgICAgICAgICAgICAgIC8vIFRPRE8gbWlncmF0ZSB0aGlzIHRvIHVzZTogV3JpdGFibGVQaXBlcy5jcmVhdGVGcm9tQ29udGV4dFxuXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgcmVzcG9uc2UgcGlwZSBiYXNlZCBvbiB0aGUgY29udGV4dCBvZiB0aGUgcmVxdWVzdC5cblxuICAgICAgICAgICAgICAgIGxldCBlbGVjdHJvbkNvbnRleHQgPSBFbGVjdHJvbkNvbnRleHRzLmNyZWF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgaWYoIGVsZWN0cm9uQ29udGV4dC50eXBlID09PSBFbGVjdHJvbkNvbnRleHRUeXBlLlJFTkRFUkVSICYmXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuY29udGV4dC50eXBlID09PSBFbGVjdHJvbkNvbnRleHRUeXBlLlJFTkRFUkVSICkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gd2UgYXJlIG9wZXJhdGluZyBiZXR3ZWVuIHR3byByZW5kZXJlcnMgd2UgbmVlZCB0b1xuICAgICAgICAgICAgICAgICAgICAvLyBzZW5kIGRpcmVjdGx5IHZpYSBpcGNSZW5kZXJlciBhcyBFbGVjdHJvbiBpcyBicm9rZW4gYW5kXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlbmRzIHRoZSBtZXNzYWdlcyBmcm9tIGl0cyBvd24gaXBjUmVuZGVyZXIgc28gd2UgZW5kIHVwXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlbmRpbmcgdG8gdGhlIG1haW4gcHJvY2Vzcy5cblxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0ID0gPEVsZWN0cm9uUmVuZGVyZXJDb250ZXh0PnJlcXVlc3QuY29udGV4dDtcblxuICAgICAgICAgICAgICAgICAgICBpcGNSZW5kZXJlci5zZW5kVG8odGFyZ2V0LndpbmRvd1JlZmVyZW5jZS5pZCwgY2hhbm5lbCwgbWVzc2FnZSk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlbmQgdGhlIG5vcm1hbCB3YXkgZnJvbSB0aGUgbWFpbiBiZWNhdXNlIGl0IHdpbGwgcHJvcGVybHlcbiAgICAgICAgICAgICAgICAgICAgLy8gZ28gYmFjayB0byB0aGUgcmVuZGVyZXIgdGhhdCBvcmlnaW5hdGVkIGl0LlxuICAgICAgICAgICAgICAgICAgICBwaXBlTm90aWZpY2F0aW9uLmV2ZW50LnNlbmRlci5zZW5kKGNoYW5uZWwsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IG1lc3NhZ2UgPSBJUENNZXNzYWdlLmNyZWF0ZShwaXBlTm90aWZpY2F0aW9uLm1lc3NhZ2UpO1xuXG4gICAgICAgIHJldHVybiBuZXcgRWxlY3Ryb25JUENFdmVudChyZXNwb25zZVBpcGUsIG1lc3NhZ2UsIHBpcGVOb3RpZmljYXRpb24uZXZlbnQuc2VuZGVyKTtcblxuICAgIH1cblxufVxuIl19