"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Pipe_1 = require("./Pipe");
class MockPipes {
    constructor(left, right) {
        this.left = left;
        this.right = right;
    }
    static create() {
        let left = new MockPipe('left');
        let right = new MockPipe('right');
        left.target = right;
        right.target = left;
        return new MockPipes(left, right);
    }
}
exports.MockPipes = MockPipes;
class MockPipe extends Pipe_1.Pipe {
    constructor(name) {
        super();
        this.onListeners = new ListenerMap();
        this.onceListeners = new ListenerMap();
        this.name = name;
    }
    write(channel, msg) {
        if (!this.target) {
            throw new Error("No target");
        }
        let notification = new Pipe_1.PipeNotification(channel, {}, msg);
        this.target.onListeners.get(channel).forEach(listener => {
            listener(notification);
        });
        this.target.onceListeners.get(channel).forEach(listener => {
            listener(notification);
        });
        this.target.onceListeners.clear(channel);
    }
    on(channel, listener) {
        this.onListeners.register(channel, listener);
    }
    once(channel, listener) {
        this.onceListeners.register(channel, listener);
    }
    when(channel) {
        return new Promise(resolve => {
            this.once(channel, notification => {
                resolve(notification);
            });
        });
    }
}
exports.MockPipe = MockPipe;
class ListenerMap {
    constructor() {
        this.backing = {};
    }
    register(channel, listener) {
        if (!(channel in this.backing)) {
            this.backing[channel] = [];
        }
        this.backing[channel].push(listener);
    }
    get(channel) {
        let result = this.backing[channel];
        if (result) {
            return result;
        }
        else {
            return [];
        }
    }
    clear(channel) {
        delete this.backing[channel];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9ja1BpcGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTW9ja1BpcGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQTREO0FBRTVELE1BQWEsU0FBUztJQUtsQixZQUFZLElBQW1CLEVBQUUsS0FBb0I7UUFDakQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNO1FBRVQsSUFBSSxJQUFJLEdBQUcsSUFBSSxRQUFRLENBQU0sTUFBTSxDQUFDLENBQUM7UUFDckMsSUFBSSxLQUFLLEdBQUcsSUFBSSxRQUFRLENBQU0sT0FBTyxDQUFDLENBQUM7UUFFdkMsSUFBSSxDQUFDLE1BQU0sR0FBQyxLQUFLLENBQUM7UUFDbEIsS0FBSyxDQUFDLE1BQU0sR0FBQyxJQUFJLENBQUM7UUFFbEIsT0FBTyxJQUFJLFNBQVMsQ0FBTSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFM0MsQ0FBQztDQUVKO0FBdEJELDhCQXNCQztBQUVELE1BQWEsUUFBYyxTQUFRLFdBQVM7SUFNeEMsWUFBWSxJQUFZO1FBQ3BCLEtBQUssRUFBRSxDQUFDO1FBSUYsZ0JBQVcsR0FBcUIsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUVsRCxrQkFBYSxHQUFxQixJQUFJLFdBQVcsRUFBRSxDQUFDO1FBTDFELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFNRCxLQUFLLENBQUMsT0FBZSxFQUFFLEdBQU07UUFFekIsSUFBRyxDQUFFLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZCxNQUFNLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ2hDO1FBRUQsSUFBSSxZQUFZLEdBQUcsSUFBSSx1QkFBZ0IsQ0FBTSxPQUFPLEVBQUssRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBSWxFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDcEQsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQzFCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN0RCxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDMUIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFN0MsQ0FBQztJQUVELEVBQUUsQ0FBQyxPQUFlLEVBQUUsUUFBMkI7UUFDM0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxJQUFJLENBQUMsT0FBZSxFQUFFLFFBQTJCO1FBQzdDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsSUFBSSxDQUFDLE9BQWU7UUFDaEIsT0FBTyxJQUFJLE9BQU8sQ0FBd0IsT0FBTyxDQUFDLEVBQUU7WUFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLEVBQUU7Z0JBQzlCLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMxQixDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztDQUVKO0FBckRELDRCQXFEQztBQUVELE1BQU0sV0FBVztJQUFqQjtRQUVZLFlBQU8sR0FBNkMsRUFBRSxDQUFDO0lBNEJuRSxDQUFDO0lBMUJHLFFBQVEsQ0FBQyxPQUFlLEVBQUUsUUFBMkI7UUFFakQsSUFBRyxDQUFFLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUM5QjtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBRXhDLENBQUM7SUFFRCxHQUFHLENBQUMsT0FBZTtRQUVmLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbkMsSUFBSSxNQUFNLEVBQUU7WUFDUixPQUFPLE1BQU0sQ0FBQztTQUNqQjthQUFNO1lBQ0gsT0FBTyxFQUFFLENBQUM7U0FDYjtJQUVMLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakMsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQaXBlLCBQaXBlTGlzdGVuZXIsIFBpcGVOb3RpZmljYXRpb259IGZyb20gJy4vUGlwZSc7XG5cbmV4cG9ydCBjbGFzcyBNb2NrUGlwZXM8RSxNPiB7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgbGVmdDogTW9ja1BpcGU8RSxNPjtcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmlnaHQ6IE1vY2tQaXBlPEUsTT47XG5cbiAgICBjb25zdHJ1Y3RvcihsZWZ0OiBNb2NrUGlwZTxFLE0+LCByaWdodDogTW9ja1BpcGU8RSxNPikge1xuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgICAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZTxFLE0+KCk6IE1vY2tQaXBlczxFLE0+IHtcblxuICAgICAgICBsZXQgbGVmdCA9IG5ldyBNb2NrUGlwZTxFLE0+KCdsZWZ0Jyk7XG4gICAgICAgIGxldCByaWdodCA9IG5ldyBNb2NrUGlwZTxFLE0+KCdyaWdodCcpO1xuXG4gICAgICAgIGxlZnQudGFyZ2V0PXJpZ2h0O1xuICAgICAgICByaWdodC50YXJnZXQ9bGVmdDtcblxuICAgICAgICByZXR1cm4gbmV3IE1vY2tQaXBlczxFLE0+KGxlZnQsIHJpZ2h0KTtcblxuICAgIH1cblxufVxuXG5leHBvcnQgY2xhc3MgTW9ja1BpcGU8RSxNPiBleHRlbmRzIFBpcGU8RSxNPiB7XG5cbiAgICBwcml2YXRlIG5hbWU6IHN0cmluZztcblxuICAgIHRhcmdldD86IE1vY2tQaXBlPEUsTT47XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb25MaXN0ZW5lcnM6IExpc3RlbmVyTWFwPEUsTT4gPSBuZXcgTGlzdGVuZXJNYXAoKTtcblxuICAgIHByb3RlY3RlZCBvbmNlTGlzdGVuZXJzOiBMaXN0ZW5lck1hcDxFLE0+ID0gbmV3IExpc3RlbmVyTWFwKCk7XG5cbiAgICB3cml0ZShjaGFubmVsOiBzdHJpbmcsIG1zZzogTSk6IHZvaWQge1xuXG4gICAgICAgIGlmKCEgdGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHRhcmdldFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBub3RpZmljYXRpb24gPSBuZXcgUGlwZU5vdGlmaWNhdGlvbjxFLE0+KGNoYW5uZWwsIDxFPnt9LCBtc2cpO1xuXG4gICAgICAgIC8vIGRlbGl2ZXIgdGhlIG1lc3NhZ2VzIHRvIHRoZSB0YXJnZXQgbm93Li4uXG5cbiAgICAgICAgdGhpcy50YXJnZXQub25MaXN0ZW5lcnMuZ2V0KGNoYW5uZWwpLmZvckVhY2gobGlzdGVuZXIgPT4ge1xuICAgICAgICAgICAgbGlzdGVuZXIobm90aWZpY2F0aW9uKVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnRhcmdldC5vbmNlTGlzdGVuZXJzLmdldChjaGFubmVsKS5mb3JFYWNoKGxpc3RlbmVyID0+IHtcbiAgICAgICAgICAgIGxpc3RlbmVyKG5vdGlmaWNhdGlvbilcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy50YXJnZXQub25jZUxpc3RlbmVycy5jbGVhcihjaGFubmVsKTtcblxuICAgIH1cblxuICAgIG9uKGNoYW5uZWw6IHN0cmluZywgbGlzdGVuZXI6IFBpcGVMaXN0ZW5lcjxFLE0+KSB7XG4gICAgICAgIHRoaXMub25MaXN0ZW5lcnMucmVnaXN0ZXIoY2hhbm5lbCwgbGlzdGVuZXIpO1xuICAgIH1cblxuICAgIG9uY2UoY2hhbm5lbDogc3RyaW5nLCBsaXN0ZW5lcjogUGlwZUxpc3RlbmVyPEUsTT4pIHtcbiAgICAgICAgdGhpcy5vbmNlTGlzdGVuZXJzLnJlZ2lzdGVyKGNoYW5uZWwsIGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICB3aGVuKGNoYW5uZWw6IHN0cmluZyk6IFByb21pc2U8UGlwZU5vdGlmaWNhdGlvbjxFLE0+PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxQaXBlTm90aWZpY2F0aW9uPEUsTT4+KHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbmNlKGNoYW5uZWwsIG5vdGlmaWNhdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShub3RpZmljYXRpb24pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbn1cblxuY2xhc3MgTGlzdGVuZXJNYXA8RSxNPiB7XG5cbiAgICBwcml2YXRlIGJhY2tpbmc6IHsgW2luZGV4OiBzdHJpbmddOiBQaXBlTGlzdGVuZXI8RSxNPltdIH0gPSB7fTtcblxuICAgIHJlZ2lzdGVyKGNoYW5uZWw6IHN0cmluZywgbGlzdGVuZXI6IFBpcGVMaXN0ZW5lcjxFLE0+KTogdm9pZCB7XG5cbiAgICAgICAgaWYoISAoY2hhbm5lbCBpbiB0aGlzLmJhY2tpbmcpKSB7XG4gICAgICAgICAgICB0aGlzLmJhY2tpbmdbY2hhbm5lbF0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYmFja2luZ1tjaGFubmVsXS5wdXNoKGxpc3RlbmVyKVxuXG4gICAgfVxuXG4gICAgZ2V0KGNoYW5uZWw6IHN0cmluZyk6IFBpcGVMaXN0ZW5lcjxFLE0+W10ge1xuXG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLmJhY2tpbmdbY2hhbm5lbF07XG5cbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgY2xlYXIoY2hhbm5lbDogc3RyaW5nKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmJhY2tpbmdbY2hhbm5lbF07XG4gICAgfVxuXG59XG5cbiJdfQ==