"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../../logger/Logger");
const fs_1 = __importDefault(require("fs"));
const log = Logger_1.Logger.create();
class WebResource {
    static createFile(path) {
        return new FileWebResource(path);
    }
    static createURL(url) {
        return new URLWebResource(url);
    }
}
exports.WebResource = WebResource;
var WebResourceType;
(function (WebResourceType) {
    WebResourceType["FILE"] = "FILE";
    WebResourceType["URL"] = "URL";
})(WebResourceType = exports.WebResourceType || (exports.WebResourceType = {}));
class FileWebResource extends WebResource {
    constructor(file) {
        super();
        this.type = WebResourceType.FILE;
        if (!fs_1.default.existsSync(file)) {
            throw new Error("File does not exist: " + file);
        }
        this.file = file;
    }
    loadBrowserWindow(browserWindow) {
        browserWindow.loadFile(this.file);
    }
    loadWebContents(webContents) {
        log.info("Loading file: ", this.file);
        webContents.loadURL('file://' + this.file);
    }
    load(loader) {
        log.info("Loading file: ", this.file);
        loader.loadURL('file://' + this.file);
    }
    toString() {
        return `${this.type}: ${this.file}`;
    }
}
class URLWebResource extends WebResource {
    constructor(url) {
        super();
        this.type = WebResourceType.URL;
        this.url = url;
    }
    loadBrowserWindow(browserWindow) {
        browserWindow.loadURL(this.url);
    }
    loadWebContents(webContents) {
        log.info("Loading URL: ", this.url);
        webContents.loadURL(this.url);
    }
    load(loader) {
        log.info("Loading URL: ", this.url);
        loader.loadURL(this.url);
    }
    toString() {
        return `${this.type}: ${this.url}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ViUmVzb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJXZWJSZXNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLGdEQUEyQztBQUMzQyw0Q0FBb0I7QUFFcEIsTUFBTSxHQUFHLEdBQUcsZUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRTVCLE1BQXNCLFdBQVc7SUFRdEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFZO1FBQ2pDLE9BQU8sSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBVztRQUMvQixPQUFPLElBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7Q0FFSjtBQWhCRCxrQ0FnQkM7QUFFRCxJQUFZLGVBR1g7QUFIRCxXQUFZLGVBQWU7SUFDdkIsZ0NBQWEsQ0FBQTtJQUNiLDhCQUFXLENBQUE7QUFDZixDQUFDLEVBSFcsZUFBZSxHQUFmLHVCQUFlLEtBQWYsdUJBQWUsUUFHMUI7QUFFRCxNQUFNLGVBQWdCLFNBQVEsV0FBVztJQUtyQyxZQUFZLElBQVk7UUFDcEIsS0FBSyxFQUFFLENBQUM7UUFKSSxTQUFJLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQztRQU14QyxJQUFJLENBQUMsWUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQyxDQUFDO1NBQ25EO1FBRUQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFFckIsQ0FBQztJQUVNLGlCQUFpQixDQUFDLGFBQTRCO1FBQ2pELGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFTSxlQUFlLENBQUMsV0FBd0I7UUFDM0MsR0FBRyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFTSxJQUFJLENBQUMsTUFBaUI7UUFDekIsR0FBRyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFTSxRQUFRO1FBQ1gsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hDLENBQUM7Q0FFSjtBQUVELE1BQU0sY0FBZSxTQUFRLFdBQVc7SUFNcEMsWUFBWSxHQUFXO1FBQ25CLEtBQUssRUFBRSxDQUFDO1FBTEksU0FBSSxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUM7UUFNdkMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDbkIsQ0FBQztJQUVNLGlCQUFpQixDQUFDLGFBQTRCO1FBQ2pELGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFTSxlQUFlLENBQUMsV0FBd0I7UUFDM0MsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTSxJQUFJLENBQUMsTUFBaUI7UUFDekIsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFTSxRQUFRO1FBQ1gsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCcm93c2VyV2luZG93ID0gRWxlY3Ryb24uQnJvd3NlcldpbmRvdztcbmltcG9ydCBXZWJDb250ZW50cyA9IEVsZWN0cm9uLldlYkNvbnRlbnRzO1xuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJy4uLy4uL2xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuY29uc3QgbG9nID0gTG9nZ2VyLmNyZWF0ZSgpO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgV2ViUmVzb3VyY2Uge1xuXG4gICAgcHVibGljIGFic3RyYWN0IGxvYWRCcm93c2VyV2luZG93KGJyb3dzZXJXaW5kb3c6IEJyb3dzZXJXaW5kb3cpOiB2b2lkO1xuXG4gICAgcHVibGljIGFic3RyYWN0IGxvYWRXZWJDb250ZW50cyh3ZWJDb250ZW50czogV2ViQ29udGVudHMpOiB2b2lkO1xuXG4gICAgcHVibGljIGFic3RyYWN0IGxvYWQobG9hZGVyOiBVUkxMb2FkZXIpOiB2b2lkO1xuXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVGaWxlKHBhdGg6IHN0cmluZyk6IFdlYlJlc291cmNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWxlV2ViUmVzb3VyY2UocGF0aCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVVUkwodXJsOiBzdHJpbmcpOiBXZWJSZXNvdXJjZSB7XG4gICAgICAgIHJldHVybiBuZXcgVVJMV2ViUmVzb3VyY2UodXJsKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGVudW0gV2ViUmVzb3VyY2VUeXBlIHtcbiAgICBGSUxFID0gXCJGSUxFXCIsXG4gICAgVVJMID0gXCJVUkxcIlxufVxuXG5jbGFzcyBGaWxlV2ViUmVzb3VyY2UgZXh0ZW5kcyBXZWJSZXNvdXJjZSB7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZSA9IFdlYlJlc291cmNlVHlwZS5GSUxFO1xuICAgIHB1YmxpYyByZWFkb25seSBmaWxlOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihmaWxlOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZmlsZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZpbGUgZG9lcyBub3QgZXhpc3Q6IFwiICsgZmlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZpbGUgPSBmaWxlO1xuXG4gICAgfVxuXG4gICAgcHVibGljIGxvYWRCcm93c2VyV2luZG93KGJyb3dzZXJXaW5kb3c6IEJyb3dzZXJXaW5kb3cpOiB2b2lkIHtcbiAgICAgICAgYnJvd3NlcldpbmRvdy5sb2FkRmlsZSh0aGlzLmZpbGUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBsb2FkV2ViQ29udGVudHMod2ViQ29udGVudHM6IFdlYkNvbnRlbnRzKTogdm9pZCB7XG4gICAgICAgIGxvZy5pbmZvKFwiTG9hZGluZyBmaWxlOiBcIiwgdGhpcy5maWxlKTtcbiAgICAgICAgLy8gd2ViQ29udGVudHMubG9hZEZpbGUodGhpcy5maWxlKTtcbiAgICAgICAgd2ViQ29udGVudHMubG9hZFVSTCgnZmlsZTovLycgKyB0aGlzLmZpbGUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBsb2FkKGxvYWRlcjogVVJMTG9hZGVyKTogdm9pZCB7XG4gICAgICAgIGxvZy5pbmZvKFwiTG9hZGluZyBmaWxlOiBcIiwgdGhpcy5maWxlKTtcbiAgICAgICAgbG9hZGVyLmxvYWRVUkwoJ2ZpbGU6Ly8nICsgdGhpcy5maWxlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMudHlwZX06ICR7dGhpcy5maWxlfWA7XG4gICAgfVxuXG59XG5cbmNsYXNzIFVSTFdlYlJlc291cmNlIGV4dGVuZHMgV2ViUmVzb3VyY2Uge1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGUgPSBXZWJSZXNvdXJjZVR5cGUuVVJMO1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHVybDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IodXJsOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgfVxuXG4gICAgcHVibGljIGxvYWRCcm93c2VyV2luZG93KGJyb3dzZXJXaW5kb3c6IEJyb3dzZXJXaW5kb3cpOiB2b2lkIHtcbiAgICAgICAgYnJvd3NlcldpbmRvdy5sb2FkVVJMKHRoaXMudXJsKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbG9hZFdlYkNvbnRlbnRzKHdlYkNvbnRlbnRzOiBXZWJDb250ZW50cyk6IHZvaWQge1xuICAgICAgICBsb2cuaW5mbyhcIkxvYWRpbmcgVVJMOiBcIiwgdGhpcy51cmwpO1xuICAgICAgICB3ZWJDb250ZW50cy5sb2FkVVJMKHRoaXMudXJsKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbG9hZChsb2FkZXI6IFVSTExvYWRlcik6IHZvaWQge1xuICAgICAgICBsb2cuaW5mbyhcIkxvYWRpbmcgVVJMOiBcIiwgdGhpcy51cmwpO1xuICAgICAgICBsb2FkZXIubG9hZFVSTCh0aGlzLnVybCk7XG4gICAgfVxuXG4gICAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLnR5cGV9OiAke3RoaXMudXJsfWA7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVVJMTG9hZGVyIHtcbiAgICBsb2FkVVJMKHVybDogc3RyaW5nKTogdm9pZDtcbn1cbiJdfQ==