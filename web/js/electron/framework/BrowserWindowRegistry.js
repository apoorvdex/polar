"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const electron_1 = require("electron");
const Sets_1 = require("../../util/Sets");
const Dictionaries_1 = require("../../util/Dictionaries");
class BrowserWindowMeta {
    constructor() {
        this.tags = {};
    }
}
exports.BrowserWindowMeta = BrowserWindowMeta;
class DefaultLiveWindowsProvider {
    getLiveWindowIDs() {
        return electron_1.BrowserWindow.getAllWindows().map(current => current.id);
    }
}
exports.DefaultLiveWindowsProvider = DefaultLiveWindowsProvider;
class BrowserWindowRegistry {
    static get(id) {
        this.gc();
        return this.registry[`${id}`];
    }
    static tag(id, tags) {
        this.gc();
        if (!(id in this.registry)) {
            this.registry[`${id}`] = new BrowserWindowMeta();
        }
        const meta = this.registry[`${id}`];
        Dictionaries_1.Dictionaries.forDict(tags, (name, value) => {
            meta.tags[name] = value;
        });
    }
    static tagged(tag) {
        this.gc();
        const result = [];
        Dictionaries_1.Dictionaries.forDict(this.registry, (id, meta) => {
            if (meta.tags[tag.name] === tag.value) {
                result.push(parseInt(id));
            }
        });
        return result;
    }
    static dump() {
        return Object.freeze(Object.assign({}, this.registry));
    }
    static gc() {
        const registryKeys = Object.keys(this.registry);
        const liveWindowIDs = this.liveWindowsProvider.getLiveWindowIDs().map(current => current.toString());
        const allWindowIDs = Sets_1.Sets.union(registryKeys, liveWindowIDs);
        const keysToRemove = Sets_1.Sets.difference(allWindowIDs, liveWindowIDs);
        keysToRemove.forEach(current => delete this.registry[current]);
        return keysToRemove.map(current => parseInt(current));
    }
}
BrowserWindowRegistry.registry = {};
BrowserWindowRegistry.liveWindowsProvider = new DefaultLiveWindowsProvider();
exports.BrowserWindowRegistry = BrowserWindowRegistry;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJvd3NlcldpbmRvd1JlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQnJvd3NlcldpbmRvd1JlZ2lzdHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQXVDO0FBQ3ZDLDBDQUFxQztBQUNyQywwREFBcUQ7QUFFckQsTUFBYSxpQkFBaUI7SUFBOUI7UUFLVyxTQUFJLEdBQVcsRUFBRSxDQUFDO0lBRTdCLENBQUM7Q0FBQTtBQVBELDhDQU9DO0FBV0QsTUFBYSwwQkFBMEI7SUFFNUIsZ0JBQWdCO1FBQ25CLE9BQU8sd0JBQWEsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEUsQ0FBQztDQUVKO0FBTkQsZ0VBTUM7QUFXRCxNQUFhLHFCQUFxQjtJQWV2QixNQUFNLENBQUMsR0FBRyxDQUFDLEVBQU07UUFDcEIsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1YsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFNLEVBQUUsSUFBWTtRQUNsQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7UUFFVixJQUFJLENBQUUsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQztTQUNwRDtRQUVELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRXBDLDJCQUFZLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztJQUVQLENBQUM7SUFLTSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQXFCO1FBQ3RDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUVWLE1BQU0sTUFBTSxHQUFTLEVBQUUsQ0FBQztRQUV4QiwyQkFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFO1lBRTdDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEtBQUssRUFBRTtnQkFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUM3QjtRQUVMLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxNQUFNLENBQUM7SUFFbEIsQ0FBQztJQUtNLE1BQU0sQ0FBQyxJQUFJO1FBQ2QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFTSxNQUFNLENBQUMsRUFBRTtRQUVaLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sYUFBYSxHQUNiLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBRXBGLE1BQU0sWUFBWSxHQUFHLFdBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRTdELE1BQU0sWUFBWSxHQUFHLFdBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRWxFLFlBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUUvRCxPQUFPLFlBQVksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUUxRCxDQUFDOztBQXZFYyw4QkFBUSxHQUFzQyxFQUFFLENBQUM7QUFFakQseUNBQW1CLEdBQXdCLElBQUksMEJBQTBCLEVBQUUsQ0FBQztBQVAvRixzREE4RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Jyb3dzZXJXaW5kb3d9IGZyb20gJ2VsZWN0cm9uJztcbmltcG9ydCB7U2V0c30gZnJvbSAnLi4vLi4vdXRpbC9TZXRzJztcbmltcG9ydCB7RGljdGlvbmFyaWVzfSBmcm9tICcuLi8uLi91dGlsL0RpY3Rpb25hcmllcyc7XG5cbmV4cG9ydCBjbGFzcyBCcm93c2VyV2luZG93TWV0YSB7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgb2YgdGFncyBhc3NvY2lhdGVkIHdpdGggdGhpcyB3aW5kb3cuXG4gICAgICovXG4gICAgcHVibGljIHRhZ3M6IFRhZ01hcCA9IHt9O1xuXG59XG5cbi8qKlxuICogR2V0IGEgbGlzdCBvZiBJRHMgZm9yIGxpdmUgd2luZG93cy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMaXZlV2luZG93c1Byb3ZpZGVyIHtcblxuICAgIGdldExpdmVXaW5kb3dJRHMoKTogSURbXTtcblxufVxuXG5leHBvcnQgY2xhc3MgRGVmYXVsdExpdmVXaW5kb3dzUHJvdmlkZXIgaW1wbGVtZW50cyBMaXZlV2luZG93c1Byb3ZpZGVyIHtcblxuICAgIHB1YmxpYyBnZXRMaXZlV2luZG93SURzKCk6IElEW10ge1xuICAgICAgICByZXR1cm4gQnJvd3NlcldpbmRvdy5nZXRBbGxXaW5kb3dzKCkubWFwKGN1cnJlbnQgPT4gY3VycmVudC5pZCk7XG4gICAgfVxuXG59XG5cbi8qKlxuICogdGhlIElEIGlmIGEgd2luZG93LlxuICovXG5leHBvcnQgdHlwZSBJRCA9IG51bWJlcjtcblxuLyoqXG4gKiBNYWludGFpbnMgYSByZWdpc3RyeSBvZiBCcm93c2VyV2luZG93cyAoYnkgSUQpIGFuZCBtZXRhZGF0YS4gIEdDIGlzIHBlcmZvcm1lZFxuICogZWFjaCB0aW1lIHlvdSBhY2Nlc3MgdGhlIG1ldGFkYXRhIHNpbmNlIHdpbmRvd3MgY2FuIGNvbWUgYW5kIGdvLlxuICovXG5leHBvcnQgY2xhc3MgQnJvd3NlcldpbmRvd1JlZ2lzdHJ5IHtcblxuICAgIC8vIG5vdGUgdGhhdCBpbnRlcm5hbGx5IFR5cGVzY3JpcHQgbWFwcyB0aGUgbnVtYmVycyB0byBzdHJpbmdzIGJ1dCB0aGlzXG4gICAgLy8gcmVhbGx5IGJyZWFrcyB0aGUgQVBJcyBmb3IgZGVhbGluZyB3aXRoIEtleXMgc28gd2UncmUganVzdCBnb2luZyB0b1xuICAgIC8vIGdpdmUgdXAgYW5kIHVzZSBhIHN0cmluZyBmb3Igbm93LlxuICAgIHByaXZhdGUgc3RhdGljIHJlZ2lzdHJ5OiB7W2lkOiBzdHJpbmddOiBCcm93c2VyV2luZG93TWV0YX0gPSB7fTtcblxuICAgIHByaXZhdGUgc3RhdGljIGxpdmVXaW5kb3dzUHJvdmlkZXI6IExpdmVXaW5kb3dzUHJvdmlkZXIgPSBuZXcgRGVmYXVsdExpdmVXaW5kb3dzUHJvdmlkZXIoKTtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbWV0YWRhdGEgZm9yIGEgc3BlY2lmaWMgQnJvd3NlcldpbmRvdyBieSBpZC4gIFlvdSBjYW4gYWNjZXNzIHRoaXNcbiAgICAgKiBieSBCcm93c2VyV2luZG93LmlkXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWRcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGdldChpZDogSUQpOiBCcm93c2VyV2luZG93TWV0YSB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHRoaXMuZ2MoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnlbYCR7aWR9YF07XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyB0YWcoaWQ6IElELCB0YWdzOiBUYWdNYXApIHtcbiAgICAgICAgdGhpcy5nYygpO1xuXG4gICAgICAgIGlmICghIChpZCBpbiB0aGlzLnJlZ2lzdHJ5KSkge1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RyeVtgJHtpZH1gXSA9IG5ldyBCcm93c2VyV2luZG93TWV0YSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMucmVnaXN0cnlbYCR7aWR9YF07XG5cbiAgICAgICAgRGljdGlvbmFyaWVzLmZvckRpY3QodGFncywgKG5hbWUsIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBtZXRhLnRhZ3NbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIGEgd2luZG93IElEIHdpdGggdGhlIGdpdmVuIHRhZy5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHRhZ2dlZCh0YWc6IEJyb3dzZXJXaW5kb3dUYWcpOiBJRFtdIHtcbiAgICAgICAgdGhpcy5nYygpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdDogSURbXSA9IFtdO1xuXG4gICAgICAgIERpY3Rpb25hcmllcy5mb3JEaWN0KHRoaXMucmVnaXN0cnksIChpZCwgbWV0YSkgPT4ge1xuXG4gICAgICAgICAgICBpZiAobWV0YS50YWdzW3RhZy5uYW1lXSA9PT0gdGFnLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQoaWQpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgY29weSBvZiB0aGUgY3VycmVudCByZWdpc3RyeS5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGR1bXAoKTogUmVhZG9ubHk8e1tpZDogc3RyaW5nXTogQnJvd3NlcldpbmRvd01ldGF9PiB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKE9iamVjdC5hc3NpZ24oe30sIHRoaXMucmVnaXN0cnkpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdjKCkge1xuXG4gICAgICAgIGNvbnN0IHJlZ2lzdHJ5S2V5cyA9IE9iamVjdC5rZXlzKHRoaXMucmVnaXN0cnkpO1xuICAgICAgICBjb25zdCBsaXZlV2luZG93SURzXG4gICAgICAgICAgICA9IHRoaXMubGl2ZVdpbmRvd3NQcm92aWRlci5nZXRMaXZlV2luZG93SURzKCkubWFwKGN1cnJlbnQgPT4gY3VycmVudC50b1N0cmluZygpKVxuXG4gICAgICAgIGNvbnN0IGFsbFdpbmRvd0lEcyA9IFNldHMudW5pb24ocmVnaXN0cnlLZXlzLCBsaXZlV2luZG93SURzKTtcblxuICAgICAgICBjb25zdCBrZXlzVG9SZW1vdmUgPSBTZXRzLmRpZmZlcmVuY2UoYWxsV2luZG93SURzLCBsaXZlV2luZG93SURzKTtcblxuICAgICAgICBrZXlzVG9SZW1vdmUuZm9yRWFjaChjdXJyZW50ID0+IGRlbGV0ZSB0aGlzLnJlZ2lzdHJ5W2N1cnJlbnRdKTtcblxuICAgICAgICByZXR1cm4ga2V5c1RvUmVtb3ZlLm1hcChjdXJyZW50ID0+IHBhcnNlSW50KGN1cnJlbnQpKTtcblxuICAgIH1cblxufVxuXG4vLyBub2luc3BlY3Rpb24gVHNMaW50XG5leHBvcnQgdHlwZSBUYWdNYXAgPSB7W25hbWU6IHN0cmluZ106IHN0cmluZ307XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJvd3NlcldpbmRvd1RhZyB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHZhbHVlOiBzdHJpbmc7XG59XG5cblxuXG5cbiJdfQ==