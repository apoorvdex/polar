"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class MouseTracer {
    constructor(doc) {
        this.doc = doc;
    }
    start() {
        MouseTracer.startWithinDoc(this.doc);
        this.doc.querySelectorAll("iframe").forEach(iframe => {
            if (!MouseTracer.startWithinIFrame(iframe)) {
                iframe.addEventListener("load", () => {
                    MouseTracer.startWithinIFrame(iframe);
                });
            }
        });
    }
    static startWithinIFrame(iframe) {
        if (iframe.contentDocument) {
            MouseTracer.startWithinDoc(iframe.contentDocument);
            return true;
        }
        return false;
    }
    static startWithinDoc(doc) {
        let tracerElement = MouseTracer.createTracerElement(doc);
        doc.body.appendChild(tracerElement);
        doc.addEventListener("mousemove", mouseEvent => {
            tracerElement.textContent = MouseTracer.format(mouseEvent);
        });
        doc.addEventListener("mouseout", mouseEvent => {
            let last = tracerElement.textContent;
            tracerElement.textContent = `OUT (last was: ${last})`;
        });
        doc.addEventListener("click", mouseEvent => {
            console.log(`Got mouseEvent at ${doc.location.href}: `, mouseEvent);
        });
    }
    static format(mouseEvent) {
        return `screen: ${mouseEvent.screenX}, ${mouseEvent.screenY} client: ${mouseEvent.clientX}, ${mouseEvent.clientY} page: ${mouseEvent.pageX}, ${mouseEvent.pageY}`;
    }
    static createTracerElement(doc) {
        let div = doc.createElement("div");
        div.style.cssText = "position: fixed; top: 0px; right: 0px; padding: 5px; background-color: #c6c6c6; z-index: 999999; font-size: 12px; min-width: 18em; min-height: 1em;";
        div.textContent = ' ';
        return div;
    }
}
exports.MouseTracer = MouseTracer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW91c2VUcmFjZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJNb3VzZVRyYWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUtBLE1BQWEsV0FBVztJQU9wQixZQUFZLEdBQWlCO1FBQ3pCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ25CLENBQUM7SUFFRCxLQUFLO1FBRUQsV0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFckMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFHakQsSUFBRyxDQUFFLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFFeEMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7b0JBQ2pDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDMUMsQ0FBQyxDQUFDLENBQUM7YUFFTjtRQUVMLENBQUMsQ0FBQyxDQUFBO0lBRU4sQ0FBQztJQUVELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxNQUF5QjtRQUU5QyxJQUFHLE1BQU0sQ0FBQyxlQUFlLEVBQUU7WUFDdkIsV0FBVyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDbkQsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBRWpCLENBQUM7SUFFRCxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQWlCO1FBRW5DLElBQUksYUFBYSxHQUFHLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV6RCxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVwQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxFQUFFO1lBSTNDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUUvRCxDQUFDLENBQUMsQ0FBQztRQUVILEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLEVBQUU7WUFJMUMsSUFBSSxJQUFJLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQztZQUVyQyxhQUFhLENBQUMsV0FBVyxHQUFHLGtCQUFrQixJQUFJLEdBQUcsQ0FBQztRQUUxRCxDQUFDLENBQUMsQ0FBQztRQUVILEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLEVBQUU7WUFFdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxDQUFDLFFBQVMsQ0FBQyxJQUFJLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztRQUV6RSxDQUFDLENBQUMsQ0FBQztJQUVQLENBQUM7SUFHRCxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQXNCO1FBQ2hDLE9BQU8sV0FBVyxVQUFVLENBQUMsT0FBTyxLQUFLLFVBQVUsQ0FBQyxPQUFPLFlBQVksVUFBVSxDQUFDLE9BQU8sS0FBSyxVQUFVLENBQUMsT0FBTyxVQUFVLFVBQVUsQ0FBQyxLQUFLLEtBQUssVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3RLLENBQUM7SUFNRCxNQUFNLENBQUMsbUJBQW1CLENBQUMsR0FBaUI7UUFFeEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVuQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxxSkFBcUosQ0FBQztRQUMxSyxHQUFHLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztRQUV0QixPQUFPLEdBQUcsQ0FBQztJQUVmLENBQUM7Q0FFSjtBQTdGRCxrQ0E2RkMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQ3JlYXRlIGEgdmlzdWFsIGlkZW50aWZpZXIgb24gcGFnZSBvZiB0aGUgY3VycmVudCBtb3VzZSBwb3NpdGlvbiBmcm9tIHRoZVxuICogcGFnZSBldmVudHMuICBXZSBhbHNvIGluamVjdCBvdXJzZWx2ZXMgaW4gY2hpbGQgaWZyYW1lcy5cbiAqL1xuZXhwb3J0IGNsYXNzIE1vdXNlVHJhY2VyIHtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgZG9jOiBIVE1MRG9jdW1lbnQ7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gZG9jIHtEb2N1bWVudH0gVGhlIGRvY3VtZW50IHRvIHdvcmsgd2l0aC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihkb2M6IEhUTUxEb2N1bWVudCkge1xuICAgICAgICB0aGlzLmRvYyA9IGRvYztcbiAgICB9XG5cbiAgICBzdGFydCgpIHtcblxuICAgICAgICBNb3VzZVRyYWNlci5zdGFydFdpdGhpbkRvYyh0aGlzLmRvYyk7XG5cbiAgICAgICAgdGhpcy5kb2MucXVlcnlTZWxlY3RvckFsbChcImlmcmFtZVwiKS5mb3JFYWNoKGlmcmFtZSA9PiB7XG5cblxuICAgICAgICAgICAgaWYoISBNb3VzZVRyYWNlci5zdGFydFdpdGhpbklGcmFtZShpZnJhbWUpKSB7XG5cbiAgICAgICAgICAgICAgICBpZnJhbWUuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBNb3VzZVRyYWNlci5zdGFydFdpdGhpbklGcmFtZShpZnJhbWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSlcblxuICAgIH1cblxuICAgIHN0YXRpYyBzdGFydFdpdGhpbklGcmFtZShpZnJhbWU6IEhUTUxJRnJhbWVFbGVtZW50KTogYm9vbGVhbiB7XG5cbiAgICAgICAgaWYoaWZyYW1lLmNvbnRlbnREb2N1bWVudCkge1xuICAgICAgICAgICAgTW91c2VUcmFjZXIuc3RhcnRXaXRoaW5Eb2MoaWZyYW1lLmNvbnRlbnREb2N1bWVudCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIH1cblxuICAgIHN0YXRpYyBzdGFydFdpdGhpbkRvYyhkb2M6IEhUTUxEb2N1bWVudCkge1xuXG4gICAgICAgIGxldCB0cmFjZXJFbGVtZW50ID0gTW91c2VUcmFjZXIuY3JlYXRlVHJhY2VyRWxlbWVudChkb2MpO1xuXG4gICAgICAgIGRvYy5ib2R5LmFwcGVuZENoaWxkKHRyYWNlckVsZW1lbnQpO1xuXG4gICAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG1vdXNlRXZlbnQgPT4ge1xuXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiR290IG1vdXNlRXZlbnQ6IFwiLCBtb3VzZUV2ZW50KTtcblxuICAgICAgICAgICAgdHJhY2VyRWxlbWVudC50ZXh0Q29udGVudCA9IE1vdXNlVHJhY2VyLmZvcm1hdChtb3VzZUV2ZW50KTtcblxuICAgICAgICB9KTtcblxuICAgICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsIG1vdXNlRXZlbnQgPT4ge1xuXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiR290IG1vdXNlRXZlbnQ6IFwiLCBtb3VzZUV2ZW50KTtcblxuICAgICAgICAgICAgbGV0IGxhc3QgPSB0cmFjZXJFbGVtZW50LnRleHRDb250ZW50O1xuXG4gICAgICAgICAgICB0cmFjZXJFbGVtZW50LnRleHRDb250ZW50ID0gYE9VVCAobGFzdCB3YXM6ICR7bGFzdH0pYDtcblxuICAgICAgICB9KTtcblxuICAgICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG1vdXNlRXZlbnQgPT4ge1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgR290IG1vdXNlRXZlbnQgYXQgJHtkb2MubG9jYXRpb24hLmhyZWZ9OiBgLCBtb3VzZUV2ZW50KTtcblxuICAgICAgICB9KTtcblxuICAgIH1cblxuXG4gICAgc3RhdGljIGZvcm1hdChtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIHJldHVybiBgc2NyZWVuOiAke21vdXNlRXZlbnQuc2NyZWVuWH0sICR7bW91c2VFdmVudC5zY3JlZW5ZfSBjbGllbnQ6ICR7bW91c2VFdmVudC5jbGllbnRYfSwgJHttb3VzZUV2ZW50LmNsaWVudFl9IHBhZ2U6ICR7bW91c2VFdmVudC5wYWdlWH0sICR7bW91c2VFdmVudC5wYWdlWX1gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHJldHVybiB7SFRNTERpdkVsZW1lbnR9XG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZVRyYWNlckVsZW1lbnQoZG9jOiBIVE1MRG9jdW1lbnQpIHtcblxuICAgICAgICBsZXQgZGl2ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgICAgICAgZGl2LnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOiBmaXhlZDsgdG9wOiAwcHg7IHJpZ2h0OiAwcHg7IHBhZGRpbmc6IDVweDsgYmFja2dyb3VuZC1jb2xvcjogI2M2YzZjNjsgei1pbmRleDogOTk5OTk5OyBmb250LXNpemU6IDEycHg7IG1pbi13aWR0aDogMThlbTsgbWluLWhlaWdodDogMWVtO1wiO1xuICAgICAgICBkaXYudGV4dENvbnRlbnQgPSAnICc7XG5cbiAgICAgICAgcmV0dXJuIGRpdjtcblxuICAgIH1cblxufVxuIl19