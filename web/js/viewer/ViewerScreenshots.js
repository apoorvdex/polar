"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CapturedScreenshots_1 = require("../screenshots/CapturedScreenshots");
class ViewerScreenshots {
    static doScreenshot() {
        const width = 250;
        const height = (11 / 8.5) * width;
        const captureOpts = {
            resize: {
                width
            },
            crop: {
                width, height, x: 0, y: 0
            }
        };
        CapturedScreenshots_1.CapturedScreenshots.capture(document.querySelector(".page"), captureOpts)
            .then(screenshot => {
            console.log("FIXME: got screnshot", screenshot);
        })
            .catch(err => console.error("Unable to capture screenshot: ", err));
    }
    static getElementPositioning(target) {
        const rect = target.getBoundingClientRect();
        return {
            left: rect.left,
            top: rect.top,
            width: rect.width,
            height: rect.height
        };
    }
}
exports.ViewerScreenshots = ViewerScreenshots;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlld2VyU2NyZWVuc2hvdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJWaWV3ZXJTY3JlZW5zaG90cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRFQUF1RTtBQUV2RSxNQUFhLGlCQUFpQjtJQUVuQixNQUFNLENBQUMsWUFBWTtRQTZCdEIsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBRWxCLE1BQU0sTUFBTSxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUVsQyxNQUFNLFdBQVcsR0FBRztZQUNoQixNQUFNLEVBQUU7Z0JBQ0osS0FBSzthQUNSO1lBQ0QsSUFBSSxFQUFFO2dCQUNGLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQzthQUM1QjtTQUNKLENBQUM7UUFFRix5Q0FBbUIsQ0FBQyxPQUFPLENBQWUsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRSxXQUFXLENBQUM7YUFDbEYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNwRCxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFNUUsQ0FBQztJQU1NLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFtQjtRQUNuRCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUU1QyxPQUFPO1lBQ0gsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2IsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtTQUN0QixDQUFDO0lBRU4sQ0FBQztDQUVKO0FBcEVELDhDQW9FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2FwdHVyZWRTY3JlZW5zaG90c30gZnJvbSBcIi4uL3NjcmVlbnNob3RzL0NhcHR1cmVkU2NyZWVuc2hvdHNcIjtcblxuZXhwb3J0IGNsYXNzIFZpZXdlclNjcmVlbnNob3RzIHtcblxuICAgIHB1YmxpYyBzdGF0aWMgZG9TY3JlZW5zaG90KCkge1xuXG4gICAgICAgIC8vIFRPRE86IGdldCB0aGUgYnJvd3NlciB3aWR0aCwgaGVpZ2h0ICsgc2Nyb2xsWCBhbmQgc2Nyb2xsWSBiZWZvcmUgYW5kXG4gICAgICAgIC8vIGNvbXBhcmUgdG8gYWZ0ZXIgc28gdGhhdCB3ZSBjYW4ga25vdyB0aGF0IG91ciBzY3JlZW5zaG90IHdhcyB0YWtlblxuICAgICAgICAvLyBwcm9wZXJseS5cblxuICAgICAgICAvLyBUT0RPOiBtdXN0IG1ha2Ugc3VyZSB0aGF0IHRoZSBlbGVtZW50IGlzbid0IG9ic2N1cmVkIGJ5IHRoZSBzaWRlXG4gICAgICAgIC8vIG5hdmlnYXRpb24gb3IgYW55IG5hdmlnYXRpb24gbm9yIHRoZSBoZWFkLi4uXG5cbiAgICAgICAgLy8gVE9ETzogSSBkb24ndCBoYXZlIGEgZ29vZCB3YXkgdG8gc2hvdyB0aGF0IHRoZSBzaWRlYmFyIGhhcyBleHBhbmRlZFxuICAgICAgICAvLyBvdmVyIGl0IG5vciBkbyBJIGhhdmUgYSB3YXkgdG8gZGV0ZWN0IGlmIHdlJ3JlIGF0IHRoZSB0b3Agb2YgdGhlXG4gICAgICAgIC8vIGJyb3dzZXIgb3Igbm90LiAgQWRkaXRpb25hbGx5LCBzb21lIG9mIHRoZSBVSSBlbGVtZW50cyBETyBvYnNjdXJlXG4gICAgICAgIC8vIGl0IGxpa2UgdGhlIHBhZ2VtYXJrcyBzbyBJIGRvbid0IGtvbncgb2YgYSByZWxpYWJsZSB3YXkgdG8gZW5zdXJlXG4gICAgICAgIC8vIHRoYXQgd2UgZ2V0IGEgc3RhYmxlIHBhZ2VtYXJrIGFuZCB0aGlzIGNvdWxkIGJlIGEgc291cmNlIG9mIGJ1Z3MuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRPRE86IG9uZSB0aGluZyBJIGNvdWxkIGRvIGlzIHRvIHNlZSB3aGljaCBlbGVtZW50cyBvYnNjdXJlIGl0IC4uLlxuICAgICAgICAvL1xuICAgICAgICAvLyBwYWdlLnBhcmVudEVsZW1lbnQuY2xpZW50V2lkdGggdnMgcGFnZS5wYXJlbnRFbGVtZW50LnNjcm9sbFdpZHRoXG4gICAgICAgIC8vIHdpbGwgc2hvdyB0aGF0IHRoZSB3aWR0aCBpcyBub3QgcG9zc2libGUuLi5cblxuXG4gICAgICAgIC8vIFRPRE86IHdlIGp1c3QgbmVlZCB0byBtYWtlIHN1cmUgd2UncmUgYXQgdGhlICd0b3AnIGFuZCB0aGF0IHRoZXJlXG4gICAgICAgIC8vIGlzIG5vIGhvcml6b250YWwgc2Nyb2xsaW5nLlxuXG4gICAgICAgIC8vIFRPRE86IG5vdyBJIG5lZWQgdG8gZGV0ZXJtaW5lIGhvdyB0byBkZXRlY3QgdGhhdCB3ZSdyZSBhdCB0aGUgJ3RvcCcgcmVsaWFibHkuXG5cblxuICAgICAgICAvLyB1c2UgMjUwIHB4IHNvIHRoYXQgd2UgY2FuIHNob3cgaXQgc2xpZ2h0bHkgbGFyZ2VyIGluIHRoZSBzaWRlYmFyXG4gICAgICAgIC8vIGJ1dCBhbHNvIHVzZSAxMjVweCB3aGVuIHNob3dpbmcgaXQgaW50IHRoZSBvdmVydmlldy5cbiAgICAgICAgY29uc3Qgd2lkdGggPSAyNTA7XG5cbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gKDExIC8gOC41KSAqIHdpZHRoO1xuXG4gICAgICAgIGNvbnN0IGNhcHR1cmVPcHRzID0ge1xuICAgICAgICAgICAgcmVzaXplOiB7XG4gICAgICAgICAgICAgICAgd2lkdGhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjcm9wOiB7XG4gICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCwgeDogMCwgeTogMFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIENhcHR1cmVkU2NyZWVuc2hvdHMuY2FwdHVyZSg8SFRNTEVsZW1lbnQ+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGFnZVwiKSwgY2FwdHVyZU9wdHMpXG4gICAgICAgICAgICAudGhlbihzY3JlZW5zaG90ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZJWE1FOiBnb3Qgc2NyZW5zaG90XCIsIHNjcmVlbnNob3QpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBjYXB0dXJlIHNjcmVlbnNob3Q6IFwiLCBlcnIpKTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcGFnZSBwb3NpdGlvbmluZyBzbyB0aGF0IHdlIGNhbiBjb21wYXJlIGJlZm9yZS9hZnRlciBhbmQgbWFrZVxuICAgICAqIHN1cmUgdGhlIHVzZXIgaGFzbid0IHNjcm9sbGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0RWxlbWVudFBvc2l0aW9uaW5nKHRhcmdldDogSFRNTEVsZW1lbnQpOiBFbGVtZW50UG9zaXRpb24ge1xuICAgICAgICBjb25zdCByZWN0ID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgICAgICAgICB0b3A6IHJlY3QudG9wLFxuICAgICAgICAgICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0XG4gICAgICAgIH07XG5cbiAgICB9XG5cbn1cblxuaW50ZXJmYWNlIEVsZW1lbnRQb3NpdGlvbiB7XG4gICAgcmVhZG9ubHkgbGVmdDogbnVtYmVyO1xuICAgIHJlYWRvbmx5IHRvcDogbnVtYmVyO1xuICAgIHJlYWRvbmx5IHdpZHRoOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgaGVpZ2h0OiBudW1iZXI7XG59XG4iXX0=