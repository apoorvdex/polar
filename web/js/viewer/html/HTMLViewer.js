"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const JQuery_1 = __importDefault(require("../../ui/JQuery"));
const Viewer_1 = require("../Viewer");
const Logger_1 = require("../../logger/Logger");
const Preconditions_1 = require("../../Preconditions");
const LinkHandler_1 = require("./LinkHandler");
const Services_1 = require("../../util/services/Services");
const HTMLFormat_1 = require("../../docformat/HTMLFormat");
const FrameInitializer_1 = require("./FrameInitializer");
const BackgroundFrameResizer_1 = require("./BackgroundFrameResizer");
const Descriptors_1 = require("./Descriptors");
const IFrameWatcher_1 = require("./IFrameWatcher");
const FrameResizer_1 = require("./FrameResizer");
const RendererAnalytics_1 = require("../../ga/RendererAnalytics");
const DocMetas_1 = require("../../metadata/DocMetas");
const log = Logger_1.Logger.create();
const ENABLE_VIDEO = true;
class HTMLViewer extends Viewer_1.Viewer {
    constructor(model) {
        super();
        this.content = document.createElement('iframe');
        this.contentParent = document.createElement('div');
        this.textLayer = document.createElement('div');
        this.requestParams = null;
        this.model = model;
    }
    start() {
        log.info("Starting HTMLViewer");
        this.content = document.querySelector("#content");
        this.contentParent = document.querySelector("#content-parent");
        this.textLayer = document.querySelector(".textLayer");
        this.htmlFormat = new HTMLFormat_1.HTMLFormat();
        RendererAnalytics_1.RendererAnalytics.pageview("/htmlviewer");
        this.requestParams = this._requestParams();
        JQuery_1.default(document).ready(() => __awaiter(this, void 0, void 0, function* () {
            this._captureBrowserZoom();
            this._loadRequestData();
            this._configurePageWidth();
            this.frameResizer = new FrameResizer_1.FrameResizer(this.contentParent, this.content);
            new IFrameWatcher_1.IFrameWatcher(this.content, () => {
                log.info("Loading page now...");
                const backgroundFrameResizer = new BackgroundFrameResizer_1.BackgroundFrameResizer(this.contentParent, this.content, () => this.onResized());
                backgroundFrameResizer.start();
                const frameInitializer = new FrameInitializer_1.FrameInitializer(this.content, this.textLayer);
                frameInitializer.start();
                this.startHandlingZoom();
            }).start();
            window.addEventListener("resize", () => {
                this.doZoom();
                this.frameResizer.resize(true)
                    .catch(err => log.error("Unable to resize: ", err));
            });
            yield Services_1.Services.start(new LinkHandler_1.LinkHandler(this.content));
        }));
    }
    onResized() {
        const docMeta = this.model.docMeta;
        const pageMeta = DocMetas_1.DocMetas.getPageMeta(docMeta, 1);
        if (!pageMeta.pageInfo.dimensions) {
            const width = this.content.offsetWidth;
            const height = this.content.offsetHeight;
            pageMeta.pageInfo.dimensions = { width, height };
        }
    }
    _captureBrowserZoom() {
        JQuery_1.default(document).keydown(function (event) {
            if (event.ctrlKey && (event.which === 61 ||
                event.which === 107 ||
                event.which === 173 ||
                event.which === 109 ||
                event.which === 187 ||
                event.which === 189)) {
                log.info("Browser zoom detected. Preventing.");
                event.preventDefault();
            }
        });
        JQuery_1.default(window).bind('mousewheel DOMMouseScroll', function (event) {
            if (event.ctrlKey) {
                log.info("Browser zoom detected. Preventing.");
                event.preventDefault();
            }
        });
    }
    startHandlingZoom() {
        JQuery_1.default(".polar-zoom-select")
            .change(() => {
            this.doZoom();
        });
    }
    _configurePageWidth() {
        const descriptor = Preconditions_1.notNull(this.requestParams).descriptor;
        log.info("Loading with descriptor: ", descriptor);
        const docDimensions = Descriptors_1.Descriptors.calculateDocDimensions(descriptor);
        log.info(`Configuring page with width=${docDimensions.width} and minHeight=${docDimensions.minHeight}`);
        document.querySelectorAll("#content-parent, .page, iframe").forEach(element => {
            element.style.width = `${docDimensions.width}px`;
        });
        document.querySelectorAll(".page, iframe").forEach((element) => {
            const htmlElement = element;
            const minHeightElement = htmlElement.parentElement;
            minHeightElement.style.minHeight = `${docDimensions.minHeight}px`;
        });
    }
    doZoom() {
        const selectElement = document.querySelector(".polar-zoom-select");
        if (selectElement === null) {
            console.log("No select");
            return;
        }
        const zoom = selectElement.options[selectElement.selectedIndex].value;
        this.changeScale(parseFloat(zoom));
        selectElement.blur();
    }
    changeScale(scale) {
        log.info("Changing scale to: " + scale);
        this._changeScaleMeta(scale);
        this._changeScale(scale);
        this._removeAnnotations();
        this._signalScale();
    }
    _changeScaleMeta(scale) {
        const metaElement = Preconditions_1.notNull(document.querySelector("meta[name='polar-scale']"));
        metaElement.setAttribute("content", `${scale}`);
    }
    _changeScale(scale) {
        const contentParent = Preconditions_1.notNull(document.querySelector("#content-parent"));
        contentParent.style.transform = `scale(${scale})`;
        const height = parseInt(this.content.getAttribute('data-original-height'));
        const newHeight = height * scale;
        this.frameResizer.resize(true, newHeight)
            .catch(err => log.error("Unable to change scale: ", err));
    }
    _removeAnnotations() {
        document.querySelectorAll(".page .annotation").forEach(function (annotation) {
            annotation.parentElement.removeChild(annotation);
        });
    }
    _signalScale() {
        log.info("HTMLViewer: Signaling rescale.");
        const pageElement = Preconditions_1.notNull(document.querySelector(".page"));
        let endOfContent = Preconditions_1.notNull(pageElement.querySelector(".endOfContent"));
        Preconditions_1.notNull(Preconditions_1.notNull(endOfContent).parentElement).removeChild(endOfContent);
        endOfContent = document.createElement("div");
        endOfContent.setAttribute("class", "endOfContent");
        pageElement.appendChild(endOfContent);
    }
    _requestParams() {
        const url = new URL(window.location.href);
        return {
            file: Preconditions_1.notNull(url.searchParams.get("file")),
            descriptor: JSON.parse(Preconditions_1.notNull(url.searchParams.get("descriptor"))),
            fingerprint: Preconditions_1.notNull(url.searchParams.get("fingerprint"))
        };
    }
    _loadRequestData() {
        const params = this._requestParams();
        let file = params.file;
        if (!file) {
            file = "example1.html";
        }
        if (ENABLE_VIDEO && file.indexOf("youtube.com/") !== -1) {
            const embedHTML = HTMLViewer.createYoutubeEmbed(file, this.content);
            this.content.contentDocument.body.innerHTML = embedHTML;
            this.content.contentWindow.history.pushState({ "html": embedHTML, "pageTitle": 'Youtube Embed' }, "", file);
        }
        else {
            this.content.src = file;
        }
        const fingerprint = params.fingerprint;
        if (!fingerprint) {
            throw new Error("Fingerprint is required");
        }
        this.htmlFormat.setCurrentDocFingerprint(fingerprint);
    }
    static createYoutubeEmbed(url, content) {
        const DEFAULT_WIDTH = 560;
        const DEFAULT_HEIGHT = 315;
        const width = content.contentDocument.body.offsetWidth;
        const height = (DEFAULT_HEIGHT / DEFAULT_WIDTH) * width;
        const u = new URL(url);
        const videoID = u.searchParams.get('v');
        return `<iframe width="${width}" height="${height}" src="https://www.youtube.com/embed/${videoID}" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>`;
    }
    docDetail() {
        const requestParams = Preconditions_1.notNull(this.requestParams);
        return {
            fingerprint: requestParams.fingerprint,
            title: requestParams.descriptor.title,
            url: requestParams.descriptor.url,
            nrPages: 1,
            filename: this.getFilename()
        };
    }
}
exports.HTMLViewer = HTMLViewer;
//# sourceMappingURL=data:application/json;base64,