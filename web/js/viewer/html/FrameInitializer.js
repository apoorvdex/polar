"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Preconditions_1 = require("../../Preconditions");
const EventBridge_1 = require("./EventBridge");
const Logger_1 = require("../../logger/Logger");
const log = Logger_1.Logger.create();
class FrameInitializer {
    constructor(iframe, textLayer) {
        this.loaded = false;
        if (!iframe) {
            throw new Error("No iframe");
        }
        this.iframe = iframe;
        this.textLayer = textLayer;
    }
    start() {
        Preconditions_1.notNull(this.iframe.contentDocument)
            .addEventListener("readystatechange", this.onReadyStateChange.bind(this));
        this.checkLoaded();
    }
    checkLoaded() {
        if (!this.loaded) {
            this.loaded = true;
            this.onLoad();
            log.info("FrameInitializer: Document has finished loading");
        }
    }
    onReadyStateChange() {
        if (Preconditions_1.notNull(this.iframe.contentDocument).readyState === "complete") {
            this.checkLoaded();
        }
    }
    onLoad() {
        log.info("Frame loaded.  Sending pagesinit on .page");
        this.startEventBridge();
        this.updateDocTitle();
        this.dispatchPagesInit();
    }
    updateDocTitle() {
        const title = Preconditions_1.notNull(this.iframe.contentDocument).title;
        log.info("Setting title: " + title);
        document.title = title;
    }
    dispatchPagesInit() {
        const event = new Event('pagesinit', { bubbles: true });
        Preconditions_1.notNull(document.querySelector(".page")).dispatchEvent(event);
    }
    startEventBridge() {
        document.querySelectorAll(".page").forEach(pageElement => {
            const eventBridge = new EventBridge_1.EventBridge(pageElement, this.iframe);
            eventBridge.start()
                .catch(err => log.error("Could not run eventBridge: ", err));
        });
    }
}
exports.FrameInitializer = FrameInitializer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnJhbWVJbml0aWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkZyYW1lSW5pdGlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1REFBNEM7QUFDNUMsK0NBQTBDO0FBQzFDLGdEQUEyQztBQUUzQyxNQUFNLEdBQUcsR0FBRyxlQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFPNUIsTUFBYSxnQkFBZ0I7SUFPekIsWUFBWSxNQUF5QixFQUFFLFNBQXNCO1FBRnJELFdBQU0sR0FBWSxLQUFLLENBQUM7UUFJNUIsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDaEM7UUFFRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUUvQixDQUFDO0lBRU0sS0FBSztRQUVSLHVCQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUM7YUFDL0IsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRTlFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUV2QixDQUFDO0lBRU8sV0FBVztRQUVmLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDbkIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2QsR0FBRyxDQUFDLElBQUksQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO1NBQy9EO0lBRUwsQ0FBQztJQUVNLGtCQUFrQjtRQUVyQixJQUFJLHVCQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxVQUFVLEtBQUssVUFBVSxFQUFFO1lBQ2hFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN0QjtJQUVMLENBQUM7SUFLTyxNQUFNO1FBRVYsR0FBRyxDQUFDLElBQUksQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUU3QixDQUFDO0lBRU8sY0FBYztRQUNsQixNQUFNLEtBQUssR0FBRyx1QkFBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3pELEdBQUcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDcEMsUUFBUSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDM0IsQ0FBQztJQUVPLGlCQUFpQjtRQUVyQixNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUd0RCx1QkFBTyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFbEUsQ0FBQztJQUVPLGdCQUFnQjtRQUVwQixRQUFRLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3JELE1BQU0sV0FBVyxHQUFHLElBQUkseUJBQVcsQ0FBZSxXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzVFLFdBQVcsQ0FBQyxLQUFLLEVBQUU7aUJBQ2QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUVKO0FBakZELDRDQWlGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7bm90TnVsbH0gZnJvbSAnLi4vLi4vUHJlY29uZGl0aW9ucyc7XG5pbXBvcnQge0V2ZW50QnJpZGdlfSBmcm9tICcuL0V2ZW50QnJpZGdlJztcbmltcG9ydCB7TG9nZ2VyfSBmcm9tICcuLi8uLi9sb2dnZXIvTG9nZ2VyJztcblxuY29uc3QgbG9nID0gTG9nZ2VyLmNyZWF0ZSgpO1xuXG4vKipcbiAqIExpc3RlbnMgZm9yIHRoZSBpZnJhbWUgdG8gbG9hZCBhbmQgdGhlbiBzZW5kcyB0aGUgZXZlbnRzIHRvIHRhcmdldCBvYmplY3RzXG4gKiBzbyB0aGF0IHRoYXQgdGhlIHBhZ2Ugc3RhcnRlZCAsIGFuZCB0aGVuIGZpbmlzaGVkIGxvYWRpbmcuICBXZSB0aGVuXG4gKiBkaXNwYXRjaGVkIHR3byBjYWxsYmFja3Mgb25JRnJhbWVMb2FkaW5nIGFuZCBvbklGcmFtZUxvYWRlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIEZyYW1lSW5pdGlhbGl6ZXIge1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBpZnJhbWU6IEhUTUxJRnJhbWVFbGVtZW50O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdGV4dExheWVyOiBIVE1MRWxlbWVudDtcblxuICAgIHByaXZhdGUgbG9hZGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihpZnJhbWU6IEhUTUxJRnJhbWVFbGVtZW50LCB0ZXh0TGF5ZXI6IEhUTUxFbGVtZW50KSB7XG5cbiAgICAgICAgaWYgKCFpZnJhbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGlmcmFtZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaWZyYW1lID0gaWZyYW1lO1xuICAgICAgICB0aGlzLnRleHRMYXllciA9IHRleHRMYXllcjtcblxuICAgIH1cblxuICAgIHB1YmxpYyBzdGFydCgpIHtcblxuICAgICAgICBub3ROdWxsKHRoaXMuaWZyYW1lLmNvbnRlbnREb2N1bWVudClcbiAgICAgICAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwicmVhZHlzdGF0ZWNoYW5nZVwiLCB0aGlzLm9uUmVhZHlTdGF0ZUNoYW5nZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICB0aGlzLmNoZWNrTG9hZGVkKCk7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIGNoZWNrTG9hZGVkKCkge1xuXG4gICAgICAgIGlmICghdGhpcy5sb2FkZWQpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMub25Mb2FkKCk7XG4gICAgICAgICAgICBsb2cuaW5mbyhcIkZyYW1lSW5pdGlhbGl6ZXI6IERvY3VtZW50IGhhcyBmaW5pc2hlZCBsb2FkaW5nXCIpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgb25SZWFkeVN0YXRlQ2hhbmdlKCkge1xuXG4gICAgICAgIGlmIChub3ROdWxsKHRoaXMuaWZyYW1lLmNvbnRlbnREb2N1bWVudCkucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrTG9hZGVkKCk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBvbkxvYWQoKSB7XG5cbiAgICAgICAgbG9nLmluZm8oXCJGcmFtZSBsb2FkZWQuICBTZW5kaW5nIHBhZ2VzaW5pdCBvbiAucGFnZVwiKTtcbiAgICAgICAgdGhpcy5zdGFydEV2ZW50QnJpZGdlKCk7XG4gICAgICAgIHRoaXMudXBkYXRlRG9jVGl0bGUoKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaFBhZ2VzSW5pdCgpO1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVEb2NUaXRsZSgpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBub3ROdWxsKHRoaXMuaWZyYW1lLmNvbnRlbnREb2N1bWVudCkudGl0bGU7XG4gICAgICAgIGxvZy5pbmZvKFwiU2V0dGluZyB0aXRsZTogXCIgKyB0aXRsZSk7XG4gICAgICAgIGRvY3VtZW50LnRpdGxlID0gdGl0bGU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkaXNwYXRjaFBhZ2VzSW5pdCgpIHtcblxuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBFdmVudCgncGFnZXNpbml0Jywge2J1YmJsZXM6IHRydWV9KTtcblxuICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXZlbnQuXG4gICAgICAgIG5vdE51bGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wYWdlXCIpKS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcblxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhcnRFdmVudEJyaWRnZSgpIHtcblxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBhZ2VcIikuZm9yRWFjaChwYWdlRWxlbWVudCA9PiB7XG4gICAgICAgICAgICBjb25zdCBldmVudEJyaWRnZSA9IG5ldyBFdmVudEJyaWRnZSg8SFRNTEVsZW1lbnQ+IHBhZ2VFbGVtZW50LCB0aGlzLmlmcmFtZSk7XG4gICAgICAgICAgICBldmVudEJyaWRnZS5zdGFydCgpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBsb2cuZXJyb3IoXCJDb3VsZCBub3QgcnVuIGV2ZW50QnJpZGdlOiBcIiwgZXJyKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxufVxuIl19