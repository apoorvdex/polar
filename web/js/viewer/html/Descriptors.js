"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Preconditions_1 = require("../../Preconditions");
const Logger_1 = require("../../logger/Logger");
const Optional_1 = require("../../util/ts/Optional");
const Reducers_1 = require("../../util/Reducers");
const log = Logger_1.Logger.create();
class Descriptors {
    static calculateDocDimensions(descriptor) {
        let width = 800;
        let minHeight = 1100;
        if (!descriptor) {
            return { width, minHeight };
        }
        if (descriptor.browser) {
            width = descriptor.browser.deviceEmulation.screenSize.width;
            log.info("Setting width from device emulation: " + width);
        }
        const scrollBox = this.computeScrollBox(descriptor);
        if (scrollBox.isPresent() && scrollBox.get().width > width) {
            if (!Preconditions_1.isPresent(scrollBox.get().widthOverflow) ||
                scrollBox.get().widthOverflow === 'visible') {
                width = scrollBox.get().width;
            }
            log.info("Setting width from scroll settings: " + width);
        }
        minHeight = (11 / 8.5) * width;
        return { width, minHeight };
    }
    static computeScrollBox(descriptor) {
        return this.computeScrollBoxFromBoxes(descriptor.scrollBox, descriptor.scroll);
    }
    static computeScrollBoxFromBoxes(scrollBox, scroll) {
        return [Optional_1.Optional.of(scrollBox), Optional_1.Optional.of(scroll)]
            .filter(current => current.isPresent())
            .filter(current => current.map(scrollBox => this.isScrollBox(scrollBox)).getOrElse(false))
            .reduce(Reducers_1.Reducers.FIRST, Optional_1.Optional.empty());
    }
    static isScrollBox(scrollBox) {
        return typeof scrollBox.width === 'number' && typeof scrollBox.height === 'number';
    }
}
exports.Descriptors = Descriptors;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVzY3JpcHRvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEZXNjcmlwdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVEQUF1RDtBQUV2RCxnREFBMkM7QUFHM0MscURBQWdEO0FBQ2hELGtEQUE2QztBQUU3QyxNQUFNLEdBQUcsR0FBRyxlQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFNUIsTUFBYSxXQUFXO0lBRWIsTUFBTSxDQUFDLHNCQUFzQixDQUFDLFVBQXdCO1FBR3pELElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUNoQixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFFckIsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNiLE9BQU8sRUFBQyxLQUFLLEVBQUUsU0FBUyxFQUFDLENBQUM7U0FDN0I7UUFFRCxJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUU7WUFHcEIsS0FBSyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7WUFFNUQsR0FBRyxDQUFDLElBQUksQ0FBQyx1Q0FBdUMsR0FBRyxLQUFLLENBQUMsQ0FBQztTQUU3RDtRQUVELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVwRCxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxHQUFHLEtBQUssRUFBRztZQU16RCxJQUFJLENBQUMseUJBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO2dCQUN6QyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsYUFBYSxLQUFLLFNBQVMsRUFBRTtnQkFFN0MsS0FBSyxHQUFHLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUM7YUFFakM7WUFFRCxHQUFHLENBQUMsSUFBSSxDQUFDLHNDQUFzQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1NBRTVEO1FBSUQsU0FBUyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUUvQixPQUFPLEVBQUMsS0FBSyxFQUFFLFNBQVMsRUFBQyxDQUFDO0lBRTlCLENBQUM7SUFFTSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsVUFBdUI7UUFDbEQsT0FBTyxJQUFJLENBQUMseUJBQXlCLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkYsQ0FBQztJQUVNLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxTQUFxQixFQUFFLE1BQWtCO1FBRTdFLE9BQU8sQ0FBQyxtQkFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxtQkFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMvQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7YUFDdEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDekYsTUFBTSxDQUFDLG1CQUFRLENBQUMsS0FBSyxFQUFFLG1CQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUVsRCxDQUFDO0lBRU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFvQjtRQUUxQyxPQUFPLE9BQU8sU0FBUyxDQUFDLEtBQUssS0FBSyxRQUFRLElBQUksT0FBTyxTQUFTLENBQUMsTUFBTSxLQUFLLFFBQVEsQ0FBQztJQUV2RixDQUFDO0NBR0o7QUFwRUQsa0NBb0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtpc1ByZXNlbnQsIG5vdE51bGx9IGZyb20gJy4uLy4uL1ByZWNvbmRpdGlvbnMnO1xuaW1wb3J0IHtQSFpNZXRhZGF0YX0gZnJvbSAnLi4vLi4vcGh6L1BIWk1ldGFkYXRhJztcbmltcG9ydCB7TG9nZ2VyfSBmcm9tICcuLi8uLi9sb2dnZXIvTG9nZ2VyJztcbmltcG9ydCB7SURpbWVuc2lvbnN9IGZyb20gJy4uLy4uL3V0aWwvRGltZW5zaW9ucyc7XG5pbXBvcnQge1Njcm9sbEJveH0gZnJvbSAnLi4vLi4vY2FwdHVyZS9yZW5kZXJlci9DYXB0dXJlZCc7XG5pbXBvcnQge09wdGlvbmFsfSBmcm9tICcuLi8uLi91dGlsL3RzL09wdGlvbmFsJztcbmltcG9ydCB7UmVkdWNlcnN9IGZyb20gJy4uLy4uL3V0aWwvUmVkdWNlcnMnO1xuXG5jb25zdCBsb2cgPSBMb2dnZXIuY3JlYXRlKCk7XG5cbmV4cG9ydCBjbGFzcyBEZXNjcmlwdG9ycyB7XG5cbiAgICBwdWJsaWMgc3RhdGljIGNhbGN1bGF0ZURvY0RpbWVuc2lvbnMoZGVzY3JpcHRvcj86IFBIWk1ldGFkYXRhKTogRG9jRGltZW5zaW9ucyB7XG5cbiAgICAgICAgLy8gdGhlIGRlZmF1bHQgd2lkdGhcbiAgICAgICAgbGV0IHdpZHRoID0gODAwO1xuICAgICAgICBsZXQgbWluSGVpZ2h0ID0gMTEwMDtcblxuICAgICAgICBpZiAoIWRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7d2lkdGgsIG1pbkhlaWdodH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVzY3JpcHRvci5icm93c2VyKSB7XG5cbiAgICAgICAgICAgIC8vIHVzZSB0aGUgc2NyZWVuIHdpZHRoIGZyb20gdGhlIGVtdWxhdGVkIGRldmljZVxuICAgICAgICAgICAgd2lkdGggPSBkZXNjcmlwdG9yLmJyb3dzZXIuZGV2aWNlRW11bGF0aW9uLnNjcmVlblNpemUud2lkdGg7XG5cbiAgICAgICAgICAgIGxvZy5pbmZvKFwiU2V0dGluZyB3aWR0aCBmcm9tIGRldmljZSBlbXVsYXRpb246IFwiICsgd2lkdGgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzY3JvbGxCb3ggPSB0aGlzLmNvbXB1dGVTY3JvbGxCb3goZGVzY3JpcHRvcik7XG5cbiAgICAgICAgaWYgKHNjcm9sbEJveC5pc1ByZXNlbnQoKSAmJiBzY3JvbGxCb3guZ2V0KCkud2lkdGggPiB3aWR0aCApIHtcblxuICAgICAgICAgICAgLy8gd2UgaGF2ZSBhIGRvY3VtZW50IHRoYXQgaXNuJ3QgbW9iaWxlIGF3YXJlIGFuZCBoYXJkIGNvZGVkIHRvIGFcbiAgICAgICAgICAgIC8vIHNwZWNpZmljIHdpZHRoIGdyZWF0ZXIgdGhhbiBvdXIgZGVmYXVsdCB3aWR0aC4gIFRoaXMgaXMgYSBuZXdcbiAgICAgICAgICAgIC8vIHNldHRpbmcgc28gd2UgaGF2ZSB0byBtYWtlIHN1cmUgdGhlIGtleSBpcyBpbiB0aGUgZGVzY3JpcHRvci5cblxuICAgICAgICAgICAgaWYgKCFpc1ByZXNlbnQoc2Nyb2xsQm94LmdldCgpLndpZHRoT3ZlcmZsb3cpIHx8XG4gICAgICAgICAgICAgICAgc2Nyb2xsQm94LmdldCgpLndpZHRoT3ZlcmZsb3cgPT09ICd2aXNpYmxlJykge1xuXG4gICAgICAgICAgICAgICAgd2lkdGggPSBzY3JvbGxCb3guZ2V0KCkud2lkdGg7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbG9nLmluZm8oXCJTZXR0aW5nIHdpZHRoIGZyb20gc2Nyb2xsIHNldHRpbmdzOiBcIiArIHdpZHRoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgLy8gcGFnZSBoZWlnaHQgc2l6ZSBzaG91bGQgYmUgYSBmdW5jdGlvbiBvZiA4LjV4MTFcblxuICAgICAgICBtaW5IZWlnaHQgPSAoMTEgLyA4LjUpICogd2lkdGg7XG5cbiAgICAgICAgcmV0dXJuIHt3aWR0aCwgbWluSGVpZ2h0fTtcblxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgY29tcHV0ZVNjcm9sbEJveChkZXNjcmlwdG9yOiBQSFpNZXRhZGF0YSk6IE9wdGlvbmFsPFNjcm9sbEJveD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wdXRlU2Nyb2xsQm94RnJvbUJveGVzKGRlc2NyaXB0b3Iuc2Nyb2xsQm94LCBkZXNjcmlwdG9yLnNjcm9sbCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBjb21wdXRlU2Nyb2xsQm94RnJvbUJveGVzKHNjcm9sbEJveD86IFNjcm9sbEJveCwgc2Nyb2xsPzogU2Nyb2xsQm94KTogT3B0aW9uYWw8U2Nyb2xsQm94PiB7XG5cbiAgICAgICAgcmV0dXJuIFtPcHRpb25hbC5vZihzY3JvbGxCb3gpLCBPcHRpb25hbC5vZihzY3JvbGwpXVxuICAgICAgICAgICAgLmZpbHRlcihjdXJyZW50ID0+IGN1cnJlbnQuaXNQcmVzZW50KCkpXG4gICAgICAgICAgICAuZmlsdGVyKGN1cnJlbnQgPT4gY3VycmVudC5tYXAoc2Nyb2xsQm94ID0+IHRoaXMuaXNTY3JvbGxCb3goc2Nyb2xsQm94KSkuZ2V0T3JFbHNlKGZhbHNlKSlcbiAgICAgICAgICAgIC5yZWR1Y2UoUmVkdWNlcnMuRklSU1QsIE9wdGlvbmFsLmVtcHR5KCkpO1xuXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBpc1Njcm9sbEJveChzY3JvbGxCb3g6IFNjcm9sbEJveCkge1xuXG4gICAgICAgIHJldHVybiB0eXBlb2Ygc2Nyb2xsQm94LndpZHRoID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygc2Nyb2xsQm94LmhlaWdodCA9PT0gJ251bWJlcic7XG5cbiAgICB9XG5cblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIERvY0RpbWVuc2lvbnMge1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgbWluSGVpZ2h0OiBudW1iZXI7XG5cbn1cbiJdfQ==