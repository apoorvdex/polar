"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Preconditions_1 = require("../../Preconditions");
class FrameEvents {
    static calculatePoints(iframe, mouseEvent) {
        Preconditions_1.Preconditions.assertNotNull(iframe, "iframe");
        if (!mouseEvent.target) {
            throw new Error("No target");
        }
        let targetElement = mouseEvent.target;
        if (targetElement.ownerDocument !== iframe.contentDocument) {
            throw new Error("Event did not occur in specified iframe");
        }
        let result = {
            page: {
                x: 0,
                y: 0
            },
            client: {
                x: 0,
                y: 0
            },
            offset: {
                x: 0,
                y: 0
            }
        };
        result.client.x = mouseEvent.screenX - window.screenX;
        let electronScreen = window.screen;
        result.client.y = mouseEvent.screenY - window.screenY - electronScreen.availTop;
        result.page.x = result.client.x;
        result.page.y = result.client.y;
        result.offset.x = mouseEvent.pageX;
        result.offset.y = mouseEvent.pageY;
        return result;
    }
}
exports.FrameEvents = FrameEvents;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnJhbWVFdmVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJGcmFtZUV2ZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVEQUFrRDtBQUVsRCxNQUFhLFdBQVc7SUFNcEIsTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUF5QixFQUFFLFVBQXNCO1FBS3BFLDZCQUFhLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUU5QyxJQUFJLENBQUUsVUFBVSxDQUFDLE1BQU0sRUFBRTtZQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ2hDO1FBSUQsSUFBSSxhQUFhLEdBQWdCLFVBQVUsQ0FBQyxNQUFNLENBQUM7UUFFbkQsSUFBRyxhQUFhLENBQUMsYUFBYSxLQUFLLE1BQU0sQ0FBQyxlQUFlLEVBQUU7WUFDdkQsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO1NBQzlEO1FBRUQsSUFBSSxNQUFNLEdBQUc7WUFFVCxJQUFJLEVBQUU7Z0JBQ0YsQ0FBQyxFQUFFLENBQUM7Z0JBQ0osQ0FBQyxFQUFFLENBQUM7YUFDUDtZQUNELE1BQU0sRUFBRTtnQkFDSixDQUFDLEVBQUUsQ0FBQztnQkFDSixDQUFDLEVBQUUsQ0FBQzthQUNQO1lBQ0QsTUFBTSxFQUFFO2dCQUNKLENBQUMsRUFBRSxDQUFDO2dCQUNKLENBQUMsRUFBRSxDQUFDO2FBQ1A7U0FFSixDQUFDO1FBU0YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBRXRELElBQUksY0FBYyxHQUFRLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFLeEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUM7UUFjaEYsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDaEMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFFaEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUNuQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDO1FBS25DLE9BQU8sTUFBTSxDQUFDO0lBRWxCLENBQUM7Q0FFSjtBQW5GRCxrQ0FtRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1ByZWNvbmRpdGlvbnN9IGZyb20gJy4uLy4uL1ByZWNvbmRpdGlvbnMnO1xuXG5leHBvcnQgY2xhc3MgRnJhbWVFdmVudHMge1xuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHRoZSBwb2ludHMgb2YgYW4gbW91c2VFdmVudCBpbiB0aGUgY3VycmVudCB3aW5kb3cgcmVsYXRpdmUgdG8gdGhlXG4gICAgICogZnJhbWUgd2hpY2ggb3JpZ2luYXRlZCB0aGUgbW91c2VFdmVudC5cbiAgICAgKi9cbiAgICBzdGF0aWMgY2FsY3VsYXRlUG9pbnRzKGlmcmFtZTogSFRNTElGcmFtZUVsZW1lbnQsIG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpOiBhbnkge1xuXG4gICAgICAgIC8vIEZJWE1FOiBtYWtlIHN1cmUgdGhlIG1vdXNlRXZlbnQgQUNUVUFMTFkgaGFwcGVuZWQgaW4gdGhlIGlmcmFtZSBiZWNhdXNlXG4gICAgICAgIC8vIGlmIGl0IGRpZG4ndCB0aGVuIHRoZSBjYWxjdWxhdGlvbnMgaGVyZSB3b24ndCBtYWtlIGFueSBzZW5zZS5cblxuICAgICAgICBQcmVjb25kaXRpb25zLmFzc2VydE5vdE51bGwoaWZyYW1lLCBcImlmcmFtZVwiKTtcblxuICAgICAgICBpZiggISBtb3VzZUV2ZW50LnRhcmdldCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gdGFyZ2V0XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmlnaHQgbm93IHdlJ3JlIGZvcmNpbmcgdGhlIGNhc3QgdG8gZWxlbWVudCBhcyB0aGVyZSdzIHNvbWUgc29ydCBvZlxuICAgICAgICAvLyBpc3N1ZSB3aXRoIGluc3RhbmNlb2YgYW5kIEhUTUxFbGVtZW50IHJldHVybmluZyBmYWxzZS5cbiAgICAgICAgbGV0IHRhcmdldEVsZW1lbnQgPSA8SFRNTEVsZW1lbnQ+bW91c2VFdmVudC50YXJnZXQ7XG5cbiAgICAgICAgaWYodGFyZ2V0RWxlbWVudC5vd25lckRvY3VtZW50ICE9PSBpZnJhbWUuY29udGVudERvY3VtZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFdmVudCBkaWQgbm90IG9jY3VyIGluIHNwZWNpZmllZCBpZnJhbWVcIik7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzdWx0ID0ge1xuXG4gICAgICAgICAgICBwYWdlOiB7XG4gICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICB5OiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpZW50OiB7XG4gICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICB5OiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb2Zmc2V0OiB7XG4gICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICB5OiAwXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBXZSBuZWVkIGEgZnJhbWUgb2YgcmVmZXJlbmNlIHRvIHRyYW5zbGF0ZSB0aGUgdHdvIGNvb3JkaW5hdGUgc3lzdGVtcy5cbiAgICAgICAgLy8gdXNpbmcgc2NyZWVuWCBhbmQgc2NyZWVuWSBzb2x2ZSB0aGlzIHByb2JsZW0gZm9yIHVzLiAgV2UgY2FuXG4gICAgICAgIC8vIHRyYW5zbGF0ZSB0aGUgdGhlIHNjcmVlbiBwb3NpdGlvbiB0byB0aGUgY2xpZW50ICh2aWV3cG9ydCkgcG9zaXRpb24sXG4gICAgICAgIC8vIGFuZCB0aGVuIGJhc2VkIG9uIHRoZSBzY3JvbGxpbmcgcG9zaXRpb25zIG9mIHRoZSBkb2N1bWVudCB0cmFuc2xhdGVcbiAgICAgICAgLy8gdGhhdCBpbnRvIHRoZSBwYWdlIHBvc2l0aW9ucy5cbiAgICAgICAgLy9cblxuICAgICAgICByZXN1bHQuY2xpZW50LnggPSBtb3VzZUV2ZW50LnNjcmVlblggLSB3aW5kb3cuc2NyZWVuWDtcblxuICAgICAgICBsZXQgZWxlY3Ryb25TY3JlZW4gPSA8YW55PndpbmRvdy5zY3JlZW47XG5cbiAgICAgICAgLy8gd2UgaGF2ZSB0byBhZGp1c3QgYnkgd2luZG93LnNjcmVlbi5hdmFpbFRvcCB0byBhY2NvdW50IGZvciB0aGUgZWxlY3Ryb25cbiAgICAgICAgLy8gbmF2YmFyLiAgVGhpcyBpc24ndCBzdGFuZGFyZGl6ZWQgdGhvdWdoIGFuZCBtaWdodCBub3QgYmUgcG9ydGFibGUgaW5cbiAgICAgICAgLy8gdGhlIGZ1dHVyZSBidXQgaXQgd29ya3MgZm9yIG5vdy5cbiAgICAgICAgcmVzdWx0LmNsaWVudC55ID0gbW91c2VFdmVudC5zY3JlZW5ZIC0gd2luZG93LnNjcmVlblkgLSBlbGVjdHJvblNjcmVlbi5hdmFpbFRvcDtcblxuICAgICAgICAvLyBGSVhNRTogcmVtb3ZpbmcgdGhlc2UgdHdvIGJlbG93IGZpeGVzIHBhZ2VtYXJrcyBmb3IgUEhaIGZpbGVzIGJ1dFxuICAgICAgICAvLyBJJ20gcHJldHR5IHN1cmUgdGhhdCBzY3JvbGxYIE1VU1QgYmUgdXNlZCB0byBnZXQgdGhlIHJpZ2h0IHBvc2l0aW9uLlxuICAgICAgICAvLyBpdCBtaWdodCBiZSB0aGF0IG15IGNvZGUgaXMgaW5jb3JyZWN0IGhlcmUuXG5cbiAgICAgICAgLy8gVE9ETzogSSB0aGluayBpdCdzIGJlY2F1c2Ugd2UncmUgSU4gdGhlIGlmcmFtZSBzbyB0aGVyZSBpcyBubyBzY3JvbGw/XG5cbiAgICAgICAgLy8gcmVzdWx0LnBhZ2UueCA9IHJlc3VsdC5jbGllbnQueCArIHdpbmRvdy5zY3JvbGxYO1xuICAgICAgICAvLyByZXN1bHQucGFnZS55ID0gcmVzdWx0LmNsaWVudC55ICsgd2luZG93LnNjcm9sbFk7XG5cbiAgICAgICAgLy8gRklYTUU6IHRoaXMgaXMgYmV0dGVyIGJ1dCBpZiB3ZSB0aGVuIGNsaWNrIG9uIGEgZWxlbWVudCB3aXRoaW4gdGhlIHBhcmVudFxuICAgICAgICAvLyB3aW5kb3cgbGlrZSBhIHRleHQgaGlnaGxpZ2h0XG5cbiAgICAgICAgcmVzdWx0LnBhZ2UueCA9IHJlc3VsdC5jbGllbnQueDtcbiAgICAgICAgcmVzdWx0LnBhZ2UueSA9IHJlc3VsdC5jbGllbnQueTtcblxuICAgICAgICByZXN1bHQub2Zmc2V0LnggPSBtb3VzZUV2ZW50LnBhZ2VYO1xuICAgICAgICByZXN1bHQub2Zmc2V0LnkgPSBtb3VzZUV2ZW50LnBhZ2VZO1xuXG4gICAgICAgIC8vIHJlc3VsdC5wYWdlLnggPSByZXN1bHQuY2xpZW50Lng7XG4gICAgICAgIC8vIHJlc3VsdC5wYWdlLnkgPSByZXN1bHQuY2xpZW50Lnk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIH1cblxufVxuIl19