"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../../../../logger/Logger");
const DocFormatFactory_1 = require("../../../../docformat/DocFormatFactory");
const Component_1 = require("../../../../components/Component");
const Functions_1 = require("../../../../util/Functions");
const Dimensions_1 = require("../../../../util/Dimensions");
const AreaHighlight_1 = require("../../../../metadata/AreaHighlight");
const AnnotationRects_1 = require("../../../../metadata/AnnotationRects");
const AreaHighlightRect_1 = require("../../../../metadata/AreaHighlightRect");
const AreaHighlightRects_1 = require("../../../../metadata/AreaHighlightRects");
const BoxController_1 = require("../../../../boxes/controller/BoxController");
const BoxOptions_1 = require("../../../../boxes/controller/BoxOptions");
const log = Logger_1.Logger.create();
class AreaHighlightComponent extends Component_1.Component {
    constructor() {
        super();
        this.docFormat = DocFormatFactory_1.DocFormatFactory.getInstance();
    }
    init(annotationEvent) {
        this.annotationEvent = annotationEvent;
        this.areaHighlight = annotationEvent.value;
        this.boxController = new BoxController_1.BoxController(boxMoveEvent => this.onBoxMoved(boxMoveEvent));
    }
    onBoxMoved(boxMoveEvent) {
        const annotationRect = AnnotationRects_1.AnnotationRects.createFromPositionedRect(boxMoveEvent.boxRect, boxMoveEvent.restrictionRect);
        const areaHighlightRect = new AreaHighlightRect_1.AreaHighlightRect(annotationRect);
        if (boxMoveEvent.state === "completed") {
            const annotationEvent = this.annotationEvent;
            this.areaHighlight = new AreaHighlight_1.AreaHighlight(this.areaHighlight);
            this.areaHighlight.rects["0"] = areaHighlightRect;
            log.debug("New areaHighlight: ", JSON.stringify(this.areaHighlight, null, "  "));
            delete annotationEvent.pageMeta.areaHighlights[this.areaHighlight.id];
            annotationEvent.pageMeta.areaHighlights[this.areaHighlight.id] = this.areaHighlight;
        }
        else {
        }
    }
    render() {
        this.destroy();
        const annotationEvent = this.annotationEvent;
        const areaHighlight = this.areaHighlight;
        const boxController = this.boxController;
        log.debug("render()");
        const docMeta = annotationEvent.docMeta;
        const pageMeta = annotationEvent.pageMeta;
        const docInfo = docMeta.docInfo;
        const pageElement = this.docFormat.getPageElementFromPageNum(pageMeta.pageInfo.num);
        const dimensionsElement = pageElement.querySelector(".canvasWrapper, .iframeWrapper");
        const containerElement = pageElement;
        const pageDimensions = new Dimensions_1.Dimensions({
            width: dimensionsElement.clientWidth,
            height: dimensionsElement.clientHeight
        });
        Functions_1.forDict(areaHighlight.rects, (key, rect) => {
            const areaHighlightRect = AreaHighlightRects_1.AreaHighlightRects.createFromRect(rect);
            const overlayRect = areaHighlightRect.toDimensions(pageDimensions);
            log.debug("Rendering annotation at: " + JSON.stringify(overlayRect, null, "  "));
            const id = this.createID();
            let highlightElement = document.getElementById(id);
            if (highlightElement === null) {
                highlightElement = document.createElement("div");
                highlightElement.setAttribute("id", id);
                containerElement.insertBefore(highlightElement, containerElement.firstChild);
                log.debug("Creating box controller for highlightElement: ", highlightElement);
                boxController.register(new BoxOptions_1.BoxOptions({
                    target: highlightElement,
                    restrictionElement: dimensionsElement,
                    intersectedElementsSelector: ".area-highlight"
                }));
            }
            highlightElement.setAttribute("data-type", "area-highlight");
            highlightElement.setAttribute("data-doc-fingerprint", docInfo.fingerprint);
            highlightElement.setAttribute("data-area-highlight-id", areaHighlight.id);
            highlightElement.setAttribute("data-annotation-id", areaHighlight.id);
            highlightElement.setAttribute("data-page-num", `${pageMeta.pageInfo.num}`);
            highlightElement.setAttribute("data-annotation-type", "area-highlight");
            highlightElement.setAttribute("data-annotation-id", areaHighlight.id);
            highlightElement.setAttribute("data-annotation-page-num", `${pageMeta.pageInfo.num}`);
            highlightElement.setAttribute("data-annotation-doc-fingerprint", docInfo.fingerprint);
            highlightElement.className = `area-highlight annotation area-highlight-${areaHighlight.id}`;
            highlightElement.style.position = "absolute";
            highlightElement.style.backgroundColor = `yellow`;
            highlightElement.style.opacity = `0.5`;
            highlightElement.style.left = `${overlayRect.left}px`;
            highlightElement.style.top = `${overlayRect.top}px`;
            highlightElement.style.width = `${overlayRect.width}px`;
            highlightElement.style.height = `${overlayRect.height}px`;
            highlightElement.style.border = `1px solid #c6c6c6`;
            highlightElement.style.zIndex = '1';
        });
    }
    createID() {
        return `area-highlight-${this.areaHighlight.id}`;
    }
    destroy() {
        const selector = `.area-highlight-${this.areaHighlight.id}`;
        const elements = document.querySelectorAll(selector);
        log.debug(`Found N elements for selector ${selector}: ` + elements.length);
        elements.forEach(highlightElement => {
            highlightElement.parentElement.removeChild(highlightElement);
        });
    }
}
exports.AreaHighlightComponent = AreaHighlightComponent;
//# sourceMappingURL=data:application/json;base64,