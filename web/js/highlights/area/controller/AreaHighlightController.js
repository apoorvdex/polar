"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../../../logger/Logger");
const Preconditions_1 = require("../../../Preconditions");
const DocFormatFactory_1 = require("../../../docformat/DocFormatFactory");
const AnnotationRects_1 = require("../../../metadata/AnnotationRects");
const AreaHighlights_1 = require("../../../metadata/AreaHighlights");
const AnnotationPointers_1 = require("../../../annotations/AnnotationPointers");
const Optional_1 = require("../../../util/ts/Optional");
const log = Logger_1.Logger.create();
class AreaHighlightController {
    constructor(model) {
        this.model = Preconditions_1.Preconditions.assertNotNull(model, "model");
        this.docFormat = DocFormatFactory_1.DocFormatFactory.getInstance();
    }
    start() {
        this.model.registerListenerForDocumentLoaded((event) => this.onDocumentLoaded(event));
        window.addEventListener("message", event => this.onMessageReceived(event), false);
    }
    onDocumentLoaded(event) {
        log.info("onDocumentLoaded: ", event.docMeta);
    }
    onMessageReceived(event) {
        if (event.data && event.data.type === "create-area-highlight") {
            this.onCreateAreaHighlight(event.data);
        }
        if (event.data && event.data.type === "delete-area-highlight") {
            this.onDeleteAreaHighlight(event.data);
        }
    }
    onCreateAreaHighlight(contextMenuLocation) {
        log.info("Creating area highlight: ", contextMenuLocation);
        const annotationRect = AnnotationRects_1.AnnotationRects.createFromEvent(contextMenuLocation);
        log.info("annotationRect", annotationRect);
        const areaHighlight = AreaHighlights_1.AreaHighlights.create({ rect: annotationRect });
        log.info("areaHighlight", areaHighlight);
        const docMeta = this.model.docMeta;
        const pageMeta = docMeta.getPageMeta(contextMenuLocation.pageNum);
        pageMeta.areaHighlights[areaHighlight.id] = areaHighlight;
    }
    onDeleteAreaHighlight(triggerEvent) {
        const annotationPointers = AnnotationPointers_1.AnnotationPointers.toAnnotationPointers(".area-highlight", triggerEvent);
        Optional_1.Optional.first(...annotationPointers).map(annotationPointer => {
            const pageMeta = this.model.docMeta.getPageMeta(annotationPointer.pageNum);
            delete pageMeta.areaHighlights[annotationPointer.id];
        });
    }
}
exports.AreaHighlightController = AreaHighlightController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXJlYUhpZ2hsaWdodENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBcmVhSGlnaGxpZ2h0Q29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLG1EQUE4QztBQUM5QywwREFBcUQ7QUFDckQsMEVBQXFFO0FBRXJFLHVFQUFrRTtBQUNsRSxxRUFBZ0U7QUFDaEUsZ0ZBQTJFO0FBRTNFLHdEQUFtRDtBQUduRCxNQUFNLEdBQUcsR0FBRyxlQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFNUIsTUFBYSx1QkFBdUI7SUFNaEMsWUFBWSxLQUFZO1FBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsNkJBQWEsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxTQUFTLEdBQUcsbUNBQWdCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFpQnBELENBQUM7SUFFTSxLQUFLO1FBRVIsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFdEYsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUV0RixDQUFDO0lBRU8sZ0JBQWdCLENBQUMsS0FBMEI7UUFDL0MsR0FBRyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVPLGlCQUFpQixDQUFDLEtBQW1CO1FBRXpDLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyx1QkFBdUIsRUFBRTtZQUMzRCxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzFDO1FBRUQsSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLHVCQUF1QixFQUFFO1lBQzNELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUM7SUFFTCxDQUFDO0lBRU8scUJBQXFCLENBQUMsbUJBQXdDO1FBRWxFLEdBQUcsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUUzRCxNQUFNLGNBQWMsR0FBRyxpQ0FBZSxDQUFDLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRTVFLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFFM0MsTUFBTSxhQUFhLEdBQUcsK0JBQWMsQ0FBQyxNQUFNLENBQUMsRUFBQyxJQUFJLEVBQUUsY0FBYyxFQUFDLENBQUMsQ0FBQztRQUVwRSxHQUFHLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUV6QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUNuQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWxFLFFBQVEsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsQ0FBQztJQUU5RCxDQUFDO0lBRU8scUJBQXFCLENBQUMsWUFBMEI7UUFFcEQsTUFBTSxrQkFBa0IsR0FDbEIsdUNBQWtCLENBQUMsb0JBQW9CLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFFL0UsbUJBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO1lBQzFELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMzRSxPQUFPLFFBQVEsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDO0NBRUo7QUFsRkQsMERBa0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEb2N1bWVudExvYWRlZEV2ZW50LCBNb2RlbH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvTW9kZWwnO1xuaW1wb3J0IHtEb2NGb3JtYXR9IGZyb20gJy4uLy4uLy4uL2RvY2Zvcm1hdC9Eb2NGb3JtYXQnO1xuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJy4uLy4uLy4uL2xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0IHtQcmVjb25kaXRpb25zfSBmcm9tICcuLi8uLi8uLi9QcmVjb25kaXRpb25zJztcbmltcG9ydCB7RG9jRm9ybWF0RmFjdG9yeX0gZnJvbSAnLi4vLi4vLi4vZG9jZm9ybWF0L0RvY0Zvcm1hdEZhY3RvcnknO1xuaW1wb3J0IHtDb250ZXh0TWVudUxvY2F0aW9ufSBmcm9tICcuLi8uLi8uLi9jb250ZXh0bWVudS9Db250ZXh0TWVudUxvY2F0aW9uJztcbmltcG9ydCB7QW5ub3RhdGlvblJlY3RzfSBmcm9tICcuLi8uLi8uLi9tZXRhZGF0YS9Bbm5vdGF0aW9uUmVjdHMnO1xuaW1wb3J0IHtBcmVhSGlnaGxpZ2h0c30gZnJvbSAnLi4vLi4vLi4vbWV0YWRhdGEvQXJlYUhpZ2hsaWdodHMnO1xuaW1wb3J0IHtBbm5vdGF0aW9uUG9pbnRlcnN9IGZyb20gJy4uLy4uLy4uL2Fubm90YXRpb25zL0Fubm90YXRpb25Qb2ludGVycyc7XG5pbXBvcnQge1RyaWdnZXJFdmVudH0gZnJvbSAnLi4vLi4vLi4vY29udGV4dG1lbnUvVHJpZ2dlckV2ZW50JztcbmltcG9ydCB7T3B0aW9uYWx9IGZyb20gJy4uLy4uLy4uL3V0aWwvdHMvT3B0aW9uYWwnO1xuXG5cbmNvbnN0IGxvZyA9IExvZ2dlci5jcmVhdGUoKTtcblxuZXhwb3J0IGNsYXNzIEFyZWFIaWdobGlnaHRDb250cm9sbGVyIHtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgbW9kZWw6IE1vZGVsO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBkb2NGb3JtYXQ6IERvY0Zvcm1hdDtcblxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBNb2RlbCkge1xuICAgICAgICB0aGlzLm1vZGVsID0gUHJlY29uZGl0aW9ucy5hc3NlcnROb3ROdWxsKG1vZGVsLCBcIm1vZGVsXCIpO1xuICAgICAgICB0aGlzLmRvY0Zvcm1hdCA9IERvY0Zvcm1hdEZhY3RvcnkuZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgICAvLyBpcGNSZW5kZXJlci5vbignY29udGV4dC1tZW51LWNvbW1hbmQnLCAoZXZlbnQ6IEVsZWN0cm9uLkV2ZW50LCBhcmc6IGFueSkgPT4ge1xuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgc3dpdGNoIChhcmcuY29tbWFuZCkge1xuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgIGNhc2UgXCJkZWxldGUtYXJlYS1oaWdobGlnaHRcIjpcbiAgICAgICAgLy8gICAgICAgICAgICAgdGhpcy5vbkRlbGV0ZUFyZWFIaWdobGlnaHQoZXZlbnQpO1xuICAgICAgICAvLyAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgICAgICBkZWZhdWx0OlxuICAgICAgICAvLyAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJVbmhhbmRsZWQgY29tbWFuZDogXCIgKyBhcmcuY29tbWFuZCk7XG4gICAgICAgIC8vICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvL1xuICAgICAgICAvLyB9KTtcblxuICAgIH1cblxuICAgIHB1YmxpYyBzdGFydCgpIHtcblxuICAgICAgICB0aGlzLm1vZGVsLnJlZ2lzdGVyTGlzdGVuZXJGb3JEb2N1bWVudExvYWRlZCgoZXZlbnQpID0+IHRoaXMub25Eb2N1bWVudExvYWRlZChldmVudCkpO1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBldmVudCA9PiB0aGlzLm9uTWVzc2FnZVJlY2VpdmVkKGV2ZW50KSwgZmFsc2UpO1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkRvY3VtZW50TG9hZGVkKGV2ZW50OiBEb2N1bWVudExvYWRlZEV2ZW50KSB7XG4gICAgICAgIGxvZy5pbmZvKFwib25Eb2N1bWVudExvYWRlZDogXCIsIGV2ZW50LmRvY01ldGEpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25NZXNzYWdlUmVjZWl2ZWQoZXZlbnQ6IE1lc3NhZ2VFdmVudCkge1xuXG4gICAgICAgIGlmIChldmVudC5kYXRhICYmIGV2ZW50LmRhdGEudHlwZSA9PT0gXCJjcmVhdGUtYXJlYS1oaWdobGlnaHRcIikge1xuICAgICAgICAgICAgdGhpcy5vbkNyZWF0ZUFyZWFIaWdobGlnaHQoZXZlbnQuZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQuZGF0YSAmJiBldmVudC5kYXRhLnR5cGUgPT09IFwiZGVsZXRlLWFyZWEtaGlnaGxpZ2h0XCIpIHtcbiAgICAgICAgICAgIHRoaXMub25EZWxldGVBcmVhSGlnaGxpZ2h0KGV2ZW50LmRhdGEpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQ3JlYXRlQXJlYUhpZ2hsaWdodChjb250ZXh0TWVudUxvY2F0aW9uOiBDb250ZXh0TWVudUxvY2F0aW9uKSB7XG5cbiAgICAgICAgbG9nLmluZm8oXCJDcmVhdGluZyBhcmVhIGhpZ2hsaWdodDogXCIsIGNvbnRleHRNZW51TG9jYXRpb24pO1xuXG4gICAgICAgIGNvbnN0IGFubm90YXRpb25SZWN0ID0gQW5ub3RhdGlvblJlY3RzLmNyZWF0ZUZyb21FdmVudChjb250ZXh0TWVudUxvY2F0aW9uKTtcblxuICAgICAgICBsb2cuaW5mbyhcImFubm90YXRpb25SZWN0XCIsIGFubm90YXRpb25SZWN0KTtcblxuICAgICAgICBjb25zdCBhcmVhSGlnaGxpZ2h0ID0gQXJlYUhpZ2hsaWdodHMuY3JlYXRlKHtyZWN0OiBhbm5vdGF0aW9uUmVjdH0pO1xuXG4gICAgICAgIGxvZy5pbmZvKFwiYXJlYUhpZ2hsaWdodFwiLCBhcmVhSGlnaGxpZ2h0KTtcblxuICAgICAgICBjb25zdCBkb2NNZXRhID0gdGhpcy5tb2RlbC5kb2NNZXRhO1xuICAgICAgICBjb25zdCBwYWdlTWV0YSA9IGRvY01ldGEuZ2V0UGFnZU1ldGEoY29udGV4dE1lbnVMb2NhdGlvbi5wYWdlTnVtKTtcblxuICAgICAgICBwYWdlTWV0YS5hcmVhSGlnaGxpZ2h0c1thcmVhSGlnaGxpZ2h0LmlkXSA9IGFyZWFIaWdobGlnaHQ7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIG9uRGVsZXRlQXJlYUhpZ2hsaWdodCh0cmlnZ2VyRXZlbnQ6IFRyaWdnZXJFdmVudCkge1xuXG4gICAgICAgIGNvbnN0IGFubm90YXRpb25Qb2ludGVyc1xuICAgICAgICAgICAgPSBBbm5vdGF0aW9uUG9pbnRlcnMudG9Bbm5vdGF0aW9uUG9pbnRlcnMoXCIuYXJlYS1oaWdobGlnaHRcIiwgdHJpZ2dlckV2ZW50KTtcblxuICAgICAgICBPcHRpb25hbC5maXJzdCguLi5hbm5vdGF0aW9uUG9pbnRlcnMpLm1hcChhbm5vdGF0aW9uUG9pbnRlciA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYWdlTWV0YSA9IHRoaXMubW9kZWwuZG9jTWV0YS5nZXRQYWdlTWV0YShhbm5vdGF0aW9uUG9pbnRlci5wYWdlTnVtKTtcbiAgICAgICAgICAgIGRlbGV0ZSBwYWdlTWV0YS5hcmVhSGlnaGxpZ2h0c1thbm5vdGF0aW9uUG9pbnRlci5pZF07XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG59XG4iXX0=