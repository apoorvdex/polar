"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Preconditions {
    static assert(value, testFunction, message) {
        Preconditions.assertNotNull(testFunction, "testFunction");
        const result = testFunction(value);
        if (!result) {
            throw new Error(`Assertion failed for value ${value}: ` + message);
        }
        return value;
    }
    static assertEqual(value, expected, name) {
        if (value !== expected) {
            throw new Error(`Value of ${value} !==- ${expected}`);
        }
        return value;
    }
    static assertNumber(value, name) {
        Preconditions.assertNotNull(value, name);
        if (isNaN(value)) {
            throw new Error(`Precondition failure for ${name}: NaN`);
        }
        Preconditions.assertTypeOf(value, "number", name);
        return value;
    }
    static assertInstanceOf(value, instance, name) {
        Preconditions.assertNotNull(value, name);
        Preconditions.assertNotNull(instance, "instance");
        if (!(value instanceof instance)) {
            throw new Error(`Precondition for instanceof '${name}' was not ${instance.name}.`);
        }
        return value;
    }
    static assertString(value, name) {
        return this.assertTypeOf(value, 'string', name);
    }
    static assertTypeOf(value, type, name) {
        if (typeof value !== type) {
            throw new Error(`Precondition for typeof '${name}' was not ${type} but actually: ` + typeof value);
        }
        return value;
    }
    static assertNotNull(value, name) {
        return Preconditions.assertPresent(value, name);
    }
    static assertPresent(value, name) {
        let msgPrefix = "Precondition argument failed: ";
        if (name) {
            msgPrefix = `Precondition (argument) for '${name}' failed`;
        }
        if (value === null) {
            throw new Error(`${msgPrefix}: null`);
        }
        if (value === undefined) {
            throw new Error(`${msgPrefix}: undefined`);
        }
        return value;
    }
    static assertAbsent(value) {
        if (!isPresent(value)) {
            return;
        }
        if (value instanceof Error) {
            throw value;
        }
        throw new Error("Not absent: " + value);
    }
    static assertNotTypeOf(value, name, type) {
        if (typeof value === type) {
            throw new Error(`Precondition for typeof '${name}' was ${type} but not allowed`);
        }
        return value;
    }
    static assertNotInstanceOf(value, name, instance) {
        if (value instanceof instance) {
            throw new Error(`Precondition for instanceof '${name}' was ${instance} but not allowed`);
        }
        return value;
    }
    static defaultValue(argCurrentValue, argDefaultValue) {
        if (!argCurrentValue) {
            return argDefaultValue;
        }
        return argCurrentValue;
    }
    static isPresent(val) {
        return val !== undefined && val !== null;
    }
}
exports.Preconditions = Preconditions;
function defaultValue(_currentValue, _defaultValue) {
    return Preconditions.defaultValue(_currentValue, _defaultValue);
}
exports.defaultValue = defaultValue;
function notNull(value, name) {
    return Preconditions.assertNotNull(value, name);
}
exports.notNull = notNull;
function isPresent(val) {
    return Preconditions.isPresent(val);
}
exports.isPresent = isPresent;
//# sourceMappingURL=data:application/json;base64,