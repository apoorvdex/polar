"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const universal_analytics_1 = __importDefault(require("universal-analytics"));
const Logger_1 = require("../logger/Logger");
const CIDs_1 = require("./CIDs");
const Version_1 = require("../util/Version");
const TRACKING_ID = 'UA-122721184-5';
const DEBUG = false;
const version = Version_1.Version.get();
const userAgent = window.navigator.userAgent;
const cid = CIDs_1.CIDs.get();
const headers = {};
const visitorOptions = {
    cid,
    headers
};
const visitor = universal_analytics_1.default(TRACKING_ID, visitorOptions).debug(DEBUG);
const log = Logger_1.Logger.create();
const defaultCallback = (err, response, body) => {
    if (err) {
        log.warn("Unable to track analytics: ", err);
    }
};
class RendererAnalytics {
    static event(args) {
        const callback = defaultCallback;
        const eventParams = {
            ec: args.category,
            ea: args.action,
            el: args.label,
            ev: args.value,
        };
        visitor.event(eventParams).send(callback);
    }
    static pageview(path, hostname, title) {
        const callback = defaultCallback;
        const pageviewParams = {
            dp: path,
            dh: hostname,
            dt: title,
        };
        visitor.pageview(pageviewParams).send(callback);
    }
    static timing(category, variable, time) {
        const callback = defaultCallback;
        visitor.timing(category, variable, time).send(callback);
    }
    static set(fieldsObject) {
        for (const key of Object.keys(fieldsObject)) {
            const value = fieldsObject[key];
            visitor.set(key, value);
        }
    }
}
exports.RendererAnalytics = RendererAnalytics;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVuZGVyZXJBbmFseXRpY3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJSZW5kZXJlckFuYWx5dGljcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDhFQUFvRDtBQUNwRCw2Q0FBd0M7QUFDeEMsaUNBQTRCO0FBQzVCLDZDQUF3QztBQUd4QyxNQUFNLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQztBQUVyQyxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUM7QUFFcEIsTUFBTSxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUk5QixNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztBQUU3QyxNQUFNLEdBQUcsR0FBRyxXQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDdkIsTUFBTSxPQUFPLEdBQUcsRUFDZixDQUFDO0FBRUYsTUFBTSxjQUFjLEdBQXNCO0lBQ3RDLEdBQUc7SUFDSCxPQUFPO0NBQ1YsQ0FBQztBQUVGLE1BQU0sT0FBTyxHQUFHLDZCQUFFLENBQUMsV0FBVyxFQUFFLGNBQWMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUU3RCxNQUFNLEdBQUcsR0FBRyxlQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFNUIsTUFBTSxlQUFlLEdBQUcsQ0FBQyxHQUFVLEVBQUUsUUFBYSxFQUFFLElBQVMsRUFBRSxFQUFFO0lBSzdELElBQUksR0FBRyxFQUFFO1FBQ0wsR0FBRyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUNoRDtBQUVMLENBQUMsQ0FBQztBQUVGLE1BQWEsaUJBQWlCO0lBRW5CLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBZ0I7UUFZaEMsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDO1FBR2pDLE1BQU0sV0FBVyxHQUFnQjtZQUM3QixFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDakIsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ2YsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2QsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLO1NBR2pCLENBQUM7UUFFRixPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUU5QyxDQUFDO0lBRU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFZLEVBQUUsUUFBaUIsRUFBRSxLQUFjO1FBRWxFLE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQztRQUdqQyxNQUFNLGNBQWMsR0FBc0I7WUFDdEMsRUFBRSxFQUFFLElBQUk7WUFDUixFQUFFLEVBQUUsUUFBUTtZQUNaLEVBQUUsRUFBRSxLQUFLO1NBR1osQ0FBQztRQUVGLE9BQU8sQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRXBELENBQUM7SUFFTSxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQWdCLEVBQUUsUUFBZ0IsRUFBRSxJQUFxQjtRQUMxRSxNQUFNLFFBQVEsR0FBRyxlQUFlLENBQUM7UUFDakMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxZQUEyQjtRQUV6QyxLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDekMsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzNCO0lBRUwsQ0FBQztDQUVKO0FBN0RELDhDQTZEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1YSwge0V2ZW50UGFyYW1zfSBmcm9tICd1bml2ZXJzYWwtYW5hbHl0aWNzJztcbmltcG9ydCB7TG9nZ2VyfSBmcm9tICcuLi9sb2dnZXIvTG9nZ2VyJztcbmltcG9ydCB7Q0lEc30gZnJvbSAnLi9DSURzJztcbmltcG9ydCB7VmVyc2lvbn0gZnJvbSAnLi4vdXRpbC9WZXJzaW9uJztcblxuLy8gY29uc3QgVFJBQ0tJTkdfSUQgPSAnVUEtMTIyNzIxMTg0LTEnO1xuY29uc3QgVFJBQ0tJTkdfSUQgPSAnVUEtMTIyNzIxMTg0LTUnO1xuXG5jb25zdCBERUJVRyA9IGZhbHNlO1xuXG5jb25zdCB2ZXJzaW9uID0gVmVyc2lvbi5nZXQoKTtcblxuZGVjbGFyZSB2YXIgd2luZG93OiBXaW5kb3c7XG5cbmNvbnN0IHVzZXJBZ2VudCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG5jb25zdCBjaWQgPSBDSURzLmdldCgpO1xuY29uc3QgaGVhZGVycyA9IHtcbn07XG5cbmNvbnN0IHZpc2l0b3JPcHRpb25zOiB1YS5WaXNpdG9yT3B0aW9ucyA9IHtcbiAgICBjaWQsXG4gICAgaGVhZGVyc1xufTtcblxuY29uc3QgdmlzaXRvciA9IHVhKFRSQUNLSU5HX0lELCB2aXNpdG9yT3B0aW9ucykuZGVidWcoREVCVUcpO1xuXG5jb25zdCBsb2cgPSBMb2dnZXIuY3JlYXRlKCk7XG5cbmNvbnN0IGRlZmF1bHRDYWxsYmFjayA9IChlcnI6IEVycm9yLCByZXNwb25zZTogYW55LCBib2R5OiBhbnkpID0+IHtcblxuICAgIC8vIFRoZSBzZW5kIG1ldGhvZCB0YWtlIHNhIGNhbGxiYWNrIHJlZ2FyZGluZyBlcnJvcnMgYW5kIHRoaXMgYWxsb3dzXG4gICAgLy8gdXMgdG8gbG9nIGZhaWx1cmUuXG5cbiAgICBpZiAoZXJyKSB7XG4gICAgICAgIGxvZy53YXJuKFwiVW5hYmxlIHRvIHRyYWNrIGFuYWx5dGljczogXCIsIGVycik7XG4gICAgfVxuXG59O1xuXG5leHBvcnQgY2xhc3MgUmVuZGVyZXJBbmFseXRpY3Mge1xuXG4gICAgcHVibGljIHN0YXRpYyBldmVudChhcmdzOiBJRXZlbnRBcmdzKTogdm9pZCB7XG5cbiAgICAgICAgLy8gVE9ETzogcmVmYWN0b3IgdGhpcyB0byBhbmQgb3ZlcmxvYWRlZCBtZXRob2QgSSB0aGluayBhcyBpZiBJIG1pc3NcbiAgICAgICAgLy8gb25lIG9mIHRoZSBhcmd1bWVudHMgbGlrZSBhY3Rpb24gYW5kIGxhYmVsIGJ1dCBnaXZlIGNhdGVnb3J5IGFuZFxuICAgICAgICAvLyB2YWx1ZSB0aGVuIHdlIGRvbid0IGhhbmRsZSB0aGUgbWV0aG9kIGNhbGwgcHJvcGVybHkuXG5cbiAgICAgICAgLy8gbG9nLmRlYnVnKFwiU2VuZGluZyBhbmFseXRpY3MgZXZlbnQ6IFwiLCBhcmdzKTtcblxuICAgICAgICAvLyBGSVhNRTogc2NyZWVuUmVzb2x1dGlvbiAoc3IpIGFuZCB2aWV3cG9ydFNpemUgKHZwKVxuICAgICAgICAvL1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcGVha3NhbmRwaWVzL3VuaXZlcnNhbC1hbmFseXRpY3MvYmxvYi9tYXN0ZXIvQWNjZXB0YWJsZVBhcmFtcy5tZFxuXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gZGVmYXVsdENhbGxiYWNrO1xuXG4gICAgICAgIC8vIFdBUk5JTkc6IEkgdGhpbmsgZW5hYmxpbmcgdmVyc2lvbiAob3IgJ2F2JykgaXMgYnJlYWtpbmcgdHJhY2tpbmchXG4gICAgICAgIGNvbnN0IGV2ZW50UGFyYW1zOiBFdmVudFBhcmFtcyA9IHtcbiAgICAgICAgICAgIGVjOiBhcmdzLmNhdGVnb3J5LFxuICAgICAgICAgICAgZWE6IGFyZ3MuYWN0aW9uLFxuICAgICAgICAgICAgZWw6IGFyZ3MubGFiZWwsXG4gICAgICAgICAgICBldjogYXJncy52YWx1ZSxcbiAgICAgICAgICAgIC8vIHVhOiB1c2VyQWdlbnQsXG4gICAgICAgICAgICAvLyBhdjogdmVyc2lvblxuICAgICAgICB9O1xuXG4gICAgICAgIHZpc2l0b3IuZXZlbnQoZXZlbnRQYXJhbXMpLnNlbmQoY2FsbGJhY2spO1xuXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBwYWdldmlldyhwYXRoOiBzdHJpbmcsIGhvc3RuYW1lPzogc3RyaW5nLCB0aXRsZT86IHN0cmluZyk6IHZvaWQge1xuXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gZGVmYXVsdENhbGxiYWNrO1xuXG4gICAgICAgIC8vIFdBUk5JTkc6IEkgdGhpbmsgZW5hYmxpbmcgdmVyc2lvbiAob3IgJ2F2JykgaXMgYnJlYWtpbmcgdHJhY2tpbmchXG4gICAgICAgIGNvbnN0IHBhZ2V2aWV3UGFyYW1zOiB1YS5QYWdldmlld1BhcmFtcyA9IHtcbiAgICAgICAgICAgIGRwOiBwYXRoLFxuICAgICAgICAgICAgZGg6IGhvc3RuYW1lLFxuICAgICAgICAgICAgZHQ6IHRpdGxlLFxuICAgICAgICAgICAgLy8gdWE6IHVzZXJBZ2VudCxcbiAgICAgICAgICAgIC8vIGF2OiB2ZXJzaW9uXG4gICAgICAgIH07XG5cbiAgICAgICAgdmlzaXRvci5wYWdldmlldyhwYWdldmlld1BhcmFtcykuc2VuZChjYWxsYmFjayk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHRpbWluZyhjYXRlZ29yeTogc3RyaW5nLCB2YXJpYWJsZTogc3RyaW5nLCB0aW1lOiBzdHJpbmcgfCBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBkZWZhdWx0Q2FsbGJhY2s7XG4gICAgICAgIHZpc2l0b3IudGltaW5nKGNhdGVnb3J5LCB2YXJpYWJsZSwgdGltZSkuc2VuZChjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBzZXQoZmllbGRzT2JqZWN0OiBJRmllbGRzT2JqZWN0KTogdm9pZCB7XG5cbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoZmllbGRzT2JqZWN0KSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBmaWVsZHNPYmplY3Rba2V5XTtcbiAgICAgICAgICAgIHZpc2l0b3Iuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRXZlbnRBcmdzIHtcbiAgICBjYXRlZ29yeTogc3RyaW5nO1xuICAgIGFjdGlvbjogc3RyaW5nO1xuICAgIGxhYmVsPzogc3RyaW5nO1xuICAgIHZhbHVlPzogbnVtYmVyO1xuICAgIG5vbkludGVyYWN0aW9uPzogYm9vbGVhbjtcbiAgICB0cmFuc3BvcnQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZpZWxkc09iamVjdCB7XG4gICAgW2k6IHN0cmluZ106IGFueTtcbn1cblxuIl19