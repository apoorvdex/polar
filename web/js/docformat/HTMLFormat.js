"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const DocFormat_1 = require("./DocFormat");
const Preconditions_1 = require("../Preconditions");
const Optional_1 = require("../util/ts/Optional");
class HTMLFormat extends DocFormat_1.DocFormat {
    constructor() {
        super();
        this.name = 'html';
    }
    getCurrentPageDetail() {
        const pageElement = Preconditions_1.notNull(this.getCurrentPageElement());
        const pageNum = this.getPageNumFromPageElement(pageElement);
        const dimensions = {
            width: pageElement.offsetWidth,
            height: pageElement.offsetHeight
        };
        return { pageElement, pageNum, dimensions };
    }
    currentDocFingerprint() {
        let polarFingerprint = this._queryFingerprintElement();
        if (polarFingerprint !== null) {
            return Optional_1.Optional.of(polarFingerprint.getAttribute("content")).getOrUndefined();
        }
        return undefined;
    }
    setCurrentDocFingerprint(fingerprint) {
        let polarFingerprint = this._queryFingerprintElement();
        polarFingerprint.setAttribute("content", fingerprint);
    }
    _queryFingerprintElement() {
        return Preconditions_1.notNull(document.querySelector("meta[name='polar-fingerprint']"));
    }
    currentState() {
        return {
            nrPages: 1,
            currentPageNumber: 1,
        };
    }
    textHighlightOptions() {
        return {};
    }
    currentScale() {
        return Optional_1.Optional.of(document.querySelector("meta[name='polar-scale']"))
            .map(current => current.getAttribute('content'))
            .map(current => parseFloat(current))
            .get();
    }
    targetDocument() {
        return Optional_1.Optional.of(document.querySelector("iframe")).get().contentDocument;
    }
}
exports.HTMLFormat = HTMLFormat;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSFRNTEZvcm1hdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkhUTUxGb3JtYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBaUU7QUFDakUsb0RBQXlDO0FBQ3pDLGtEQUE2QztBQUU3QyxNQUFhLFVBQVcsU0FBUSxxQkFBUztJQUlyQztRQUNJLEtBQUssRUFBRSxDQUFDO1FBSEksU0FBSSxHQUFHLE1BQU0sQ0FBQztJQUk5QixDQUFDO0lBS00sb0JBQW9CO1FBRXZCLE1BQU0sV0FBVyxHQUFHLHVCQUFPLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQztRQUMxRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFNUQsTUFBTSxVQUFVLEdBQUc7WUFDZixLQUFLLEVBQUUsV0FBVyxDQUFDLFdBQVc7WUFDOUIsTUFBTSxFQUFFLFdBQVcsQ0FBQyxZQUFZO1NBQ25DLENBQUM7UUFFRixPQUFPLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQztJQUVoRCxDQUFDO0lBS0QscUJBQXFCO1FBRWpCLElBQUksZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7UUFFdkQsSUFBSSxnQkFBZ0IsS0FBSyxJQUFJLEVBQUU7WUFDM0IsT0FBTyxtQkFBUSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFFLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUNsRjtRQUVELE9BQU8sU0FBUyxDQUFDO0lBRXJCLENBQUM7SUFFRCx3QkFBd0IsQ0FBQyxXQUFtQjtRQUN4QyxJQUFJLGdCQUFnQixHQUFHLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBQ3ZELGdCQUFnQixDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELHdCQUF3QjtRQUNwQixPQUFPLHVCQUFPLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUtNLFlBQVk7UUFFZixPQUFPO1lBQ0gsT0FBTyxFQUFFLENBQUM7WUFDVixpQkFBaUIsRUFBRSxDQUFDO1NBQ3ZCLENBQUM7SUFFTixDQUFDO0lBRUQsb0JBQW9CO1FBQ2hCLE9BQU8sRUFDTixDQUFDO0lBQ04sQ0FBQztJQUVELFlBQVk7UUFFUixPQUFPLG1CQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsMEJBQTBCLENBQUMsQ0FBQzthQUNqRSxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQy9DLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNuQyxHQUFHLEVBQUUsQ0FBQztJQXVCZixDQUFDO0lBRUQsY0FBYztRQUNWLE9BQU8sbUJBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQztJQUMvRSxDQUFDO0NBRUo7QUFwR0QsZ0NBb0dDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEb2NGb3JtYXQsIERvY0Zvcm1hdE5hbWUsIFBhZ2VEZXRhaWx9IGZyb20gJy4vRG9jRm9ybWF0JztcbmltcG9ydCB7bm90TnVsbH0gZnJvbSAnLi4vUHJlY29uZGl0aW9ucyc7XG5pbXBvcnQge09wdGlvbmFsfSBmcm9tICcuLi91dGlsL3RzL09wdGlvbmFsJztcblxuZXhwb3J0IGNsYXNzIEhUTUxGb3JtYXQgZXh0ZW5kcyBEb2NGb3JtYXQge1xuXG4gICAgcHVibGljIHJlYWRvbmx5IG5hbWUgPSAnaHRtbCc7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHRoZSBtZXRhZGF0YSBhYm91dCB0aGUgY3VycmVudCBwYWdlLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRDdXJyZW50UGFnZURldGFpbCgpOiBQYWdlRGV0YWlsIHtcblxuICAgICAgICBjb25zdCBwYWdlRWxlbWVudCA9IG5vdE51bGwodGhpcy5nZXRDdXJyZW50UGFnZUVsZW1lbnQoKSk7XG4gICAgICAgIGNvbnN0IHBhZ2VOdW0gPSB0aGlzLmdldFBhZ2VOdW1Gcm9tUGFnZUVsZW1lbnQocGFnZUVsZW1lbnQpO1xuXG4gICAgICAgIGNvbnN0IGRpbWVuc2lvbnMgPSB7XG4gICAgICAgICAgICB3aWR0aDogcGFnZUVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IHBhZ2VFbGVtZW50Lm9mZnNldEhlaWdodFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7IHBhZ2VFbGVtZW50LCBwYWdlTnVtLCBkaW1lbnNpb25zIH07XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgZG9jIGZpbmdlcnByaW50IG9yIG51bGwgaWYgaXQgaGFzbid0IGJlZW4gbG9hZGVkIHlldC5cbiAgICAgKi9cbiAgICBjdXJyZW50RG9jRmluZ2VycHJpbnQoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcblxuICAgICAgICBsZXQgcG9sYXJGaW5nZXJwcmludCA9IHRoaXMuX3F1ZXJ5RmluZ2VycHJpbnRFbGVtZW50KCk7XG5cbiAgICAgICAgaWYgKHBvbGFyRmluZ2VycHJpbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBPcHRpb25hbC5vZihwb2xhckZpbmdlcnByaW50LmdldEF0dHJpYnV0ZShcImNvbnRlbnRcIikhKS5nZXRPclVuZGVmaW5lZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIH1cblxuICAgIHNldEN1cnJlbnREb2NGaW5nZXJwcmludChmaW5nZXJwcmludDogc3RyaW5nKSB7XG4gICAgICAgIGxldCBwb2xhckZpbmdlcnByaW50ID0gdGhpcy5fcXVlcnlGaW5nZXJwcmludEVsZW1lbnQoKTtcbiAgICAgICAgcG9sYXJGaW5nZXJwcmludC5zZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIsIGZpbmdlcnByaW50KTtcbiAgICB9XG5cbiAgICBfcXVlcnlGaW5nZXJwcmludEVsZW1lbnQoKTogRWxlbWVudCB7XG4gICAgICAgIHJldHVybiBub3ROdWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtZXRhW25hbWU9J3BvbGFyLWZpbmdlcnByaW50J11cIikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgZG9jLlxuICAgICAqL1xuICAgIHB1YmxpYyBjdXJyZW50U3RhdGUoKSB7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5yUGFnZXM6IDEsXG4gICAgICAgICAgICBjdXJyZW50UGFnZU51bWJlcjogMSxcbiAgICAgICAgfTtcblxuICAgIH1cblxuICAgIHRleHRIaWdobGlnaHRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGN1cnJlbnRTY2FsZSgpIHtcblxuICAgICAgICByZXR1cm4gT3B0aW9uYWwub2YoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIm1ldGFbbmFtZT0ncG9sYXItc2NhbGUnXVwiKSlcbiAgICAgICAgICAgIC5tYXAoY3VycmVudCA9PiBjdXJyZW50LmdldEF0dHJpYnV0ZSgnY29udGVudCcpKVxuICAgICAgICAgICAgLm1hcChjdXJyZW50ID0+IHBhcnNlRmxvYXQoY3VycmVudCkpXG4gICAgICAgICAgICAuZ2V0KCk7XG5cbiAgICAgICAgLypcbiAgICAgICAgbGV0IHNlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzZWxlY3RcIik7XG4gICAgICAgIGxldCB2YWx1ZSA9IHNlbGVjdC5vcHRpb25zW3NlbGVjdC5zZWxlY3RlZEluZGV4XS52YWx1ZTtcblxuICAgICAgICBpZighdmFsdWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHNjYWxlIHZhbHVlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3VsdCA9IHBhcnNlSW50KHZhbHVlKTtcblxuICAgICAgICBpZihpc05hTihyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgYSBudW1iZXIgZnJvbTogXCIgKyB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZihyZXN1bHQgPD0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2NhbGUgaXMgdG9vIHNtYWxsOiBcIiArIHJlc3VsdCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAqL1xuXG4gICAgfVxuXG4gICAgdGFyZ2V0RG9jdW1lbnQoKTogSFRNTERvY3VtZW50IHwgbnVsbCB7XG4gICAgICAgIHJldHVybiBPcHRpb25hbC5vZihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaWZyYW1lXCIpKS5nZXQoKS5jb250ZW50RG9jdW1lbnQ7XG4gICAgfVxuXG59XG4iXX0=