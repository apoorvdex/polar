"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const View_1 = require("./View");
const DocFormatFactory_1 = require("../docformat/DocFormatFactory");
const DocMetaDescriber_1 = require("../metadata/DocMetaDescriber");
const Functions_1 = require("../util/Functions");
const Logger_1 = require("../logger/Logger");
const ReadingProgressResume_1 = require("./ReadingProgressResume");
const log = Logger_1.Logger.create();
class WebView extends View_1.View {
    constructor(model, prefsProvider) {
        super(model);
        this.prefsProvider = prefsProvider;
        this.docFormat = DocFormatFactory_1.DocFormatFactory.getInstance();
    }
    start() {
        this.model.registerListenerForDocumentLoaded(event => this.onDocumentLoaded(event));
        return this;
    }
    updateProgress() {
        const perc = this.computeProgress(this.model.docMeta);
        log.info("Percentage is now: " + perc);
        const headerElement = document.querySelector("#polar-header");
        if (headerElement) {
            headerElement.style.display = 'block';
        }
        const progressElement = document.querySelector("#polar-progress progress");
        progressElement.value = perc;
        const description = DocMetaDescriber_1.DocMetaDescriber.describe(this.model.docMeta);
        const docOverview = document.querySelector("#polar-doc-overview");
        if (docOverview) {
            docOverview.textContent = description;
        }
    }
    computeProgress(docMeta) {
        let total = 0;
        Functions_1.forDict(docMeta.pageMetas, (key, pageMeta) => {
            Functions_1.forDict(pageMeta.pagemarks, (column, pagemark) => {
                total += pagemark.percentage;
            });
        });
        const perc = total / (docMeta.docInfo.nrPages * 100);
        return perc;
    }
    onDocumentLoaded(event) {
        const autoResume = this.prefsProvider.get().isMarked('settings-auto-resume', true);
        const docMeta = event.docMeta;
        log.info("WebView.onDocumentLoaded: ", docMeta);
        this.updateProgress();
        this.handleProgressDoubleClick(docMeta);
        if (autoResume) {
            ReadingProgressResume_1.ReadingProgressResume.resume(docMeta);
        }
    }
    handleProgressDoubleClick(docMeta) {
        document.querySelector("#polar-header").addEventListener('dblclick', () => {
            ReadingProgressResume_1.ReadingProgressResume.resume(docMeta);
        });
    }
}
exports.WebView = WebView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ViVmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIldlYlZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxpQ0FBNEI7QUFDNUIsb0VBQStEO0FBRS9ELG1FQUE4RDtBQUM5RCxpREFBMEM7QUFFMUMsNkNBQXdDO0FBR3hDLG1FQUE4RDtBQUs5RCxNQUFNLEdBQUcsR0FBRyxlQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFNUIsTUFBYSxPQUFRLFNBQVEsV0FBSTtJQVU3QixZQUFZLEtBQVksRUFBRSxhQUE0QjtRQUNsRCxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFYixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLG1DQUFnQixDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRXBELENBQUM7SUFFTSxLQUFLO1FBRVIsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRXBGLE9BQU8sSUFBSSxDQUFDO0lBRWhCLENBQUM7SUFLTSxjQUFjO1FBS2pCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV0RCxHQUFHLENBQUMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxDQUFDO1FBRXZDLE1BQU0sYUFBYSxHQUFpQixRQUFRLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRTVFLElBQUksYUFBYSxFQUFFO1lBQ2YsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1NBQ3pDO1FBRUQsTUFBTSxlQUFlLEdBQXlCLFFBQVEsQ0FBQyxhQUFhLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUVqRyxlQUFlLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUk3QixNQUFNLFdBQVcsR0FBRyxtQ0FBZ0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVsRSxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFFbEUsSUFBSSxXQUFXLEVBQUU7WUFDYixXQUFXLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztTQUN6QztJQUVMLENBQUM7SUFLTyxlQUFlLENBQUMsT0FBZ0I7UUFJcEMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBRWQsbUJBQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxFQUFFO1lBRXpDLG1CQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRTtnQkFFN0MsS0FBSyxJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUM7WUFFakMsQ0FBQyxDQUFDLENBQUM7UUFFUCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBRXJELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFLTyxnQkFBZ0IsQ0FBQyxLQUEwQjtRQUUvQyxNQUFNLFVBQVUsR0FDVixJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV0RSxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBRTlCLEdBQUcsQ0FBQyxJQUFJLENBQUMsNEJBQTRCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFaEQsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV4QyxJQUFJLFVBQVUsRUFBRTtZQUNaLDZDQUFxQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN6QztJQUVMLENBQUM7SUFFTyx5QkFBeUIsQ0FBQyxPQUFnQjtRQUU5QyxRQUFRLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBRSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7WUFFdkUsNkNBQXFCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTFDLENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQztDQUVKO0FBbkhELDBCQW1IQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RG9jdW1lbnRMb2FkZWRFdmVudCwgTW9kZWx9IGZyb20gJy4uL21vZGVsL01vZGVsJztcbmltcG9ydCB7Vmlld30gZnJvbSAnLi9WaWV3JztcbmltcG9ydCB7RG9jRm9ybWF0RmFjdG9yeX0gZnJvbSAnLi4vZG9jZm9ybWF0L0RvY0Zvcm1hdEZhY3RvcnknO1xuaW1wb3J0IHtEb2NGb3JtYXR9IGZyb20gJy4uL2RvY2Zvcm1hdC9Eb2NGb3JtYXQnO1xuaW1wb3J0IHtEb2NNZXRhRGVzY3JpYmVyfSBmcm9tICcuLi9tZXRhZGF0YS9Eb2NNZXRhRGVzY3JpYmVyJztcbmltcG9ydCB7Zm9yRGljdH0gZnJvbSAnLi4vdXRpbC9GdW5jdGlvbnMnO1xuaW1wb3J0IHtEb2NNZXRhfSBmcm9tICcuLi9tZXRhZGF0YS9Eb2NNZXRhJztcbmltcG9ydCB7TG9nZ2VyfSBmcm9tICcuLi9sb2dnZXIvTG9nZ2VyJztcbmltcG9ydCB7QXJyYXlzfSBmcm9tICcuLi91dGlsL0FycmF5cyc7XG5pbXBvcnQge0VsZW1lbnRzfSBmcm9tICcuLi91dGlsL0VsZW1lbnRzJztcbmltcG9ydCB7UmVhZGluZ1Byb2dyZXNzUmVzdW1lfSBmcm9tICcuL1JlYWRpbmdQcm9ncmVzc1Jlc3VtZSc7XG5pbXBvcnQge0xvY2FsUHJlZnN9IGZyb20gJy4uL3V0aWwvTG9jYWxQcmVmcyc7XG5pbXBvcnQge1ByZWZzfSBmcm9tICcuLi91dGlsL3ByZWZzL1ByZWZzJztcbmltcG9ydCB7UHJlZnNQcm92aWRlcn0gZnJvbSAnLi4vZGF0YXN0b3JlL0RhdGFzdG9yZSc7XG5cbmNvbnN0IGxvZyA9IExvZ2dlci5jcmVhdGUoKTtcblxuZXhwb3J0IGNsYXNzIFdlYlZpZXcgZXh0ZW5kcyBWaWV3IHtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgZG9jRm9ybWF0OiBEb2NGb3JtYXQ7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IHByZWZzUHJvdmlkZXI6IFByZWZzUHJvdmlkZXI7XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtb2RlbCB7TW9kZWx9XG4gICAgICovXG4gICAgY29uc3RydWN0b3IobW9kZWw6IE1vZGVsLCBwcmVmc1Byb3ZpZGVyOiBQcmVmc1Byb3ZpZGVyKSB7XG4gICAgICAgIHN1cGVyKG1vZGVsKTtcblxuICAgICAgICB0aGlzLnByZWZzUHJvdmlkZXIgPSBwcmVmc1Byb3ZpZGVyO1xuICAgICAgICB0aGlzLmRvY0Zvcm1hdCA9IERvY0Zvcm1hdEZhY3RvcnkuZ2V0SW5zdGFuY2UoKTtcblxuICAgIH1cblxuICAgIHB1YmxpYyBzdGFydCgpIHtcblxuICAgICAgICB0aGlzLm1vZGVsLnJlZ2lzdGVyTGlzdGVuZXJGb3JEb2N1bWVudExvYWRlZChldmVudCA9PiB0aGlzLm9uRG9jdW1lbnRMb2FkZWQoZXZlbnQpKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIE1vdmVkIHRvIHBhZ2VtYXJrLlByb2dyZXNzVmlldy4uLiByZW1vdmUgdGhpcyBjb2RlLlxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVQcm9ncmVzcygpIHtcblxuICAgICAgICAvLyBUT0RPOiB0aGlzIHNob3VsZCBsaXN0ZW4gZGlyZWN0bHkgdG8gdGhlIG1vZGVsIGFuZCB0aGUgcGFnZW1hcmtzXG4gICAgICAgIC8vIHRoZW1zZWx2ZXMuXG5cbiAgICAgICAgY29uc3QgcGVyYyA9IHRoaXMuY29tcHV0ZVByb2dyZXNzKHRoaXMubW9kZWwuZG9jTWV0YSk7XG5cbiAgICAgICAgbG9nLmluZm8oXCJQZXJjZW50YWdlIGlzIG5vdzogXCIgKyBwZXJjKTtcblxuICAgICAgICBjb25zdCBoZWFkZXJFbGVtZW50ID0gPEhUTUxFbGVtZW50PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BvbGFyLWhlYWRlclwiKTtcblxuICAgICAgICBpZiAoaGVhZGVyRWxlbWVudCkge1xuICAgICAgICAgICAgaGVhZGVyRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByb2dyZXNzRWxlbWVudCA9IDxIVE1MUHJvZ3Jlc3NFbGVtZW50PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BvbGFyLXByb2dyZXNzIHByb2dyZXNzXCIpO1xuXG4gICAgICAgIHByb2dyZXNzRWxlbWVudC52YWx1ZSA9IHBlcmM7XG5cbiAgICAgICAgLy8gbm93IHVwZGF0ZSB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGRvYyBhdCB0aGUgYm90dG9tLlxuXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gRG9jTWV0YURlc2NyaWJlci5kZXNjcmliZSh0aGlzLm1vZGVsLmRvY01ldGEpO1xuXG4gICAgICAgIGNvbnN0IGRvY092ZXJ2aWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwb2xhci1kb2Mtb3ZlcnZpZXdcIik7XG5cbiAgICAgICAgaWYgKGRvY092ZXJ2aWV3KSB7XG4gICAgICAgICAgICBkb2NPdmVydmlldy50ZXh0Q29udGVudCA9IGRlc2NyaXB0aW9uO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBNb3ZlZCB0byBwYWdlbWFyay5Qcm9ncmVzc1ZpZXcuLi4gcmVtb3ZlIHRoaXMgY29kZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIGNvbXB1dGVQcm9ncmVzcyhkb2NNZXRhOiBEb2NNZXRhKSB7XG5cbiAgICAgICAgLy8gSSB0aGluayB0aGlzIGlzIGFuIGlzc3VlIG9mIGJlaW5nIGFzeW5jIG1heWJlbD9cblxuICAgICAgICBsZXQgdG90YWwgPSAwO1xuXG4gICAgICAgIGZvckRpY3QoZG9jTWV0YS5wYWdlTWV0YXMsIChrZXksIHBhZ2VNZXRhKSA9PiB7XG5cbiAgICAgICAgICAgIGZvckRpY3QocGFnZU1ldGEucGFnZW1hcmtzLCAoY29sdW1uLCBwYWdlbWFyaykgPT4ge1xuXG4gICAgICAgICAgICAgICAgdG90YWwgKz0gcGFnZW1hcmsucGVyY2VudGFnZTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcGVyYyA9IHRvdGFsIC8gKGRvY01ldGEuZG9jSW5mby5uclBhZ2VzICogMTAwKTtcblxuICAgICAgICByZXR1cm4gcGVyYztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXR1cCBhIGRvY3VtZW50IG9uY2Ugd2UgZGV0ZWN0IHRoYXQgYSBuZXcgb25lIGhhcyBiZWVuIGxvYWRlZC5cbiAgICAgKi9cbiAgICBwcml2YXRlIG9uRG9jdW1lbnRMb2FkZWQoZXZlbnQ6IERvY3VtZW50TG9hZGVkRXZlbnQpIHtcblxuICAgICAgICBjb25zdCBhdXRvUmVzdW1lXG4gICAgICAgICAgICA9IHRoaXMucHJlZnNQcm92aWRlci5nZXQoKS5pc01hcmtlZCgnc2V0dGluZ3MtYXV0by1yZXN1bWUnLCB0cnVlKTtcblxuICAgICAgICBjb25zdCBkb2NNZXRhID0gZXZlbnQuZG9jTWV0YTtcblxuICAgICAgICBsb2cuaW5mbyhcIldlYlZpZXcub25Eb2N1bWVudExvYWRlZDogXCIsIGRvY01ldGEpO1xuXG4gICAgICAgIHRoaXMudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgICAgdGhpcy5oYW5kbGVQcm9ncmVzc0RvdWJsZUNsaWNrKGRvY01ldGEpO1xuXG4gICAgICAgIGlmIChhdXRvUmVzdW1lKSB7XG4gICAgICAgICAgICBSZWFkaW5nUHJvZ3Jlc3NSZXN1bWUucmVzdW1lKGRvY01ldGEpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZVByb2dyZXNzRG91YmxlQ2xpY2soZG9jTWV0YTogRG9jTWV0YSkge1xuXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcG9sYXItaGVhZGVyXCIpIS5hZGRFdmVudExpc3RlbmVyKCdkYmxjbGljaycsICgpID0+IHtcblxuICAgICAgICAgICAgUmVhZGluZ1Byb2dyZXNzUmVzdW1lLnJlc3VtZShkb2NNZXRhKTtcblxuICAgICAgICB9KTtcblxuICAgIH1cblxufVxuXG5cbiJdfQ==