"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TestingTime_1 = require("../../test/TestingTime");
const assert = require('assert');
TestingTime_1.TestingTime.freeze();
describe('FlashcardsControllerTest', function () {
});
const FORM_DATA = {
    "back": "This is the back",
    "front": "This is the front"
};
const CARD_CREATOR_JSON = {
    "annotationType": "flashcard",
    "context": {
        "docDescriptor": {
            "fingerprint": "1rDeShSojg8migc4SsL4"
        },
        "matchingSelectors": {
            ".area-highlight": {
                "annotationDescriptors": [],
                "elements": [],
                "selector": ".area-highlight"
            },
            ".pagemark": {
                "annotationDescriptors": [],
                "elements": [],
                "selector": ".pagemark"
            },
            ".text-highlight": {
                "annotationDescriptors": [
                    {
                        "docFingerprint": "0x001",
                        "pageNum": 1,
                        "textHighlightId": "12pNUv1Y9S",
                        "type": "text-highlight"
                    }
                ],
                "elements": [
                    {}
                ],
                "selector": ".text-highlight"
            }
        }
    },
    "edit": false,
    "errorSchema": {},
    "errors": [],
    "flashcard": {
        "id": "9d146db1-7c31-4bcf-866b-7b485c4e50ea"
    },
    "formData": {
        "back": "This is the back",
        "front": "This is the front"
    },
    "idSchema": {
        "$id": "root",
        "back": {
            "$id": "root_back"
        },
        "front": {
            "$id": "root_front"
        }
    },
    "schema": {
        "description": "",
        "properties": {
            "back": {
                "title": "Back",
                "type": "string"
            },
            "front": {
                "title": "Front",
                "type": "string"
            }
        },
        "required": [
            "front",
            "back"
        ],
        "title": "Flashcard",
        "type": "object"
    },
    "status": "submitted",
    "uiSchema": {
        "back": {},
        "front": {}
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmxhc2hjYXJkc0NvbnRyb2xsZXJUZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRmxhc2hjYXJkc0NvbnRyb2xsZXJUZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsd0RBQW1EO0FBTW5ELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUVqQyx5QkFBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRXJCLFFBQVEsQ0FBQywwQkFBMEIsRUFBRTtBQW1DckMsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLFNBQVMsR0FBOEI7SUFDekMsTUFBTSxFQUFFLGtCQUFrQjtJQUMxQixPQUFPLEVBQUUsbUJBQW1CO0NBQy9CLENBQUM7QUFFRixNQUFNLGlCQUFpQixHQUFHO0lBQ3RCLGdCQUFnQixFQUFFLFdBQVc7SUFDN0IsU0FBUyxFQUFFO1FBQ1AsZUFBZSxFQUFFO1lBQ2IsYUFBYSxFQUFFLHNCQUFzQjtTQUN4QztRQUNELG1CQUFtQixFQUFFO1lBQ2pCLGlCQUFpQixFQUFFO2dCQUNmLHVCQUF1QixFQUFFLEVBQUU7Z0JBQzNCLFVBQVUsRUFBRSxFQUFFO2dCQUNkLFVBQVUsRUFBRSxpQkFBaUI7YUFDaEM7WUFDRCxXQUFXLEVBQUU7Z0JBQ1QsdUJBQXVCLEVBQUUsRUFBRTtnQkFDM0IsVUFBVSxFQUFFLEVBQUU7Z0JBQ2QsVUFBVSxFQUFFLFdBQVc7YUFDMUI7WUFDRCxpQkFBaUIsRUFBRTtnQkFDZix1QkFBdUIsRUFBRTtvQkFDckI7d0JBQ0ksZ0JBQWdCLEVBQUUsT0FBTzt3QkFDekIsU0FBUyxFQUFFLENBQUM7d0JBQ1osaUJBQWlCLEVBQUUsWUFBWTt3QkFDL0IsTUFBTSxFQUFFLGdCQUFnQjtxQkFDM0I7aUJBQ0o7Z0JBQ0QsVUFBVSxFQUFFO29CQUNSLEVBQUU7aUJBQ0w7Z0JBQ0QsVUFBVSxFQUFFLGlCQUFpQjthQUNoQztTQUNKO0tBQ0o7SUFDRCxNQUFNLEVBQUUsS0FBSztJQUNiLGFBQWEsRUFBRSxFQUFFO0lBQ2pCLFFBQVEsRUFBRSxFQUFFO0lBQ1osV0FBVyxFQUFFO1FBQ1QsSUFBSSxFQUFFLHNDQUFzQztLQUMvQztJQUNELFVBQVUsRUFBRTtRQUNSLE1BQU0sRUFBRSxrQkFBa0I7UUFDMUIsT0FBTyxFQUFFLG1CQUFtQjtLQUMvQjtJQUNELFVBQVUsRUFBRTtRQUNSLEtBQUssRUFBRSxNQUFNO1FBQ2IsTUFBTSxFQUFFO1lBQ0osS0FBSyxFQUFFLFdBQVc7U0FDckI7UUFDRCxPQUFPLEVBQUU7WUFDTCxLQUFLLEVBQUUsWUFBWTtTQUN0QjtLQUNKO0lBQ0QsUUFBUSxFQUFFO1FBQ04sYUFBYSxFQUFFLEVBQUU7UUFDakIsWUFBWSxFQUFFO1lBQ1YsTUFBTSxFQUFFO2dCQUNKLE9BQU8sRUFBRSxNQUFNO2dCQUNmLE1BQU0sRUFBRSxRQUFRO2FBQ25CO1lBQ0QsT0FBTyxFQUFFO2dCQUNMLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixNQUFNLEVBQUUsUUFBUTthQUNuQjtTQUNKO1FBQ0QsVUFBVSxFQUFFO1lBQ1IsT0FBTztZQUNQLE1BQU07U0FDVDtRQUNELE9BQU8sRUFBRSxXQUFXO1FBQ3BCLE1BQU0sRUFBRSxRQUFRO0tBQ25CO0lBQ0QsUUFBUSxFQUFFLFdBQVc7SUFDckIsVUFBVSxFQUFFO1FBQ1IsTUFBTSxFQUFFLEVBQUU7UUFDVixPQUFPLEVBQUUsRUFBRTtLQUNkO0NBQ0osQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Rmxhc2hjYXJkc0NvbnRyb2xsZXJ9IGZyb20gJy4vRmxhc2hjYXJkc0NvbnRyb2xsZXInO1xuaW1wb3J0IHtNb2RlbH0gZnJvbSAnLi4vLi4vbW9kZWwvTW9kZWwnO1xuaW1wb3J0IHtUZXN0aW5nVGltZX0gZnJvbSAnLi4vLi4vdGVzdC9UZXN0aW5nVGltZSc7XG5pbXBvcnQge01lbW9yeURhdGFzdG9yZX0gZnJvbSAnLi4vLi4vZGF0YXN0b3JlL01lbW9yeURhdGFzdG9yZSc7XG5pbXBvcnQge0RlZmF1bHRQZXJzaXN0ZW5jZUxheWVyfSBmcm9tICcuLi8uLi9kYXRhc3RvcmUvRGVmYXVsdFBlcnNpc3RlbmNlTGF5ZXInO1xuaW1wb3J0IHtEb2NNZXRhc30gZnJvbSAnLi4vLi4vbWV0YWRhdGEvRG9jTWV0YXMnO1xuaW1wb3J0IHtBZHZlcnRpc2luZ1BlcnNpc3RlbmNlTGF5ZXJ9IGZyb20gJy4uLy4uL2RhdGFzdG9yZS9hZHZlcnRpc2VyL0FkdmVydGlzaW5nUGVyc2lzdGVuY2VMYXllcic7XG5cbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuXG5UZXN0aW5nVGltZS5mcmVlemUoKTtcblxuZGVzY3JpYmUoJ0ZsYXNoY2FyZHNDb250cm9sbGVyVGVzdCcsIGZ1bmN0aW9uKCkge1xuICAgIC8vXG4gICAgLy8gLyoqXG4gICAgLy8gICovXG4gICAgLy8gbGV0IGZsYXNoY2FyZHNDb250cm9sbGVyOiBGbGFzaGNhcmRzQ29udHJvbGxlcjtcbiAgICAvLyBsZXQgbW9kZWw6IE1vZGVsO1xuICAgIC8vXG4gICAgLy8gYmVmb3JlRWFjaChmdW5jdGlvbihkb25lKSB7XG4gICAgLy9cbiAgICAvLyAgICAgLy8gbmVlZGVkIGJlY2F1c2UgYnkgZGVmYXVsdCBtb2NoYSB3b24ndCBwcmludCB0aGUgZXJyXG4gICAgLy8gICAgIChhc3luYyBmdW5jdGlvbigpIHtcbiAgICAvL1xuICAgIC8vICAgICAgICAgbGV0IG1lbW9yeURhdGFzdG9yZSA9IG5ldyBNZW1vcnlEYXRhc3RvcmUoKTtcbiAgICAvLyAgICAgICAgIGxldCBwZXJzaXN0ZW5jZUxheWVyID0gbmV3IEFkdmVydGlzaW5nUGVyc2lzdGVuY2VMYXllcihuZXcgRGVmYXVsdFBlcnNpc3RlbmNlTGF5ZXIobWVtb3J5RGF0YXN0b3JlKSk7XG4gICAgLy9cbiAgICAvLyAgICAgICAgIG1vZGVsID0gbmV3IE1vZGVsKHBlcnNpc3RlbmNlTGF5ZXIpO1xuICAgIC8vICAgICAgICAgZmxhc2hjYXJkc0NvbnRyb2xsZXIgPSBuZXcgRmxhc2hjYXJkc0NvbnRyb2xsZXIobW9kZWwpO1xuICAgIC8vXG4gICAgLy8gICAgICAgICAvLyBjcmVhdGUgc29tZSBmYWtlIERvY01ldGEgYW5kIHRyaWdnZXIgaXQgaW4gdGhlIG1vZGVsLi5EXG4gICAgLy9cbiAgICAvLyAgICAgICAgIGxldCBkb2NNZXRhID0gRG9jTWV0YXMuY3JlYXRlTW9ja0RvY01ldGEoKTtcbiAgICAvL1xuICAgIC8vICAgICAgICAgY29uc29sZS5sb2coXCJUZXN0aW5nIHdpdGggZG9jTWV0YTogXCIsIEpTT04uc3RyaW5naWZ5KGRvY01ldGEsIG51bGwsIFwiICBcIikpO1xuICAgIC8vXG4gICAgLy8gICAgICAgICBhd2FpdCBwZXJzaXN0ZW5jZUxheWVyLmluaXQoKTtcbiAgICAvL1xuICAgIC8vICAgICAgICAgYXdhaXQgcGVyc2lzdGVuY2VMYXllci5zeW5jRG9jTWV0YShkb2NNZXRhKTtcbiAgICAvL1xuICAgIC8vICAgICAgICAgYXdhaXQgbW9kZWwuZG9jdW1lbnRMb2FkZWQoZG9jTWV0YS5kb2NJbmZvLmZpbmdlcnByaW50LCBkb2NNZXRhLmRvY0luZm8ubnJQYWdlcywgMSk7XG4gICAgLy9cbiAgICAvLyAgICAgfSkoKS50aGVuKCgpPT4gZG9uZSgpKVxuICAgIC8vICAgICAgICAgLmNhdGNoKChlcnIpID0+IGRvbmUoZXJyKSk7XG4gICAgLy9cbiAgICAvLyB9KTtcblxufSk7XG5cbmNvbnN0IEZPUk1fREFUQToge1twYXRoOiBzdHJpbmddOiBzdHJpbmcgfSA9IHtcbiAgICBcImJhY2tcIjogXCJUaGlzIGlzIHRoZSBiYWNrXCIsXG4gICAgXCJmcm9udFwiOiBcIlRoaXMgaXMgdGhlIGZyb250XCJcbn07XG5cbmNvbnN0IENBUkRfQ1JFQVRPUl9KU09OID0ge1xuICAgIFwiYW5ub3RhdGlvblR5cGVcIjogXCJmbGFzaGNhcmRcIixcbiAgICBcImNvbnRleHRcIjoge1xuICAgICAgICBcImRvY0Rlc2NyaXB0b3JcIjoge1xuICAgICAgICAgICAgXCJmaW5nZXJwcmludFwiOiBcIjFyRGVTaFNvamc4bWlnYzRTc0w0XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtYXRjaGluZ1NlbGVjdG9yc1wiOiB7XG4gICAgICAgICAgICBcIi5hcmVhLWhpZ2hsaWdodFwiOiB7XG4gICAgICAgICAgICAgICAgXCJhbm5vdGF0aW9uRGVzY3JpcHRvcnNcIjogW10sXG4gICAgICAgICAgICAgICAgXCJlbGVtZW50c1wiOiBbXSxcbiAgICAgICAgICAgICAgICBcInNlbGVjdG9yXCI6IFwiLmFyZWEtaGlnaGxpZ2h0XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIi5wYWdlbWFya1wiOiB7XG4gICAgICAgICAgICAgICAgXCJhbm5vdGF0aW9uRGVzY3JpcHRvcnNcIjogW10sXG4gICAgICAgICAgICAgICAgXCJlbGVtZW50c1wiOiBbXSxcbiAgICAgICAgICAgICAgICBcInNlbGVjdG9yXCI6IFwiLnBhZ2VtYXJrXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIi50ZXh0LWhpZ2hsaWdodFwiOiB7XG4gICAgICAgICAgICAgICAgXCJhbm5vdGF0aW9uRGVzY3JpcHRvcnNcIjogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImRvY0ZpbmdlcnByaW50XCI6IFwiMHgwMDFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicGFnZU51bVwiOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZXh0SGlnaGxpZ2h0SWRcIjogXCIxMnBOVXYxWTlTXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0LWhpZ2hsaWdodFwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiZWxlbWVudHNcIjogW1xuICAgICAgICAgICAgICAgICAgICB7fVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJzZWxlY3RvclwiOiBcIi50ZXh0LWhpZ2hsaWdodFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiZWRpdFwiOiBmYWxzZSxcbiAgICBcImVycm9yU2NoZW1hXCI6IHt9LFxuICAgIFwiZXJyb3JzXCI6IFtdLFxuICAgIFwiZmxhc2hjYXJkXCI6IHtcbiAgICAgICAgXCJpZFwiOiBcIjlkMTQ2ZGIxLTdjMzEtNGJjZi04NjZiLTdiNDg1YzRlNTBlYVwiXG4gICAgfSxcbiAgICBcImZvcm1EYXRhXCI6IHtcbiAgICAgICAgXCJiYWNrXCI6IFwiVGhpcyBpcyB0aGUgYmFja1wiLFxuICAgICAgICBcImZyb250XCI6IFwiVGhpcyBpcyB0aGUgZnJvbnRcIlxuICAgIH0sXG4gICAgXCJpZFNjaGVtYVwiOiB7XG4gICAgICAgIFwiJGlkXCI6IFwicm9vdFwiLFxuICAgICAgICBcImJhY2tcIjoge1xuICAgICAgICAgICAgXCIkaWRcIjogXCJyb290X2JhY2tcIlxuICAgICAgICB9LFxuICAgICAgICBcImZyb250XCI6IHtcbiAgICAgICAgICAgIFwiJGlkXCI6IFwicm9vdF9mcm9udFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwic2NoZW1hXCI6IHtcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgXCJiYWNrXCI6IHtcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiQmFja1wiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJmcm9udFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkZyb250XCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgICAgICBcImZyb250XCIsXG4gICAgICAgICAgICBcImJhY2tcIlxuICAgICAgICBdLFxuICAgICAgICBcInRpdGxlXCI6IFwiRmxhc2hjYXJkXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXG4gICAgfSxcbiAgICBcInN0YXR1c1wiOiBcInN1Ym1pdHRlZFwiLFxuICAgIFwidWlTY2hlbWFcIjoge1xuICAgICAgICBcImJhY2tcIjoge30sXG4gICAgICAgIFwiZnJvbnRcIjoge31cbiAgICB9XG59XG4iXX0=