"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../../logger/Logger");
const Version_1 = require("../../util/Version");
const log = Logger_1.Logger.create();
const ALLOWED_ORIGIN = ['chrome-extension://nplbojledjdlbankapinifindadkdpnj',
    'chrome-extension://jkfdkjomocoaljglgddnmhcbolldcafd']
    .join(', ');
class MainAPI {
    constructor(mainAppController, webRequestHandler) {
        this.mainAppController = mainAppController;
        this.webRequestHandler = webRequestHandler;
    }
    start() {
        this.startCaptureTriggerHandler();
        this.startPingHandler();
    }
    startCaptureTriggerHandler() {
        const path = "/rest/v1/capture/trigger";
        this.webRequestHandler.options(path, (req, res) => {
            log.info("Handling OPTIONS request: ", req.headers);
            res.header('Access-Control-Allow-Origin', ALLOWED_ORIGIN);
            res.header('Access-Control-Allow-Headers', 'Content-Type');
            res.header('Access-Control-Allow-Methods', 'POST, OPTIONS');
            res.status(200).send({});
        });
        this.webRequestHandler.post(path, (req, res) => {
            log.info("Handling POST request for capture trigger: ", req.body);
            const captureOpts = req.body;
            res.status(200).send({});
            this.mainAppController.cmdCaptureWebPageWithBrowser(captureOpts)
                .catch(err => log.error("Unable to capture page: ", err));
        });
    }
    startPingHandler() {
        const path = "/rest/v1/ping";
        this.webRequestHandler.get(path, (req, res) => {
            res.header('Access-Control-Allow-Origin', ALLOWED_ORIGIN);
            const timestamp = Date.now();
            const version = Version_1.Version.get();
            const data = {
                timestamp,
                version
            };
            res.status(200).send(data);
        });
    }
}
exports.MainAPI = MainAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFpbkFQSS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIk1haW5BUEkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSxnREFBMkM7QUFHM0MsZ0RBQTJDO0FBRTNDLE1BQU0sR0FBRyxHQUFHLGVBQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUU1QixNQUFNLGNBQWMsR0FBRyxDQUFDLHFEQUFxRDtJQUNyRCxxREFBcUQsQ0FBRTtLQUN2RCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFbkMsTUFBYSxPQUFPO0lBTWhCLFlBQVksaUJBQW9DLEVBQUUsaUJBQW9DO1FBQ2xGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztRQUMzQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7SUFDL0MsQ0FBQztJQUVNLEtBQUs7UUFDUixJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztRQUNsQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRU8sMEJBQTBCO1FBRTlCLE1BQU0sSUFBSSxHQUFHLDBCQUEwQixDQUFDO1FBRXhDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBb0IsRUFBRSxHQUFxQixFQUFFLEVBQUU7WUFFakYsR0FBRyxDQUFDLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFLcEQsR0FBRyxDQUFDLE1BQU0sQ0FBQyw2QkFBNkIsRUFBRSxjQUFjLENBQUMsQ0FBQztZQUMxRCxHQUFHLENBQUMsTUFBTSxDQUFDLDhCQUE4QixFQUFFLGNBQWMsQ0FBQyxDQUFDO1lBQzNELEdBQUcsQ0FBQyxNQUFNLENBQUMsOEJBQThCLEVBQUUsZUFBZSxDQUFDLENBQUM7WUFFNUQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFN0IsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQW9CLEVBQUUsR0FBcUIsRUFBRSxFQUFFO1lBRTlFLEdBQUcsQ0FBQyxJQUFJLENBQUMsNkNBQTZDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRWxFLE1BQU0sV0FBVyxHQUEwQixHQUFHLENBQUMsSUFBSSxDQUFDO1lBRXBELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRXpCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyw0QkFBNEIsQ0FBQyxXQUFXLENBQUM7aUJBQzNELEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsMEJBQTBCLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUVsRSxDQUFDLENBQUMsQ0FBQztJQUVQLENBQUM7SUFPTyxnQkFBZ0I7UUFFcEIsTUFBTSxJQUFJLEdBQUcsZUFBZSxDQUFDO1FBRTdCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBb0IsRUFBRSxHQUFxQixFQUFFLEVBQUU7WUFFN0UsR0FBRyxDQUFDLE1BQU0sQ0FBQyw2QkFBNkIsRUFBRSxjQUFjLENBQUMsQ0FBQztZQUUxRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDN0IsTUFBTSxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUU5QixNQUFNLElBQUksR0FBRztnQkFDVCxTQUFTO2dCQUNULE9BQU87YUFDVixDQUFDO1lBRUYsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFL0IsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDO0NBR0o7QUE5RUQsMEJBOEVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQge0NhcHR1cmVPcHRzfSBmcm9tICcuLi8uLi9jYXB0dXJlL0NhcHR1cmVPcHRzJztcbmltcG9ydCB7V2ViUmVxdWVzdEhhbmRsZXJ9IGZyb20gJy4uLy4uL2JhY2tlbmQvd2Vic2VydmVyL1dlYnNlcnZlcic7XG5pbXBvcnQge0xvZ2dlcn0gZnJvbSAnLi4vLi4vbG9nZ2VyL0xvZ2dlcic7XG5pbXBvcnQge0NhcHR1cmV9IGZyb20gJy4uLy4uL2NhcHR1cmUvQ2FwdHVyZSc7XG5pbXBvcnQge01haW5BcHBDb250cm9sbGVyfSBmcm9tICcuL01haW5BcHBDb250cm9sbGVyJztcbmltcG9ydCB7VmVyc2lvbn0gZnJvbSAnLi4vLi4vdXRpbC9WZXJzaW9uJztcblxuY29uc3QgbG9nID0gTG9nZ2VyLmNyZWF0ZSgpO1xuXG5jb25zdCBBTExPV0VEX09SSUdJTiA9IFsnY2hyb21lLWV4dGVuc2lvbjovL25wbGJvamxlZGpkbGJhbmthcGluaWZpbmRhZGtkcG5qJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjaHJvbWUtZXh0ZW5zaW9uOi8vamtmZGtqb21vY29hbGpnbGdkZG5taGNib2xsZGNhZmQnIF1cbiAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJywgJyk7XG5cbmV4cG9ydCBjbGFzcyBNYWluQVBJIHtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgbWFpbkFwcENvbnRyb2xsZXI6IE1haW5BcHBDb250cm9sbGVyO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSB3ZWJSZXF1ZXN0SGFuZGxlcjogV2ViUmVxdWVzdEhhbmRsZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihtYWluQXBwQ29udHJvbGxlcjogTWFpbkFwcENvbnRyb2xsZXIsIHdlYlJlcXVlc3RIYW5kbGVyOiBXZWJSZXF1ZXN0SGFuZGxlcikge1xuICAgICAgICB0aGlzLm1haW5BcHBDb250cm9sbGVyID0gbWFpbkFwcENvbnRyb2xsZXI7XG4gICAgICAgIHRoaXMud2ViUmVxdWVzdEhhbmRsZXIgPSB3ZWJSZXF1ZXN0SGFuZGxlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhcnQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3RhcnRDYXB0dXJlVHJpZ2dlckhhbmRsZXIoKTtcbiAgICAgICAgdGhpcy5zdGFydFBpbmdIYW5kbGVyKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGFydENhcHR1cmVUcmlnZ2VySGFuZGxlcigpIHtcblxuICAgICAgICBjb25zdCBwYXRoID0gXCIvcmVzdC92MS9jYXB0dXJlL3RyaWdnZXJcIjtcblxuICAgICAgICB0aGlzLndlYlJlcXVlc3RIYW5kbGVyLm9wdGlvbnMocGF0aCwgKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UpID0+IHtcblxuICAgICAgICAgICAgbG9nLmluZm8oXCJIYW5kbGluZyBPUFRJT05TIHJlcXVlc3Q6IFwiLCByZXEuaGVhZGVycyk7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IHRoaXMgY2hyb21lIGV4dGVuc2lvbiBVUkwgd2lsbCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZSB3aGVuIHdlXG4gICAgICAgICAgICAvLyBwdXNoIGl0IHRvIHRoZSBhcHAgc3RvcmUgSSB0aGluay5cblxuICAgICAgICAgICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgQUxMT1dFRF9PUklHSU4pO1xuICAgICAgICAgICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycycsICdDb250ZW50LVR5cGUnKTtcbiAgICAgICAgICAgIHJlcy5oZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHMnLCAnUE9TVCwgT1BUSU9OUycpO1xuXG4gICAgICAgICAgICByZXMuc3RhdHVzKDIwMCkuc2VuZCh7fSk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy53ZWJSZXF1ZXN0SGFuZGxlci5wb3N0KHBhdGgsIChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlKSA9PiB7XG5cbiAgICAgICAgICAgIGxvZy5pbmZvKFwiSGFuZGxpbmcgUE9TVCByZXF1ZXN0IGZvciBjYXB0dXJlIHRyaWdnZXI6IFwiLCByZXEuYm9keSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNhcHR1cmVPcHRzID0gPFBhcnRpYWw8Q2FwdHVyZU9wdHM+PiByZXEuYm9keTtcblxuICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQoe30pO1xuXG4gICAgICAgICAgICB0aGlzLm1haW5BcHBDb250cm9sbGVyLmNtZENhcHR1cmVXZWJQYWdlV2l0aEJyb3dzZXIoY2FwdHVyZU9wdHMpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBsb2cuZXJyb3IoXCJVbmFibGUgdG8gY2FwdHVyZSBwYWdlOiBcIiwgZXJyKSk7XG5cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHNvIHRoYXQgdGhlIGNocm9tZSBleHRlbnNpb24gY2FuIHBpbmcgdGhlIGRlc2t0b3AgYXBwIHRvIHNlZSBpZlxuICAgICAqIGl0J3MgYWN0aXZlIHRvIGVuYWJsZS9kaXNhYmxlIHRoZSBzaGFyaW5nIG9wdGlvbnMuICBXZSB3b24ndCBzaG93IHRoZVxuICAgICAqIHNoYXJlIGJ1dHRvbiBpZiB0aGUgZGVza3RvcCBhcHAgaXNuJ3QgYWN0aXZlLlxuICAgICAqL1xuICAgIHByaXZhdGUgc3RhcnRQaW5nSGFuZGxlcigpIHtcblxuICAgICAgICBjb25zdCBwYXRoID0gXCIvcmVzdC92MS9waW5nXCI7XG5cbiAgICAgICAgdGhpcy53ZWJSZXF1ZXN0SGFuZGxlci5nZXQocGF0aCwgKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UpID0+IHtcblxuICAgICAgICAgICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgQUxMT1dFRF9PUklHSU4pO1xuXG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgY29uc3QgdmVyc2lvbiA9IFZlcnNpb24uZ2V0KCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgdGltZXN0YW1wLFxuICAgICAgICAgICAgICAgIHZlcnNpb25cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKGRhdGEpO1xuXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG5cbn1cbiJdfQ==