"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Reducers_1 = require("../../../util/Reducers");
const Filters_1 = require("../../../util/Filters");
class DOIs {
    static isDOI(value) {
        return value.match(/^10\.[^/]+\/[^/]+/g) !== null;
    }
    static prefixedDOI(value, prefix, newPrefix = "") {
        if (value.startsWith(prefix)) {
            value = newPrefix + value.substring(prefix.length);
            if (this.isDOI(value)) {
                return value;
            }
        }
        return undefined;
    }
    static parseDOI(value) {
        return [this.prefixedDOI(value, 'doi:10.', '10.'),
            this.prefixedDOI(value, 'http://dx.doi.org/10.', '10.'),
            this.prefixedDOI(value, 'https://dx.doi.org/10.', '10.'),
            this.prefixedDOI(value, 'http://doi.org/10.', '10.'),
            this.prefixedDOI(value, 'https://doi.org/10.', '10.')]
            .filter(Filters_1.Filters.PRESENT)
            .reduce(Reducers_1.Reducers.FIRST, undefined);
    }
    static toDOI(props) {
        return [props['crossmark:doi'],
            props['pdfx:doi'],
            props['prism:doi'],
            props['prism:url'],
            props['pdfx:wps-articledoi'],
            props['xap:identifier'],
            props['dc:identifer'],
            props['dc:title'],
            props['dc:description']]
            .filter(Filters_1.Filters.PRESENT)
            .map(current => this.parseDOI(current))
            .filter(Filters_1.Filters.PRESENT)
            .reduce(Reducers_1.Reducers.FIRST, undefined);
    }
}
exports.DOIs = DOIs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRE9Jcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkRPSXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxxREFBZ0Q7QUFDaEQsbURBQThDO0FBRTlDLE1BQWEsSUFBSTtJQUVMLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBYTtRQUM5QixPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsS0FBSyxJQUFJLENBQUM7SUFDdEQsQ0FBQztJQUVPLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBYSxFQUNiLE1BQWMsRUFDZCxZQUFvQixFQUFFO1FBRTdDLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMxQixLQUFLLEdBQUcsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRW5ELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDbkIsT0FBTyxLQUFLLENBQUM7YUFDaEI7U0FFSjtRQUVELE9BQU8sU0FBUyxDQUFDO0lBRXJCLENBQUM7SUFFTSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQWE7UUFFaEMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUM7WUFDekMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsdUJBQXVCLEVBQUUsS0FBSyxDQUFDO1lBQ3ZELElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLHdCQUF3QixFQUFFLEtBQUssQ0FBQztZQUN4RCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxvQkFBb0IsRUFBRSxLQUFLLENBQUM7WUFDcEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUscUJBQXFCLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDekQsTUFBTSxDQUFDLGlCQUFPLENBQUMsT0FBTyxDQUFDO2FBQ3ZCLE1BQU0sQ0FBQyxtQkFBUSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FDckM7SUFFTCxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFZO1FBRTVCLE9BQU8sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDO1lBQ3RCLEtBQUssQ0FBQyxVQUFVLENBQUM7WUFDakIsS0FBSyxDQUFDLFdBQVcsQ0FBQztZQUNsQixLQUFLLENBQUMsV0FBVyxDQUFDO1lBQ2xCLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQztZQUM1QixLQUFLLENBQUMsZ0JBQWdCLENBQUM7WUFDdkIsS0FBSyxDQUFDLGNBQWMsQ0FBQztZQUNyQixLQUFLLENBQUMsVUFBVSxDQUFDO1lBQ2pCLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2FBQzNCLE1BQU0sQ0FBQyxpQkFBTyxDQUFDLE9BQU8sQ0FBQzthQUN2QixHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3RDLE1BQU0sQ0FBQyxpQkFBTyxDQUFDLE9BQU8sQ0FBQzthQUN2QixNQUFNLENBQUMsbUJBQVEsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQ3JDO0lBRUwsQ0FBQztDQUVKO0FBdkRELG9CQXVEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UHJvcHN9IGZyb20gJy4vUERGTWV0YWRhdGEnO1xuaW1wb3J0IHtSZWR1Y2Vyc30gZnJvbSAnLi4vLi4vLi4vdXRpbC9SZWR1Y2Vycyc7XG5pbXBvcnQge0ZpbHRlcnN9IGZyb20gJy4uLy4uLy4uL3V0aWwvRmlsdGVycyc7XG5cbmV4cG9ydCBjbGFzcyBET0lzIHtcblxuICAgIHByaXZhdGUgc3RhdGljIGlzRE9JKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLm1hdGNoKC9eMTBcXC5bXi9dK1xcL1teL10rL2cpICE9PSBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIHByZWZpeGVkRE9JKHZhbHVlOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4OiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UHJlZml4OiBzdHJpbmcgPSBcIlwiKTogRE9JIHwgdW5kZWZpbmVkIHtcblxuICAgICAgICBpZiAodmFsdWUuc3RhcnRzV2l0aChwcmVmaXgpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG5ld1ByZWZpeCArIHZhbHVlLnN1YnN0cmluZyhwcmVmaXgubGVuZ3RoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNET0kodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBwYXJzZURPSSh2YWx1ZTogc3RyaW5nKTogRE9JIHwgdW5kZWZpbmVkIHtcblxuICAgICAgICByZXR1cm4gW3RoaXMucHJlZml4ZWRET0kodmFsdWUsICdkb2k6MTAuJywgJzEwLicpLFxuICAgICAgICAgICAgICAgIHRoaXMucHJlZml4ZWRET0kodmFsdWUsICdodHRwOi8vZHguZG9pLm9yZy8xMC4nLCAnMTAuJyksXG4gICAgICAgICAgICAgICAgdGhpcy5wcmVmaXhlZERPSSh2YWx1ZSwgJ2h0dHBzOi8vZHguZG9pLm9yZy8xMC4nLCAnMTAuJyksXG4gICAgICAgICAgICAgICAgdGhpcy5wcmVmaXhlZERPSSh2YWx1ZSwgJ2h0dHA6Ly9kb2kub3JnLzEwLicsICcxMC4nKSxcbiAgICAgICAgICAgICAgICB0aGlzLnByZWZpeGVkRE9JKHZhbHVlLCAnaHR0cHM6Ly9kb2kub3JnLzEwLicsICcxMC4nKV1cbiAgICAgICAgICAgIC5maWx0ZXIoRmlsdGVycy5QUkVTRU5UKVxuICAgICAgICAgICAgLnJlZHVjZShSZWR1Y2Vycy5GSVJTVCwgdW5kZWZpbmVkKVxuICAgICAgICA7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHRvRE9JKHByb3BzOiBQcm9wcyk6IERPSSB8IHVuZGVmaW5lZCB7XG5cbiAgICAgICAgcmV0dXJuIFtwcm9wc1snY3Jvc3NtYXJrOmRvaSddLFxuICAgICAgICAgICAgICAgIHByb3BzWydwZGZ4OmRvaSddLFxuICAgICAgICAgICAgICAgIHByb3BzWydwcmlzbTpkb2knXSxcbiAgICAgICAgICAgICAgICBwcm9wc1sncHJpc206dXJsJ10sXG4gICAgICAgICAgICAgICAgcHJvcHNbJ3BkZng6d3BzLWFydGljbGVkb2knXSxcbiAgICAgICAgICAgICAgICBwcm9wc1sneGFwOmlkZW50aWZpZXInXSxcbiAgICAgICAgICAgICAgICBwcm9wc1snZGM6aWRlbnRpZmVyJ10sXG4gICAgICAgICAgICAgICAgcHJvcHNbJ2RjOnRpdGxlJ10sXG4gICAgICAgICAgICAgICAgcHJvcHNbJ2RjOmRlc2NyaXB0aW9uJ11dXG4gICAgICAgICAgICAuZmlsdGVyKEZpbHRlcnMuUFJFU0VOVClcbiAgICAgICAgICAgIC5tYXAoY3VycmVudCA9PiB0aGlzLnBhcnNlRE9JKGN1cnJlbnQpKVxuICAgICAgICAgICAgLmZpbHRlcihGaWx0ZXJzLlBSRVNFTlQpXG4gICAgICAgICAgICAucmVkdWNlKFJlZHVjZXJzLkZJUlNULCB1bmRlZmluZWQpXG4gICAgICAgIDtcblxuICAgIH1cblxufVxuXG5leHBvcnQgdHlwZSBET0kgPSBzdHJpbmc7XG4iXX0=