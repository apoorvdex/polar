"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ReactSummernote = require('react-summernote');
const react_1 = __importDefault(require("react"));
class RichTextEditor extends react_1.default.Component {
    constructor(props = {}) {
        super(props);
    }
    onChange(content) {
        console.log('this', this);
        console.log('onChange', content);
    }
    onImageUpload(images, insertImage) {
        console.log('onImageUpload', images);
        for (let i = 0; i < images.length; i++) {
            const reader = new FileReader();
            reader.onloadend = () => {
                insertImage(reader.result);
            };
            reader.readAsDataURL(images[i]);
        }
    }
    ;
    render() {
        return (react_1.default.createElement(ReactSummernote, { value: "", options: {
                lang: 'en-US',
                height: 150,
                dialogsInBody: true,
            }, onChange: this.onChange, onImageUpload: this.onImageUpload }));
    }
}
exports.RichTextEditor = RichTextEditor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmljaFRleHRFZGl0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJSaWNoVGV4dEVkaXRvci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNwRCxrREFBeUM7QUFLekMsTUFBYSxjQUFlLFNBQVEsZUFBSyxDQUFDLFNBQVM7SUFFL0MsWUFBWSxLQUFLLEdBQUcsRUFBRTtRQUNsQixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakIsQ0FBQztJQUVELFFBQVEsQ0FBQyxPQUFZO1FBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxhQUFhLENBQUMsTUFBYSxFQUFFLFdBQXFCO1FBRTlDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXJDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBSXBDLE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7WUFFaEMsTUFBTSxDQUFDLFNBQVMsR0FBRyxHQUFHLEVBQUU7Z0JBQ3BCLFdBQVcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDL0IsQ0FBQyxDQUFDO1lBRUYsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQztJQUVMLENBQUM7SUFBQSxDQUFDO0lBRUYsTUFBTTtRQUtGLE9BQU8sQ0FDSCw4QkFBQyxlQUFlLElBQ1osS0FBSyxFQUFDLEVBQUUsRUFDUixPQUFPLEVBQUU7Z0JBQ0wsSUFBSSxFQUFFLE9BQU87Z0JBQ2IsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsYUFBYSxFQUFFLElBQUk7YUFVdEIsRUFDRCxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFDdkIsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhLEdBQ25DLENBQ0wsQ0FBQztJQUNOLENBQUM7Q0FDSjtBQXpERCx3Q0F5REMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjb25zdCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IFJlYWN0U3VtbWVybm90ZSA9IHJlcXVpcmUoJ3JlYWN0LXN1bW1lcm5vdGUnKTtcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG4vL2ltcG9ydCBSZWFjdFN1bW1lcm5vdGUgZnJvbSAnc3VtbWVybm90ZS1yZWFjdCc7XG5cbi8vaW1wb3J0IHtSZWFjdFN1bW1lcm5vdGV9IGZyb20gJ3JlYWN0LXN1bW1lcm5vdGUnO1xuXG5leHBvcnQgY2xhc3MgUmljaFRleHRFZGl0b3IgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMgPSB7fSkge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgfVxuXG4gICAgb25DaGFuZ2UoY29udGVudDogYW55KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzJywgdGhpcyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdvbkNoYW5nZScsIGNvbnRlbnQpO1xuICAgIH1cblxuICAgIG9uSW1hZ2VVcGxvYWQoaW1hZ2VzOiBhbnlbXSwgaW5zZXJ0SW1hZ2U6IEZ1bmN0aW9uKSB7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ29uSW1hZ2VVcGxvYWQnLCBpbWFnZXMpO1xuICAgICAgICAvKiBGaWxlTGlzdCBkb2VzIG5vdCBzdXBwb3J0IG9yZGluYXJ5IGFycmF5IG1ldGhvZHMgKi9cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8qIFN0b3JlcyBhcyBiYXM2NGVuYyBzdHJpbmcgaW4gdGhlIHRleHQuXG4gICAgICAgICAgICAgKiBTaG91bGQgcG90ZW50aWFsbHkgYmUgc3RvcmVkIHNlcGFyYXRlbHkgYW5kIGluY2x1ZGUganVzdCB0aGUgdXJsXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgICAgICAgICAgIHJlYWRlci5vbmxvYWRlbmQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0SW1hZ2UocmVhZGVyLnJlc3VsdCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChpbWFnZXNbaV0pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zdW1tZXJub3RlL3JlYWN0LXN1bW1lcm5vdGUvaXNzdWVzLzM4XG4gICAgICAgIC8vXG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxSZWFjdFN1bW1lcm5vdGVcbiAgICAgICAgICAgICAgICB2YWx1ZT1cIlwiXG4gICAgICAgICAgICAgICAgb3B0aW9ucz17e1xuICAgICAgICAgICAgICAgICAgICBsYW5nOiAnZW4tVVMnLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDE1MCxcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nc0luQm9keTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gdG9vbGJhcjogW1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgWydzdHlsZScsIFsnc3R5bGUnXV0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBbJ2ZvbnQnLCBbJ2JvbGQnLCAndW5kZXJsaW5lJywgJ2NsZWFyJ11dLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgWydmb250bmFtZScsIFsnZm9udG5hbWUnXV0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBbJ3BhcmEnLCBbJ3VsJywgJ29sJywgJ3BhcmFncmFwaCddXSxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIFsndGFibGUnLCBbJ3RhYmxlJ11dLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgWydpbnNlcnQnLCBbJ2xpbmsnLCAncGljdHVyZScsICd2aWRlbyddXSxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIFsndmlldycsIFsnZnVsbHNjcmVlbicsICdjb2RldmlldyddXVxuICAgICAgICAgICAgICAgICAgICAvLyBdXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX1cbiAgICAgICAgICAgICAgICBvbkltYWdlVXBsb2FkPXt0aGlzLm9uSW1hZ2VVcGxvYWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==