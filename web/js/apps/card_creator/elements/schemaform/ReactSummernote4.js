"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const JQuery_1 = __importDefault(require("../../../../ui/JQuery"));
require("bootstrap");
require("summernote/dist/summernote-bs4");
const react_1 = __importStar(require("react"));
const react_dom_1 = __importDefault(require("react-dom"));
const randomUid = () => Math.floor(Math.random() * 100000);
class ReactSummernote4 extends react_1.Component {
    constructor(props) {
        super(props);
        if (this.props.options.id) {
            this.uid = this.props.options.id;
        }
        else {
            this.uid = `react-summernote-${randomUid()}`;
        }
        this.editor = {};
        this.noteEditable = null;
        this.notePlaceholder = null;
        this.onInit = this.onInit.bind(this);
        this.onImageUpload = this.onImageUpload.bind(this);
        this.focus = this.focus.bind(this);
        this.isEmpty = this.isEmpty.bind(this);
        this.reset = this.reset.bind(this);
        this.replace = this.replace.bind(this);
        this.disable = this.disable.bind(this);
        this.enable = this.enable.bind(this);
        this.toggleState = this.toggleState.bind(this);
        this.insertImage = this.insertImage.bind(this);
        this.insertNode = this.insertNode.bind(this);
        this.insertText = this.insertText.bind(this);
        if (this.props.onRichTextMutator) {
            this.props.onRichTextMutator(this);
        }
    }
    componentDidMount() {
        const options = this.props.options || {};
        const codeview = this.props.codeview;
        options.callbacks = this.callbacks;
        const domNode = react_dom_1.default.findDOMNode(this);
        this.editor = JQuery_1.default(domNode).find(`#${this.uid}`);
        this.editor.summernote(options);
        if (codeview) {
            this.editor.summernote('codeview.activate');
        }
        if (options.airMode) {
            domNode.parentElement.addEventListener('click', () => {
                this.editor.summernote('focus');
            });
        }
        if (this.props.autofocus) {
            this.editor.summernote('focus');
        }
    }
    componentWillReceiveProps(nextProps) {
        const { props } = this;
        const codeview = nextProps.codeview;
        const codeviewCommand = codeview ? 'codeview.activate' : 'codeview.deactivate';
        if (typeof nextProps.value === 'string') {
            this.replace(nextProps.value);
        }
        if (typeof nextProps.disabled === 'boolean' && props.disabled !== nextProps.disabled) {
            this.toggleState(nextProps.disabled);
        }
        if (codeview !== props.codeview) {
            this.editor.summernote(codeviewCommand);
        }
        if (this.props.autofocus) {
            this.editor.summernote('focus');
        }
    }
    shouldComponentUpdate() {
        return false;
    }
    componentWillUnmount() {
        if (this.editor.summernote) {
            this.editor.summernote('destroy');
        }
    }
    onInit() {
        const { disabled, onInit } = this.props;
        const $container = this.editor.parent();
        this.noteEditable = $container.find('.note-editable');
        this.notePlaceholder = $container.find('.note-placeholder');
        if (typeof disabled === 'boolean') {
            this.toggleState(disabled);
        }
        if (typeof onInit === 'function') {
            onInit({
                summernote: this.editor.summernote.bind(this.editor),
                focus: this.focus,
                isEmpty: this.isEmpty,
                reset: this.reset,
                replace: this.replace,
                disable: this.disable,
                enable: this.enable,
                insertImage: this.insertImage,
                insertNode: this.insertNode,
                insertText: this.insertText
            });
        }
    }
    onImageUpload(images) {
        const { onImageUpload } = this.props;
        if (typeof onImageUpload === 'function') {
            onImageUpload(images, this.insertImage);
        }
    }
    focus() {
        this.editor.summernote('focus');
    }
    isEmpty() {
        return this.editor.summernote('isEmpty');
    }
    reset() {
        this.editor.summernote('reset');
    }
    replace(content) {
        const { noteEditable, notePlaceholder } = this;
        const prevContent = noteEditable.html();
        const contentLength = content.length;
        if (prevContent !== content) {
            if (this.isEmpty() && contentLength > 0) {
                notePlaceholder.hide();
            }
            else if (contentLength === 0) {
                notePlaceholder.show();
            }
            noteEditable.html(content);
        }
    }
    currentValue() {
        return this.noteEditable.html();
    }
    createRange() {
        return this.editor.summernote('createRange');
    }
    disable() {
        this.editor.summernote('disable');
    }
    enable() {
        this.editor.summernote('enable');
    }
    toggleState(disabled) {
        if (disabled) {
            this.disable();
        }
        else {
            this.enable();
        }
    }
    insertImage(url, filenameOrCallback) {
        this.editor.summernote('insertImage', url, filenameOrCallback);
    }
    insertNode(node) {
        this.editor.summernote('insertNode', node);
    }
    insertText(text) {
        this.editor.summernote('insertText', text);
    }
    get callbacks() {
        const props = this.props;
        return {
            onInit: this.onInit,
            onEnter: props.onEnter,
            onFocus: props.onFocus,
            onBlur: props.onBlur,
            onKeyup: props.onKeyUp,
            onKeydown: props.onKeyDown,
            onPaste: props.onPaste,
            onChange: props.onChange,
            onImageUpload: this.onImageUpload
        };
    }
    render() {
        const { value, defaultValue, className } = this.props;
        const html = value || defaultValue || "";
        return (react_1.default.createElement("div", { className: className },
            react_1.default.createElement("div", { id: this.uid, dangerouslySetInnerHTML: { __html: html } })));
    }
}
exports.ReactSummernote4 = ReactSummernote4;
//# sourceMappingURL=data:application/json;base64,