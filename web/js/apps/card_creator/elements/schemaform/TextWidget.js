"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ReactSummernote_1 = __importDefault(require("./ReactSummernote"));
const react_1 = __importDefault(require("react"));
const TypedWidgetProps_1 = require("./TypedWidgetProps");
const Logger_1 = require("../../../../logger/Logger");
const log = Logger_1.Logger.create();
class TextWidget extends react_1.default.Component {
    constructor(props = {}) {
        super(props);
        this.value = "";
        if (props.id) {
            this.id = props.id;
        }
        else {
            throw new Error("No ID");
        }
        this.onChangeCallback = props.onChange;
        this.onBlurCallback = props.onBlur;
        this.onFocusCallback = props.onFocus;
        this.typedWidgetProps = new TypedWidgetProps_1.TypedWidgetProps(props);
        if (this.typedWidgetProps.value) {
            this.value = this.typedWidgetProps.value;
        }
        this.onChange = this.onChange.bind(this);
        this.onImageUpload = this.onImageUpload.bind(this);
        this.onBlur = this.onBlur.bind(this);
        this.onFocus = this.onFocus.bind(this);
    }
    onChange(newValue) {
        console.log('onChange: newValue: ', newValue);
        log.debug('onChange', newValue);
        this.value = newValue;
        this.onChangeCallback(newValue);
    }
    onBlur() {
        log.info("onBlur");
        this.onBlurCallback(this.id, this.value);
    }
    onFocus() {
        log.info("onFocus");
        this.onFocusCallback(this.id, this.value);
    }
    onImageUpload(images, insertImage) {
        log.debug('onImageUpload', images);
        for (let i = 0; i < images.length; i++) {
            const reader = new FileReader();
            reader.onloadend = () => {
                insertImage(reader.result);
            };
            reader.readAsDataURL(images[i]);
        }
    }
    ;
    render() {
        return (react_1.default.createElement(ReactSummernote_1.default, { value: "", options: {
                id: this.typedWidgetProps.id,
                lang: 'en-US',
                height: 280,
                dialogsInBody: false,
                toolbar: [
                    ['style', ['style']],
                    ['font', ['bold', 'italic', 'underline', 'clear', 'color', 'superscript', 'subscript']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['table', ['table']],
                    ['insert', ['link', 'picture', 'video']],
                    ['view', []]
                ]
            }, onChange: this.onChange, onBlur: this.onBlur, onFocus: this.onFocus, onImageUpload: this.onImageUpload }));
    }
}
exports.TextWidget = TextWidget;
//# sourceMappingURL=data:application/json;base64,