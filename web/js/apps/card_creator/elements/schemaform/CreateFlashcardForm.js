"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const FormHandler_1 = require("./FormHandler");
require("bootstrap/dist/js/bootstrap.bundle.js");
const react_1 = __importDefault(require("react"));
const react_dom_1 = require("react-dom");
const react_jsonschema_form_1 = __importDefault(require("react-jsonschema-form"));
const SchemaUIFactory_1 = require("./SchemaUIFactory");
const SchemaFactory_1 = require("./SchemaFactory");
const react_dom_2 = __importDefault(require("react-dom"));
global.$ = global.jQuery = require("jquery");
require('summernote/dist/summernote-bs4');
class CreateFlashcardForm {
    constructor(targetElement) {
        this.formHandler = new FormHandler_1.FormHandler();
        this.targetElement = targetElement;
        this.render();
    }
    render() {
        react_dom_2.default.unmountComponentAtNode(this.targetElement);
        let schema = SchemaFactory_1.SchemaFactory.create();
        let schemaUI = SchemaUIFactory_1.SchemaUIFactory.create();
        if (!this.targetElement) {
            throw new Error("No schemaFormElement");
        }
        if (!schema) {
            throw new Error("No schema");
        }
        let onChangeCallback = () => (data) => { return this.formHandler.onChange(data); };
        let onSubmitCallback = () => (data) => { return this.formHandler.onSubmit(data); };
        let onErrorCallback = () => (data) => { return this.formHandler.onError(data); };
        let form = react_1.default.createElement(react_jsonschema_form_1.default, { schema: schema, autocomplete: "off", uiSchema: schemaUI, showErrorList: false, onChange: onChangeCallback(), onSubmit: onSubmitCallback(), onError: onErrorCallback() });
        react_dom_1.render((form), this.targetElement);
    }
}
exports.CreateFlashcardForm = CreateFlashcardForm;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3JlYXRlRmxhc2hjYXJkRm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNyZWF0ZUZsYXNoY2FyZEZvcm0udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsK0NBQTBDO0FBQzFDLGlEQUErQztBQUUvQyxrREFBeUI7QUFDekIseUNBQWlDO0FBRWpDLGtGQUF5QztBQUN6Qyx1REFBa0Q7QUFDbEQsbURBQThDO0FBQzlDLDBEQUFpQztBQUdqQyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRzdDLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBSzFDLE1BQWEsbUJBQW1CO0lBVTVCLFlBQVksYUFBMEI7UUFKL0IsZ0JBQVcsR0FBZ0IsSUFBSSx5QkFBVyxFQUFFLENBQUM7UUFNaEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFFbkMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBRWxCLENBQUM7SUFFRCxNQUFNO1FBSUYsbUJBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFcEQsSUFBSSxNQUFNLEdBQWdCLDZCQUFhLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDakQsSUFBSSxRQUFRLEdBQUcsaUNBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUV4QyxJQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7U0FDM0M7UUFFRCxJQUFHLENBQUMsTUFBTSxFQUFFO1lBQ1IsTUFBTSxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNoQztRQUVELElBQUksZ0JBQWdCLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRSxHQUFHLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUM7UUFDdkYsSUFBSSxnQkFBZ0IsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFLEdBQUcsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQztRQUN2RixJQUFJLGVBQWUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFLEdBQUcsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQztRQUVyRixJQUFJLElBQUksR0FBRyw4QkFBQywrQkFBSSxJQUFDLE1BQU0sRUFBRSxNQUFNLEVBQ2QsWUFBWSxFQUFDLEtBQUssRUFDbEIsUUFBUSxFQUFFLFFBQVEsRUFDbEIsYUFBYSxFQUFFLEtBQUssRUFDcEIsUUFBUSxFQUFFLGdCQUFnQixFQUFFLEVBQzVCLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxFQUM1QixPQUFPLEVBQUUsZUFBZSxFQUFFLEdBQUksQ0FBQztRQUVoRCxrQkFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRXZDLENBQUM7Q0FFSjtBQW5ERCxrREFtREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Zvcm1IYW5kbGVyfSBmcm9tICcuL0Zvcm1IYW5kbGVyJztcbmltcG9ydCAnYm9vdHN0cmFwL2Rpc3QvanMvYm9vdHN0cmFwLmJ1bmRsZS5qcyc7XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7cmVuZGVyfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHtKU09OU2NoZW1hNn0gZnJvbSAnanNvbi1zY2hlbWEnO1xuaW1wb3J0IEZvcm0gZnJvbSAncmVhY3QtanNvbnNjaGVtYS1mb3JtJztcbmltcG9ydCB7U2NoZW1hVUlGYWN0b3J5fSBmcm9tICcuL1NjaGVtYVVJRmFjdG9yeSc7XG5pbXBvcnQge1NjaGVtYUZhY3Rvcnl9IGZyb20gJy4vU2NoZW1hRmFjdG9yeSc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcblxuZGVjbGFyZSB2YXIgZ2xvYmFsOiBhbnk7XG5nbG9iYWwuJCA9IGdsb2JhbC5qUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpO1xuXG4vLyBUT0RPOiB0aGlzIHNob3VsZCBtb3ZlIHRvIHRoZSBzdW1tZXJmb3JtIHNwZWNpZmljIHdpZGdldFxucmVxdWlyZSgnc3VtbWVybm90ZS9kaXN0L3N1bW1lcm5vdGUtYnM0Jyk7XG5cbi8qKlxuICogQ29kZSB0byBhY2NlcHQgbmV3IGlucHV0IGZvciBmbGFzaGNhcmRzLCBub3RlcywgY29tbWVudHMsIGV0Yy5cbiAqL1xuZXhwb3J0IGNsYXNzIENyZWF0ZUZsYXNoY2FyZEZvcm0ge1xuXG4gICAgLyoqXG4gICAgICogVGhlIEZvcm1IYW5kbGVyIHdlJ3JlIGdvaW5nIHRvIHVzZS4gIFdlIGhhdmUgdG8gY2hhbmdlIGl0IHdoZW4gd2UgZ2V0XG4gICAgICogYSBuZXcgY3JlYXRlIGZsYXNoY2FyZCByZXF1ZXN0LlxuICAgICAqL1xuICAgIHB1YmxpYyBmb3JtSGFuZGxlcjogRm9ybUhhbmRsZXIgPSBuZXcgRm9ybUhhbmRsZXIoKTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgdGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXRFbGVtZW50OiBIVE1MRWxlbWVudCkge1xuXG4gICAgICAgIHRoaXMudGFyZ2V0RWxlbWVudCA9IHRhcmdldEVsZW1lbnQ7XG5cbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcblxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICAvLyB0aGlzIGFsbG93cyB1cyB0byBoYXZlIGEgZnJlc2ggZm9ybSBlYWNoIHRpbWUuIEl0IHNlZW1zIHZlcnkgZmFzdCBhbmRcbiAgICAgICAgLy8gdGhlcmUgYXBwZWFycyB0byBiZSBubyBsYWcgb3IgaXNzdWUgd2l0aCBkb2luZyB0aGlzLlxuICAgICAgICBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKHRoaXMudGFyZ2V0RWxlbWVudCk7XG5cbiAgICAgICAgbGV0IHNjaGVtYTogSlNPTlNjaGVtYTYgPSBTY2hlbWFGYWN0b3J5LmNyZWF0ZSgpO1xuICAgICAgICBsZXQgc2NoZW1hVUkgPSBTY2hlbWFVSUZhY3RvcnkuY3JlYXRlKCk7XG5cbiAgICAgICAgaWYoIXRoaXMudGFyZ2V0RWxlbWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc2NoZW1hRm9ybUVsZW1lbnRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZighc2NoZW1hKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzY2hlbWFcIik7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgb25DaGFuZ2VDYWxsYmFjayA9ICgpID0+IChkYXRhOiBhbnkpID0+IHsgcmV0dXJuIHRoaXMuZm9ybUhhbmRsZXIub25DaGFuZ2UoZGF0YSkgfTtcbiAgICAgICAgbGV0IG9uU3VibWl0Q2FsbGJhY2sgPSAoKSA9PiAoZGF0YTogYW55KSA9PiB7IHJldHVybiB0aGlzLmZvcm1IYW5kbGVyLm9uU3VibWl0KGRhdGEpIH07XG4gICAgICAgIGxldCBvbkVycm9yQ2FsbGJhY2sgPSAoKSA9PiAoZGF0YTogYW55KSA9PiB7IHJldHVybiB0aGlzLmZvcm1IYW5kbGVyLm9uRXJyb3IoZGF0YSkgfTtcblxuICAgICAgICBsZXQgZm9ybSA9IDxGb3JtIHNjaGVtYT17c2NoZW1hfVxuICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZT1cIm9mZlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgdWlTY2hlbWE9e3NjaGVtYVVJfVxuICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dFcnJvckxpc3Q9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZUNhbGxiYWNrKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgb25TdWJtaXQ9e29uU3VibWl0Q2FsbGJhY2soKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yPXtvbkVycm9yQ2FsbGJhY2soKX0gLz47XG5cbiAgICAgICAgcmVuZGVyKChmb3JtKSwgdGhpcy50YXJnZXRFbGVtZW50KTtcblxuICAgIH1cblxufVxuIl19