"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TriggerEvent_1 = require("../TriggerEvent");
const electron_1 = require("electron");
const Logger_1 = require("../../logger/Logger");
const Arrays_1 = require("../../util/Arrays");
const Broadcaster_1 = require("../../ipc/Broadcaster");
const Preconditions_1 = require("../../Preconditions");
const ContextMenuType_1 = require("../ContextMenuType");
const AnnotationSidebarClient_1 = require("../../annotation_sidebar/AnnotationSidebarClient");
const PagemarkModes_1 = require("../../metadata/PagemarkModes");
const ContextMenuMessages_1 = require("../ContextMenuMessages");
const log = Logger_1.Logger.create();
class ElectronContextMenu {
    constructor() {
        electron_1.ipcMain.on('context-menu-trigger', (event, message) => {
            const triggerEvent = TriggerEvent_1.TriggerEvent.create(message);
            this.trigger(triggerEvent, event.sender);
        });
        new Broadcaster_1.Broadcaster('create-annotation');
    }
    trigger(triggerEvent, sender) {
        Preconditions_1.Preconditions.assertNotNull(sender, "sender");
        const window = electron_1.BrowserWindow.getFocusedWindow();
        const ctxMenu = this.createContextMenu(triggerEvent, sender);
        ctxMenu.popup({
            window
        });
    }
    cmdNotify(command, triggerEvent, sender) {
        const event = {
            command,
            matchingSelectors: triggerEvent.matchingSelectors,
            docDescriptor: triggerEvent.docDescriptor
        };
        sender.send("context-menu-command", event);
    }
    createContextMenu(triggerEvent, sender) {
        Preconditions_1.Preconditions.assertNotNull(sender, "sender");
        const contextMenus = [];
        if (triggerEvent.contextMenuTypes.includes(ContextMenuType_1.ContextMenuType.PAGE)) {
            contextMenus.push(this.createPageContextMenu(triggerEvent, sender));
        }
        if (triggerEvent.contextMenuTypes.includes(ContextMenuType_1.ContextMenuType.TEXT_HIGHLIGHT)) {
            contextMenus.push(this.createTextHighlightContextMenu(triggerEvent, sender));
        }
        if (triggerEvent.contextMenuTypes.includes(ContextMenuType_1.ContextMenuType.AREA_HIGHLIGHT)) {
            contextMenus.push(this.createAreaHighlightContextMenu(triggerEvent, sender));
        }
        if (triggerEvent.contextMenuTypes.includes(ContextMenuType_1.ContextMenuType.PAGEMARK)) {
            contextMenus.push(this.createPagemarkContextMenu(triggerEvent, sender));
        }
        contextMenus.push(this.createDefaultContextMenu(triggerEvent, sender));
        const ctxMenu = new electron_1.Menu();
        Arrays_1.Arrays.createSiblings(contextMenus).forEach(contextMenuCursor => {
            contextMenuCursor.curr.items.forEach(menuItem => {
                ctxMenu.append(menuItem);
            });
            if (contextMenuCursor.curr.items.length > 0 && contextMenuCursor.next) {
                ctxMenu.append(new electron_1.MenuItem({
                    type: 'separator'
                }));
            }
        });
        return ctxMenu;
    }
    createTextHighlightContextMenu(triggerEvent, sender) {
        const ctxMenu = new electron_1.Menu();
        ctxMenu.append(this.createSubmenu('Text Highlight', [
            new electron_1.MenuItem({
                label: 'Delete',
                click: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("delete-text-highlight", triggerEvent)
            })
        ]));
        return ctxMenu;
    }
    createAreaHighlightContextMenu(triggerEvent, sender) {
        const ctxMenu = new electron_1.Menu();
        ctxMenu.append(this.createSubmenu('Area Highlight', [
            new electron_1.MenuItem({
                label: 'Delete',
                click: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("delete-area-highlight", triggerEvent)
            })
        ]));
        return ctxMenu;
    }
    createPagemarkContextMenu(triggerEvent, sender) {
        const ctxMenu = new electron_1.Menu();
        const createModeSubmenuItems = () => {
            return PagemarkModes_1.PagemarkModes.toDescriptors().map(current => {
                return new electron_1.MenuItem({
                    label: current.title,
                    click: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("set-pagemark-mode-" + current.key, triggerEvent)
                });
            });
        };
        ctxMenu.append(this.createSubmenu('Pagemark', [
            this.createSubmenu('Mode ...', createModeSubmenuItems()),
            new electron_1.MenuItem({
                label: 'Delete Pagemark',
                click: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("delete-pagemark", triggerEvent)
            })
        ]));
        return ctxMenu;
    }
    createPageContextMenu(triggerEvent, sender) {
        const ctxMenu = new electron_1.Menu();
        ctxMenu.append(new electron_1.MenuItem({
            label: 'Create Pagemark to Point',
            click: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("create-pagemark-to-point", triggerEvent)
        }));
        ctxMenu.append(new electron_1.MenuItem({
            label: 'Create Pagemark Box',
            click: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("create-pagemark", triggerEvent)
        }));
        ctxMenu.append(new electron_1.MenuItem({
            label: 'Create Area Highlight',
            click: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("create-area-highlight", triggerEvent)
        }));
        return ctxMenu;
    }
    createDefaultContextMenu(triggerEvent, sender) {
        const ctxMenu = new electron_1.Menu();
        ctxMenu.append(new electron_1.MenuItem({
            label: 'Toggle Annotation Sidebar',
            id: "toggle-annotation-sidebar",
            click: () => AnnotationSidebarClient_1.AnnotationSidebarClient.toggleAnnotationSidebar()
        }));
        ctxMenu.append(new electron_1.MenuItem({
            label: 'Inspect Element',
            id: "inspect",
            click: event => {
                const window = electron_1.BrowserWindow.getFocusedWindow();
                if (!window) {
                    throw new Error("No current window");
                }
                window.webContents.inspectElement(triggerEvent.point.x, triggerEvent.point.y);
                if (window.webContents.isDevToolsOpened()) {
                    window.webContents.devToolsWebContents.focus();
                }
            }
        }));
        return ctxMenu;
    }
    createSubmenu(label, menuItems) {
        const submenu = new electron_1.Menu();
        const submenuItem = new electron_1.MenuItem({
            label,
            type: 'submenu',
            submenu
        });
        menuItems.forEach(menuItem => {
            submenu.append(menuItem);
        });
        return submenuItem;
    }
}
exports.ElectronContextMenu = ElectronContextMenu;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWxlY3Ryb25Db250ZXh0TWVudS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkVsZWN0cm9uQ29udGV4dE1lbnUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrREFBNkM7QUFDN0MsdUNBQTZFO0FBQzdFLGdEQUEyQztBQUMzQyw4Q0FBeUM7QUFDekMsdURBQWtEO0FBQ2xELHVEQUFrRDtBQUNsRCx3REFBbUQ7QUFDbkQsOEZBQXlGO0FBQ3pGLGdFQUEyRDtBQUMzRCxnRUFBMkQ7QUFHM0QsTUFBTSxHQUFHLEdBQUcsZUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBUzVCLE1BQWEsbUJBQW1CO0lBRTVCO1FBR0ksa0JBQU8sQ0FBQyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxLQUFxQixFQUFFLE9BQVksRUFBRSxFQUFFO1lBRXZFLE1BQU0sWUFBWSxHQUFHLDJCQUFZLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRWxELElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU3QyxDQUFDLENBQUMsQ0FBQztRQUdILElBQUkseUJBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBRXpDLENBQUM7SUFPTSxPQUFPLENBQUMsWUFBMEIsRUFBRSxNQUFtQjtRQUUxRCw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFOUMsTUFBTSxNQUFNLEdBQUcsd0JBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBRWhELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFNN0QsT0FBTyxDQUFDLEtBQUssQ0FBZ0I7WUFDekIsTUFBTTtTQUNULENBQUMsQ0FBQztJQUVQLENBQUM7SUFVTyxTQUFTLENBQUMsT0FBZSxFQUFFLFlBQTBCLEVBQUUsTUFBbUI7UUFJOUUsTUFBTSxLQUFL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QixLQUFLLEVBQUUsaUJBQWlCO1lBQ3hCLEVBQUUsRUFBRSxTQUFTO1lBRWIsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFO2dCQUVYLE1BQU0sTUFBTSxHQUFHLHdCQUFhLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztnQkFFaEQsSUFBSSxDQUFFLE1BQU0sRUFBRTtvQkFDVixNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7aUJBQ3hDO2dCQUlELE1BQU0sQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRTlFLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO29CQUN2QyxNQUFNLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUNsRDtZQUVMLENBQUM7U0FFSixDQUFDLENBQUMsQ0FBQztRQUdKLE9BQU8sT0FBTyxDQUFDO0lBRW5CLENBQUM7SUFFTSxhQUFhLENBQUMsS0FBYSxFQUFFLFNBQXFCO1FBRXJELE1BQU0sT0FBTyxHQUFHLElBQUksZUFBSSxFQUFFLENBQUM7UUFFM0IsTUFBTSxXQUFXLEdBQUcsSUFBSSxtQkFBUSxDQUFDO1lBQzdCLEtBQUs7WUFDTCxJQUFJLEVBQUUsU0FBUztZQUNmLE9BQU87U0FDVixDQUFDLENBQUM7UUFFSCxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLFdBQVcsQ0FBQztJQUV2QixDQUFDO0NBRUo7QUE1VUQsa0RBNFVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUcmlnZ2VyRXZlbnR9IGZyb20gJy4uL1RyaWdnZXJFdmVudCc7XG5pbXBvcnQge0Jyb3dzZXJXaW5kb3csIGlwY01haW4sIE1lbnUsIE1lbnVJdGVtLCBXZWJDb250ZW50c30gZnJvbSAnZWxlY3Ryb24nO1xuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJy4uLy4uL2xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0IHtBcnJheXN9IGZyb20gJy4uLy4uL3V0aWwvQXJyYXlzJztcbmltcG9ydCB7QnJvYWRjYXN0ZXJ9IGZyb20gJy4uLy4uL2lwYy9Ccm9hZGNhc3Rlcic7XG5pbXBvcnQge1ByZWNvbmRpdGlvbnN9IGZyb20gJy4uLy4uL1ByZWNvbmRpdGlvbnMnO1xuaW1wb3J0IHtDb250ZXh0TWVudVR5cGV9IGZyb20gJy4uL0NvbnRleHRNZW51VHlwZSc7XG5pbXBvcnQge0Fubm90YXRpb25TaWRlYmFyQ2xpZW50fSBmcm9tICcuLi8uLi9hbm5vdGF0aW9uX3NpZGViYXIvQW5ub3RhdGlvblNpZGViYXJDbGllbnQnO1xuaW1wb3J0IHtQYWdlbWFya01vZGVzfSBmcm9tICcuLi8uLi9tZXRhZGF0YS9QYWdlbWFya01vZGVzJztcbmltcG9ydCB7Q29udGV4dE1lbnVNZXNzYWdlc30gZnJvbSAnLi4vQ29udGV4dE1lbnVNZXNzYWdlcyc7XG5pbXBvcnQgUG9wdXBPcHRpb25zID0gRWxlY3Ryb24uUG9wdXBPcHRpb25zO1xuXG5jb25zdCBsb2cgPSBMb2dnZXIuY3JlYXRlKCk7XG5cbi8qKlxuICogQ2FyZWZ1bCBoZXJlIGFzIHRoaXMgaXMgY29uZnVzaW5nLiAgV2UncmUgdXNpbmcgdGhlIFJFTU9WRSBpbnRlcmZhY2Ugc28gdGhlXG4gKiBjb250ZXh0IGNoYW5nZXMuIFRoaXMgY29kZSBpcyB0cmlnZ2VyZWQgZnJvbSB0aGUgcmVuZGVyZXIgYnV0IHRoZW4gcnVuc1xuICogaW4gdGhlIG1haW4gcHJvY2Vzcy5cbiAqXG4gKiBARWxlY3Ryb25NYWluQ29udGV4dFxuICovXG5leHBvcnQgY2xhc3MgRWxlY3Ryb25Db250ZXh0TWVudSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcblxuICAgICAgICAvLyBUT0RPOiBtb3ZlIHRoaXMgdG8gYSBzdGFydCBtZXRob2QuXG4gICAgICAgIGlwY01haW4ub24oJ2NvbnRleHQtbWVudS10cmlnZ2VyJywgKGV2ZW50OiBFbGVjdHJvbi5FdmVudCwgbWVzc2FnZTogYW55KSA9PiB7XG5cbiAgICAgICAgICAgIGNvbnN0IHRyaWdnZXJFdmVudCA9IFRyaWdnZXJFdmVudC5jcmVhdGUobWVzc2FnZSk7XG5cbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcih0cmlnZ2VyRXZlbnQsIGV2ZW50LnNlbmRlcik7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gbm9pbnNwZWN0aW9uIFRzTGludDogbm8tdW51c2VkLWV4cHJlc3Npb25cbiAgICAgICAgbmV3IEJyb2FkY2FzdGVyKCdjcmVhdGUtYW5ub3RhdGlvbicpO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHJpZ2dlckV2ZW50IHtUcmlnZ2VyRXZlbnR9XG4gICAgICogQHBhcmFtIHNlbmRlclxuICAgICAqL1xuICAgIHB1YmxpYyB0cmlnZ2VyKHRyaWdnZXJFdmVudDogVHJpZ2dlckV2ZW50LCBzZW5kZXI6IFdlYkNvbnRlbnRzKSB7XG5cbiAgICAgICAgUHJlY29uZGl0aW9ucy5hc3NlcnROb3ROdWxsKHNlbmRlciwgXCJzZW5kZXJcIik7XG5cbiAgICAgICAgY29uc3Qgd2luZG93ID0gQnJvd3NlcldpbmRvdy5nZXRGb2N1c2VkV2luZG93KCk7XG5cbiAgICAgICAgY29uc3QgY3R4TWVudSA9IHRoaXMuY3JlYXRlQ29udGV4dE1lbnUodHJpZ2dlckV2ZW50LCBzZW5kZXIpO1xuXG4gICAgICAgIC8vIFRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGlzIGxvb2tzIHdyb25nIGFuZCBpdCBhY3R1YWxseSB0YWtlcyB0aHJlZVxuICAgICAgICAvLyBhcmd1bWVudHMgbm90IGEgb2JqZWN0LiBOb3RlIHRoYXQgd2Ugc2hvdWxkIE5PVCBpbmNsdWRlIHRoZSBtb3VzZVxuICAgICAgICAvLyBwb2ludCBhcyBieSBkZWZhdWx0IGl0IHVzZXMgdGhlIG1vdXNlIHBvaW50IGFueXdheSB3aGljaCBpcyBhbG1vc3RcbiAgICAgICAgLy8gYWx3YXlzIHdoYXQgd2Ugd2FudC5cbiAgICAgICAgY3R4TWVudS5wb3B1cCg8UG9wdXBPcHRpb25zPiB7XG4gICAgICAgICAgICB3aW5kb3dcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kIHRoZSBhbm5vdGF0aW9uIEJBQ0sgdG8gdGhlIHNlbmRlciB3aXRoIHRoZSBzcGVjaWZpYyBhY3Rpb25zIHRvIHRha2UuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBNb3ZlIHRvIHBvc3RDb250ZXh0TWVudU1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gY29tbWFuZFxuICAgICAqIEBwYXJhbSB0cmlnZ2VyRXZlbnRcbiAgICAgKiBAcGFyYW0gc2VuZGVyXG4gICAgICovXG4gICAgcHJpdmF0ZSBjbWROb3RpZnkoY29tbWFuZDogc3RyaW5nLCB0cmlnZ2VyRXZlbnQ6IFRyaWdnZXJFdmVudCwgc2VuZGVyOiBXZWJDb250ZW50cykge1xuXG4gICAgICAgIC8vIHdlJ3JlIHNlbmRpbmcgYmFjayBMRVNTIGRhdGEgYmVjYXVzZSBJIHRoaW5rIGFsbCBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuICAgICAgICAvLyBpcyBwcm9iYWJseSBub3QgbmVlZGVkLlxuICAgICAgICBjb25zdCBldmVudCA9IHtcbiAgICAgICAgICAgIGNvbW1hbmQsXG4gICAgICAgICAgICBtYXRjaGluZ1NlbGVjdG9yczogdHJpZ2dlckV2ZW50Lm1hdGNoaW5nU2VsZWN0b3JzLFxuICAgICAgICAgICAgZG9jRGVzY3JpcHRvcjogdHJpZ2dlckV2ZW50LmRvY0Rlc2NyaXB0b3JcbiAgICAgICAgfTtcblxuICAgICAgICBzZW5kZXIuc2VuZChcImNvbnRleHQtbWVudS1jb21tYW5kXCIsIGV2ZW50KTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHRyaWdnZXJFdmVudCB7VHJpZ2dlckV2ZW50fVxuICAgICAqIEBwYXJhbSBzZW5kZXJcbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZUNvbnRleHRNZW51KHRyaWdnZXJFdmVudDogVHJpZ2dlckV2ZW50LCBzZW5kZXI6IFdlYkNvbnRlbnRzKSB7XG5cbiAgICAgICAgUHJlY29uZGl0aW9ucy5hc3NlcnROb3ROdWxsKHNlbmRlciwgXCJzZW5kZXJcIik7XG5cbiAgICAgICAgLy8gVE9ETzogbW92ZSB0aGlzIHRvIGEgdGVtcGxhdGUgYXMgdGhlIGNvZGUgaXMgY2xlYW5lclxuXG4gICAgICAgIGNvbnN0IGNvbnRleHRNZW51czogTWVudVtdID0gW107XG5cbiAgICAgICAgaWYgKHRyaWdnZXJFdmVudC5jb250ZXh0TWVudVR5cGVzLmluY2x1ZGVzKENvbnRleHRNZW51VHlwZS5QQUdFKSkge1xuICAgICAgICAgICAgY29udGV4dE1lbnVzLnB1c2godGhpcy5jcmVhdGVQYWdlQ29udGV4dE1lbnUodHJpZ2dlckV2ZW50LCBzZW5kZXIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmlnZ2VyRXZlbnQuY29udGV4dE1lbnVUeXBlcy5pbmNsdWRlcyhDb250ZXh0TWVudVR5cGUuVEVYVF9ISUdITElHSFQpKSB7XG4gICAgICAgICAgICBjb250ZXh0TWVudXMucHVzaCh0aGlzLmNyZWF0ZVRleHRIaWdobGlnaHRDb250ZXh0TWVudSh0cmlnZ2VyRXZlbnQsIHNlbmRlcikpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyaWdnZXJFdmVudC5jb250ZXh0TWVudVR5cGVzLmluY2x1ZGVzKENvbnRleHRNZW51VHlwZS5BUkVBX0hJR0hMSUdIVCkpIHtcbiAgICAgICAgICAgIGNvbnRleHRNZW51cy5wdXNoKHRoaXMuY3JlYXRlQXJlYUhpZ2hsaWdodENvbnRleHRNZW51KHRyaWdnZXJFdmVudCwgc2VuZGVyKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJpZ2dlckV2ZW50LmNvbnRleHRNZW51VHlwZXMuaW5jbHVkZXMoQ29udGV4dE1lbnVUeXBlLlBBR0VNQVJLKSkge1xuICAgICAgICAgICAgY29udGV4dE1lbnVzLnB1c2godGhpcy5jcmVhdGVQYWdlbWFya0NvbnRleHRNZW51KHRyaWdnZXJFdmVudCwgc2VuZGVyKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0TWVudXMucHVzaCh0aGlzLmNyZWF0ZURlZmF1bHRDb250ZXh0TWVudSh0cmlnZ2VyRXZlbnQsIHNlbmRlcikpO1xuXG4gICAgICAgIGNvbnN0IGN0eE1lbnUgPSBuZXcgTWVudSgpO1xuXG4gICAgICAgIEFycmF5cy5jcmVhdGVTaWJsaW5ncyhjb250ZXh0TWVudXMpLmZvckVhY2goY29udGV4dE1lbnVDdXJzb3IgPT4ge1xuXG4gICAgICAgICAgICBjb250ZXh0TWVudUN1cnNvci5jdXJyLml0ZW1zLmZvckVhY2gobWVudUl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgIGN0eE1lbnUuYXBwZW5kKG1lbnVJdGVtKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoY29udGV4dE1lbnVDdXJzb3IuY3Vyci5pdGVtcy5sZW5ndGggPiAwICYmIGNvbnRleHRNZW51Q3Vyc29yLm5leHQpIHtcbiAgICAgICAgICAgICAgICBjdHhNZW51LmFwcGVuZChuZXcgTWVudUl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc2VwYXJhdG9yJ1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gY3R4TWVudTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHRyaWdnZXJFdmVudCB7VHJpZ2dlckV2ZW50fVxuICAgICAqIEBwYXJhbSBzZW5kZXJcbiAgICAgKiBAcmV0dXJuIHtFbGVjdHJvbi5NZW51fVxuICAgICAqL1xuICAgIHByaXZhdGUgY3JlYXRlVGV4dEhpZ2hsaWdodENvbnRleHRNZW51KHRyaWdnZXJFdmVudDogVHJpZ2dlckV2ZW50LCBzZW5kZXI6IFdlYkNvbnRlbnRzKTogTWVudSB7XG5cbiAgICAgICAgY29uc3QgY3R4TWVudSA9IG5ldyBNZW51KCk7XG5cbiAgICAgICAgY3R4TWVudS5hcHBlbmQodGhpcy5jcmVhdGVTdWJtZW51KCdUZXh0IEhpZ2hsaWdodCcsIFtcbiAgICAgICAgICAgIC8vIG5ldyBNZW51SXRlbSh7XG4gICAgICAgICAgICAvLyAgICAgbGFiZWw6ICdBZGQgRmxhc2hjYXJkJyxcbiAgICAgICAgICAgIC8vICAgICAvLyBhY2NlbGVyYXRvcjogJ0NtZE9yQ3RybCtBJyxcbiAgICAgICAgICAgIC8vICAgICBjbGljazogKCkgPT4gdGhpcy5wb3N0Q29udGV4dE1lbnVNZXNzYWdlKFwiYWRkLWZsYXNoY2FyZFwiLCB0cmlnZ2VyRXZlbnQpXG4gICAgICAgICAgICAvLyB9KSxcbiAgICAgICAgICAgIC8vIG5ldyBNZW51SXRlbSh7XG4gICAgICAgICAgICAvLyAgICAgbGFiZWw6ICdBZGQgQ29tbWVudCcsXG4gICAgICAgICAgICAvLyAgICAgLy8gYWNjZWxlcmF0b3I6ICdDbWRPckN0cmwrQScsXG4gICAgICAgICAgICAvLyAgICAgY2xpY2s6ICgpID0+IHRoaXMucG9zdENvbnRleHRNZW51TWVzc2FnZShcImFkZC1jb21tZW50XCIsIHRyaWdnZXJFdmVudClcbiAgICAgICAgICAgIC8vIH0pLFxuICAgICAgICAgICAgbmV3IE1lbnVJdGVtKHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0RlbGV0ZScsXG4gICAgICAgICAgICAgICAgLy8gYWNjZWxlcmF0b3I6ICdDbWRPckN0cmwrQScsXG4gICAgICAgICAgICAgICAgY2xpY2s6ICgpID0+IENvbnRleHRNZW51TWVzc2FnZXMucG9zdENvbnRleHRNZW51TWVzc2FnZShcImRlbGV0ZS10ZXh0LWhpZ2hsaWdodFwiLCB0cmlnZ2VyRXZlbnQpXG4gICAgICAgICAgICB9KVxuICAgICAgICBdKSk7XG5cbiAgICAgICAgcmV0dXJuIGN0eE1lbnU7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmlnZ2VyRXZlbnQge1RyaWdnZXJFdmVudH1cbiAgICAgKiBAcGFyYW0gc2VuZGVyXG4gICAgICogQHJldHVybiB7RWxlY3Ryb24uTWVudX1cbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZUFyZWFIaWdobGlnaHRDb250ZXh0TWVudSh0cmlnZ2VyRXZlbnQ6IFRyaWdnZXJFdmVudCwgc2VuZGVyOiBXZWJDb250ZW50cyk6IE1lbnUge1xuXG4gICAgICAgIGNvbnN0IGN0eE1lbnUgPSBuZXcgTWVudSgpO1xuXG4gICAgICAgIGN0eE1lbnUuYXBwZW5kKHRoaXMuY3JlYXRlU3VibWVudSgnQXJlYSBIaWdobGlnaHQnLCBbXG4gICAgICAgICAgICAvLyBuZXcgTWVudUl0ZW0oe1xuICAgICAgICAgICAgLy8gICAgIGxhYmVsOiAnQWRkIEZsYXNoY2FyZCcsXG4gICAgICAgICAgICAvLyAgICAgY2xpY2s6ICgpID0+IHRoaXMucG9zdENvbnRleHRNZW51TWVzc2FnZShcImFkZC1mbGFzaGNhcmRcIiwgdHJpZ2dlckV2ZW50KVxuICAgICAgICAgICAgLy8gfSksXG4gICAgICAgICAgICAvLyBuZXcgTWVudUl0ZW0oe1xuICAgICAgICAgICAgLy8gICAgIGxhYmVsOiAnQWRkIENvbW1lbnQnLFxuICAgICAgICAgICAgLy8gICAgIC8vIGFjY2VsZXJhdG9yOiAnQ21kT3JDdHJsK0EnLFxuICAgICAgICAgICAgLy8gICAgIGNsaWNrOiAoKSA9PiB0aGlzLnBvc3RDb250ZXh0TWVudU1lc3NhZ2UoXCJhZGQtY29tbWVudFwiLCB0cmlnZ2VyRXZlbnQpXG4gICAgICAgICAgICAvLyB9KSxcbiAgICAgICAgICAgIG5ldyBNZW51SXRlbSh7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdEZWxldGUnLFxuICAgICAgICAgICAgICAgIC8vIGFjY2VsZXJhdG9yOiAnQ21kT3JDdHJsK0EnLFxuICAgICAgICAgICAgICAgIGNsaWNrOiAoKSA9PiBDb250ZXh0TWVudU1lc3NhZ2VzLnBvc3RDb250ZXh0TWVudU1lc3NhZ2UoXCJkZWxldGUtYXJlYS1oaWdobGlnaHRcIiwgdHJpZ2dlckV2ZW50KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgXSkpO1xuXG4gICAgICAgIHJldHVybiBjdHhNZW51O1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZVBhZ2VtYXJrQ29udGV4dE1lbnUodHJpZ2dlckV2ZW50OiBUcmlnZ2VyRXZlbnQsIHNlbmRlcjogV2ViQ29udGVudHMpOiBNZW51IHtcblxuICAgICAgICBjb25zdCBjdHhNZW51ID0gbmV3IE1lbnUoKTtcblxuICAgICAgICBjb25zdCBjcmVhdGVNb2RlU3VibWVudUl0ZW1zID0gKCkgPT4ge1xuXG4gICAgICAgICAgICByZXR1cm4gUGFnZW1hcmtNb2Rlcy50b0Rlc2NyaXB0b3JzKCkubWFwKGN1cnJlbnQgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTWVudUl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGN1cnJlbnQudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICBjbGljazogKCkgPT4gQ29udGV4dE1lbnVNZXNzYWdlcy5wb3N0Q29udGV4dE1lbnVNZXNzYWdlKFwic2V0LXBhZ2VtYXJrLW1vZGUtXCIgKyBjdXJyZW50LmtleSwgdHJpZ2dlckV2ZW50KVxuICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgY3R4TWVudS5hcHBlbmQodGhpcy5jcmVhdGVTdWJtZW51KCdQYWdlbWFyaycsIFtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlU3VibWVudSgnTW9kZSAuLi4nLCBjcmVhdGVNb2RlU3VibWVudUl0ZW1zKCkpLFxuICAgICAgICAgICAgbmV3IE1lbnVJdGVtKHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0RlbGV0ZSBQYWdlbWFyaycsXG4gICAgICAgICAgICAgICAgLy8gYWNjZWxlcmF0b3I6ICdDbWRPckN0cmwrQScsXG4gICAgICAgICAgICAgICAgY2xpY2s6ICgpID0+IENvbnRleHRNZW51TWVzc2FnZXMucG9zdENvbnRleHRNZW51TWVzc2FnZShcImRlbGV0ZS1wYWdlbWFya1wiLCB0cmlnZ2VyRXZlbnQpXG4gICAgICAgICAgICB9KVxuICAgICAgICBdKSk7XG5cbiAgICAgICAgcmV0dXJuIGN0eE1lbnU7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgY3JlYXRlUGFnZUNvbnRleHRNZW51KHRyaWdnZXJFdmVudDogVHJpZ2dlckV2ZW50LCBzZW5kZXI6IFdlYkNvbnRlbnRzKTogTWVudSB7XG5cbiAgICAgICAgY29uc3QgY3R4TWVudSA9IG5ldyBNZW51KCk7XG5cbiAgICAgICAgLy8gVE9ETzogcGFnZSBoaWdobGlnaHRzIGRvbid0IHdvcmsgcmlnaHQgbm93IGFzIHdlIG5lZWQgYW4gYW5ub3RhdGlvblxuICAgICAgICAvLyB0byBiYXNlIGl0IG9mZiBvZi5cbiAgICAgICAgLy8gY3R4TWVudS5hcHBlbmQobmV3IE1lbnVJdGVtKHtcbiAgICAgICAgLy8gICAgIGxhYmVsOiAnQWRkIEZsYXNoY2FyZCcsXG4gICAgICAgIC8vICAgICAvL2FjY2VsZXJhdG9yOiAnQ21kT3JDdHJsK0EnLFxuICAgICAgICAvLyAgICAgY2xpY2s6ICgpID0+IHRoaXMucG9zdENvbnRleHRNZW51TWVzc2FnZShcImFkZC1mbGFzaGNhcmRcIiwgdHJpZ2dlckV2ZW50KVxuICAgICAgICAvLyB9KSk7XG5cblxuICAgICAgICAvLyBjdHhNZW51LmFwcGVuZCh0aGlzLmNyZWF0ZVN1Ym1lbnUoJ0NyZWF0ZSBQYWdlbWFyay4uLicsIFtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgIG5ldyBNZW51SXRlbSh7XG4gICAgICAgIC8vICAgICAgICAgbGFiZWw6ICcuLi4gVG8gUG9pbnQnLFxuICAgICAgICAvLyAgICAgICAgIGNsaWNrOiAoKSA9PiB0aGlzLnBvc3RDb250ZXh0TWVudU1lc3NhZ2UoXCJjcmVhdGUtcGFnZW1hcmstdG8tcG9pbnRcIiwgdHJpZ2dlckV2ZW50KVxuICAgICAgICAvLyAgICAgfSksXG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICBuZXcgTWVudUl0ZW0oe1xuICAgICAgICAvLyAgICAgICAgIGxhYmVsOiAnLi4uIEJveCBBdCBQb2ludCcsXG4gICAgICAgIC8vICAgICAgICAgY2xpY2s6ICgpID0+IHRoaXMucG9zdENvbnRleHRNZW51TWVzc2FnZShcImNyZWF0ZS1wYWdlbWFya1wiLCB0cmlnZ2VyRXZlbnQpXG4gICAgICAgIC8vICAgICB9KSxcbiAgICAgICAgLy9cbiAgICAgICAgLy8gXSkpO1xuXG4gICAgICAgIGN0eE1lbnUuYXBwZW5kKG5ldyBNZW51SXRlbSh7XG4gICAgICAgICAgICBsYWJlbDogJ0NyZWF0ZSBQYWdlbWFyayB0byBQb2ludCcsXG4gICAgICAgICAgICAvLyBhY2NlbGVyYXRvcjogXCJDb21tYW5kT3JDb250cm9sK0FsdCtMZWZ0Q2xpY2tcIixcbiAgICAgICAgICAgIC8vIHJlZ2lzdGVyQWNjZWxlcmF0b3I6IGZhbHNlLFxuICAgICAgICAgICAgY2xpY2s6ICgpID0+IENvbnRleHRNZW51TWVzc2FnZXMucG9zdENvbnRleHRNZW51TWVzc2FnZShcImNyZWF0ZS1wYWdlbWFyay10by1wb2ludFwiLCB0cmlnZ2VyRXZlbnQpXG4gICAgICAgIH0pKTtcblxuICAgICAgICBjdHhNZW51LmFwcGVuZChuZXcgTWVudUl0ZW0oe1xuICAgICAgICAgICAgbGFiZWw6ICdDcmVhdGUgUGFnZW1hcmsgQm94JyxcbiAgICAgICAgICAgIGNsaWNrOiAoKSA9PiBDb250ZXh0TWVudU1lc3NhZ2VzLnBvc3RDb250ZXh0TWVudU1lc3NhZ2UoXCJjcmVhdGUtcGFnZW1hcmtcIiwgdHJpZ2dlckV2ZW50KVxuICAgICAgICB9KSk7XG5cbiAgICAgICAgY3R4TWVudS5hcHBlbmQobmV3IE1lbnVJdGVtKHtcbiAgICAgICAgICAgIGxhYmVsOiAnQ3JlYXRlIEFyZWEgSGlnaGxpZ2h0JyxcbiAgICAgICAgICAgIGNsaWNrOiAoKSA9PiBDb250ZXh0TWVudU1lc3NhZ2VzLnBvc3RDb250ZXh0TWVudU1lc3NhZ2UoXCJjcmVhdGUtYXJlYS1oaWdobGlnaHRcIiwgdHJpZ2dlckV2ZW50KVxuICAgICAgICB9KSk7XG5cbiAgICAgICAgLy8gY3R4TWVudS5hcHBlbmQobmV3IE1lbnVJdGVtKHtcbiAgICAgICAgLy8gICAgIGxhYmVsOiAnU3luYyBGbGFzaGNhcmRzIHRvIEFua2knLFxuICAgICAgICAvLyAgICAgY2xpY2s6ICgpID0+IHRoaXMucG9zdENvbnRleHRNZW51TWVzc2FnZShcInN0YXJ0LXN5bmNcIiwgdHJpZ2dlckV2ZW50KVxuICAgICAgICAvLyB9KSk7XG5cbiAgICAgICAgLy8gY3R4TWVudS5hcHBlbmQobmV3IE1lbnVJdGVtKHtcbiAgICAgICAgLy8gICAgIGxhYmVsOiAnQ3JlYXRlIEFubm90YXRpb24nLFxuICAgICAgICAvLyAgICAgY2xpY2s6ICgpID0+IHRoaXMucG9zdENvbnRleHRNZW51TWVzc2FnZShcImNyZWF0ZS1hbm5vdGF0aW9uXCIsIHRyaWdnZXJFdmVudClcbiAgICAgICAgLy8gfSkpO1xuXG4gICAgICAgIHJldHVybiBjdHhNZW51O1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZURlZmF1bHRDb250ZXh0TWVudSh0cmlnZ2VyRXZlbnQ6IFRyaWdnZXJFdmVudCwgc2VuZGVyOiBXZWJDb250ZW50cyk6IE1lbnUge1xuXG4gICAgICAgIGNvbnN0IGN0eE1lbnUgPSBuZXcgTWVudSgpO1xuXG4gICAgICAgIC8vIFRPRE86IGRpc3BsYXkgdGhpcyBmaXJzdCBhbmQgb25seSBpZiB0ZXh0IGlzIGhpZ2hsaWdodGVkXG4gICAgICAgIC8vIGN0eE1lbnUuYXBwZW5kKG5ldyBNZW51SXRlbSh7IGxhYmVsOiAnQ29weScsIGFjY2VsZXJhdG9yOiAnQ21kT3JDdHJsK0MnLCByb2xlOiAnY29weScgfSkpO1xuXG4gICAgICAgIGN0eE1lbnUuYXBwZW5kKG5ldyBNZW51SXRlbSh7XG4gICAgICAgICAgICBsYWJlbDogJ1RvZ2dsZSBBbm5vdGF0aW9uIFNpZGViYXInLFxuICAgICAgICAgICAgaWQ6IFwidG9nZ2xlLWFubm90YXRpb24tc2lkZWJhclwiLFxuICAgICAgICAgICAgY2xpY2s6ICgpID0+IEFubm90YXRpb25TaWRlYmFyQ2xpZW50LnRvZ2dsZUFubm90YXRpb25TaWRlYmFyKClcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGN0eE1lbnUuYXBwZW5kKG5ldyBNZW51SXRlbSh7XG4gICAgICAgICAgICBsYWJlbDogJ0luc3BlY3QgRWxlbWVudCcsXG4gICAgICAgICAgICBpZDogXCJpbnNwZWN0XCIsXG4gICAgICAgICAgICAvLyBhY2NlbGVyYXRvcjogJ0N0cmwrU2hpZnQrSScsXG4gICAgICAgICAgICBjbGljazogZXZlbnQgPT4ge1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgd2luZG93ID0gQnJvd3NlcldpbmRvdy5nZXRGb2N1c2VkV2luZG93KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoISB3aW5kb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gY3VycmVudCB3aW5kb3dcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gdGhlIHBvaW50cyBhcmUgU0xJR0hUTFkgb2ZmIGZvciB0aGUgaWZyYW1lIHZlcnNpb24gd2hpY2ggaXNcbiAgICAgICAgICAgICAgICAvLyB2ZXJ5IGFubm95aW5nLlxuICAgICAgICAgICAgICAgIHdpbmRvdy53ZWJDb250ZW50cy5pbnNwZWN0RWxlbWVudCh0cmlnZ2VyRXZlbnQucG9pbnQueCwgdHJpZ2dlckV2ZW50LnBvaW50LnkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy53ZWJDb250ZW50cy5pc0RldlRvb2xzT3BlbmVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LndlYkNvbnRlbnRzLmRldlRvb2xzV2ViQ29udGVudHMuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KSk7XG5cblxuICAgICAgICByZXR1cm4gY3R4TWVudTtcblxuICAgIH1cblxuICAgIHB1YmxpYyBjcmVhdGVTdWJtZW51KGxhYmVsOiBzdHJpbmcsIG1lbnVJdGVtczogTWVudUl0ZW1bXSk6IE1lbnVJdGVtIHtcblxuICAgICAgICBjb25zdCBzdWJtZW51ID0gbmV3IE1lbnUoKTtcblxuICAgICAgICBjb25zdCBzdWJtZW51SXRlbSA9IG5ldyBNZW51SXRlbSh7XG4gICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgIHR5cGU6ICdzdWJtZW51JyxcbiAgICAgICAgICAgIHN1Ym1lbnVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWVudUl0ZW1zLmZvckVhY2gobWVudUl0ZW0gPT4ge1xuICAgICAgICAgICAgc3VibWVudS5hcHBlbmQobWVudUl0ZW0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc3VibWVudUl0ZW07XG5cbiAgICB9XG5cbn1cbiJdfQ==