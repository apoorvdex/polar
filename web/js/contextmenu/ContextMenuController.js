"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const electron_1 = require("electron");
const Elements_1 = require("../util/Elements");
const ContextMenuType_1 = require("./ContextMenuType");
const MatchingSelector_1 = require("./MatchingSelector");
const AnnotationDescriptors_1 = require("../metadata/AnnotationDescriptors");
const Logger_1 = require("../logger/Logger");
const TriggerEvent_1 = require("./TriggerEvent");
const DocDescriptor_1 = require("../metadata/DocDescriptor");
const DocFormatFactory_1 = require("../docformat/DocFormatFactory");
const Functions_1 = require("../util/Functions");
const BrowserContextMenus_1 = require("./browser/BrowserContextMenus");
const log = Logger_1.Logger.create();
class ContextMenuController {
    constructor(model) {
        this.model = model;
        if (electron_1.ipcRenderer) {
            electron_1.ipcRenderer.on('context-menu-command', (event, arg) => {
            });
        }
    }
    start() {
        log.info("Starting ContextMenuController");
        BrowserContextMenus_1.BrowserContextMenus.create();
        document.querySelectorAll(".page").forEach((targetElement) => {
            this.registerPageContextMenuListener(targetElement);
        });
    }
    registerPageContextMenuListener(targetElement) {
        targetElement.addEventListener('contextmenu', (event) => {
            this.onContextMenuHandler(event, [".text-highlight",
                ".area-highlight",
                ".pagemark",
                ".page"]);
        });
    }
    registerDefaultContextMenuListener(targetElement) {
        targetElement.addEventListener('contextmenu', (event) => {
            this.onContextMenuHandler(event, ["*"]);
        });
    }
    onContextMenuHandler(event, annotationSelectors) {
        const matchingSelectors = ContextMenuController.elementsFromEventMatchingSelectors(event, annotationSelectors);
        const contextMenuTypes = [];
        Functions_1.forDict(matchingSelectors, (selector, current) => {
            if (current.elements.length > 0) {
                contextMenuTypes.push(ContextMenuController.toContextMenuType(current.selector));
            }
        });
        const docDescriptor = new DocDescriptor_1.DocDescriptor({
            fingerprint: this.model.docMeta.docInfo.fingerprint
        });
        log.info("Creating context menu for contextMenuTypes: ", contextMenuTypes);
        const pageElement = Elements_1.Elements.untilRoot(event.target, ".page");
        const docFormat = DocFormatFactory_1.DocFormatFactory.getInstance();
        const pageNum = docFormat.getPageNumFromPageElement(pageElement);
        const eventTargetOffset = Elements_1.Elements.getRelativeOffsetRect(event.target, pageElement);
        const pageOffset = {
            x: eventTargetOffset.left + event.offsetX,
            y: eventTargetOffset.top + event.offsetY
        };
        const triggerEvent = TriggerEvent_1.TriggerEvent.create({
            point: {
                x: event.pageX,
                y: event.pageY
            },
            points: {
                page: {
                    x: event.pageX,
                    y: event.pageY
                },
                client: {
                    x: event.clientX,
                    y: event.clientY
                },
                offset: {
                    x: event.offsetX,
                    y: event.offsetY
                },
                pageOffset
            },
            pageNum,
            contextMenuTypes,
            matchingSelectors,
            docDescriptor
        });
        BrowserContextMenus_1.BrowserContextMenus.trigger(triggerEvent, event);
    }
    static withActivePagemarks(closure) {
        const elements = Array.from(document.querySelectorAll(".pagemark"));
        const elementStyleRestores = [];
        for (const element of elements) {
            elementStyleRestores.push({
                element, pointerEvents: element.style.pointerEvents
            });
            element.style.pointerEvents = 'auto';
        }
        const result = closure();
        for (const restore of elementStyleRestores) {
            restore.element.style.pointerEvents = restore.pointerEvents;
        }
        return result;
    }
    static elementsFromEvent(event) {
        if (event.target instanceof HTMLElement) {
            const point = { x: event.clientX, y: event.clientY };
            const doc = event.target.ownerDocument;
            if (doc) {
                return this.withActivePagemarks(() => {
                    return doc.elementsFromPoint(point.x, point.y);
                });
            }
        }
        return [];
    }
    static toContextMenuType(selector) {
        let result = selector.toUpperCase();
        result = result.replace(".", "");
        result = result.replace("-", "_");
        return ContextMenuType_1.ContextMenuTypes.fromString(result);
    }
    static elementsFromEventMatchingSelectors(event, selectors) {
        const result = {};
        selectors.forEach(selector => {
            result[selector] = new MatchingSelector_1.MatchingSelector(selector, [], []);
        });
        const elements = ContextMenuController.elementsFromEvent(event);
        elements.forEach((element) => {
            selectors.forEach(selector => {
                if (element.matches(selector)) {
                    const matchingSelector = result[selector];
                    matchingSelector.elements.push(element);
                    const annotationDescriptor = AnnotationDescriptors_1.AnnotationDescriptors.createFromElement(element);
                    if (annotationDescriptor) {
                        matchingSelector.annotationDescriptors.push(annotationDescriptor);
                    }
                }
            });
        });
        return result;
    }
}
exports.ContextMenuController = ContextMenuController;
//# sourceMappingURL=data:application/json;base64,