"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const toastr_1 = __importDefault(require("toastr"));
const Optional_1 = require("../../util/ts/Optional");
toastr_1.default.options.toastClass = 'toastr';
class Toaster {
    static info(message, title = "", options = {}) {
        title = Optional_1.Optional.of(title).getOrElse("");
        toastr_1.default.info(message, title, this.augmentExtendedOptions(options));
    }
    static success(message, title = "", options = {}) {
        title = Optional_1.Optional.of(title).getOrElse("");
        toastr_1.default.success(message, title, this.augmentExtendedOptions(options));
    }
    static warning(message, title = "", options = {}) {
        title = Optional_1.Optional.of(title).getOrElse("");
        toastr_1.default.warning(message, title, this.augmentExtendedOptions(options));
    }
    static error(message, title = "", options = {}) {
        title = Optional_1.Optional.of(title).getOrElse("");
        toastr_1.default.error(message, title, this.augmentExtendedOptions(options));
    }
    static persistentError(message, title = "") {
        this.error(message, title, {
            timeOut: 0,
            extendedTimeOut: 0,
            preventDuplicates: true
        });
    }
    static augmentExtendedOptions(options) {
        const result = Object.assign({}, options);
        if (options.requiresAcknowledgment) {
            Object.assign(result, {
                closeButton: true,
                timeOut: 0,
                extendedTimeOut: 0,
            });
        }
        return result;
    }
}
exports.Toaster = Toaster;
var ToasterMessageType;
(function (ToasterMessageType) {
    ToasterMessageType["SUCCESS"] = "success";
    ToasterMessageType["INFO"] = "info";
    ToasterMessageType["WARNING"] = "warning";
    ToasterMessageType["ERROR"] = "error";
})(ToasterMessageType = exports.ToasterMessageType || (exports.ToasterMessageType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9hc3Rlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlRvYXN0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxvREFBNEI7QUFJNUIscURBQWdEO0FBRWhELGdCQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7QUFNckMsTUFBYSxPQUFPO0lBRVQsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFlLEVBQUUsUUFBZ0IsRUFBRSxFQUFFLFVBQTBCLEVBQUU7UUFDaEYsS0FBSyxHQUFHLG1CQUFRLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6QyxnQkFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQWUsRUFBRSxRQUFnQixFQUFFLEVBQUUsVUFBMEIsRUFBRTtRQUNuRixLQUFLLEdBQUcsbUJBQVEsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLGdCQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBZSxFQUFFLFFBQWdCLEVBQUUsRUFBRSxVQUEwQixFQUFFO1FBQ25GLEtBQUssR0FBRyxtQkFBUSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekMsZ0JBQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFlLEVBQUUsUUFBZ0IsRUFBRSxFQUFFLFVBQTBCLEVBQUU7UUFDakYsS0FBSyxHQUFHLG1CQUFRLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6QyxnQkFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFRTSxNQUFNLENBQUMsZUFBZSxDQUFDLE9BQWUsRUFBRSxRQUFnQixFQUFFO1FBRTdELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRTtZQUN2QixPQUFPLEVBQUUsQ0FBQztZQUNWLGVBQWUsRUFBRSxDQUFDO1lBQ2xCLGlCQUFpQixFQUFFLElBQUk7U0FDMUIsQ0FBQyxDQUFDO0lBRVAsQ0FBQztJQUVPLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxPQUF1QjtRQUV6RCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUUxQyxJQUFJLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRTtZQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtnQkFDbEIsV0FBVyxFQUFFLElBQUk7Z0JBQ2pCLE9BQU8sRUFBRSxDQUFDO2dCQUNWLGVBQWUsRUFBRSxDQUFDO2FBQ3JCLENBQUMsQ0FBQztTQUNOO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFFbEIsQ0FBQztDQUVKO0FBdERELDBCQXNEQztBQWFELElBQVksa0JBVVg7QUFWRCxXQUFZLGtCQUFrQjtJQUUxQix5Q0FBbUIsQ0FBQTtJQUVuQixtQ0FBYSxDQUFBO0lBRWIseUNBQW1CLENBQUE7SUFFbkIscUNBQWUsQ0FBQTtBQUVuQixDQUFDLEVBVlcsa0JBQWtCLEdBQWxCLDBCQUFrQixLQUFsQiwwQkFBa0IsUUFVN0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVG9hc3RyIGZyb20gJ3RvYXN0cic7XG5cbi8vIG5lZWRlZCB0byBlbmZvcmNlIHRoYXQganF1ZXJ5IGlzIHdvcmtpbmcuXG5pbXBvcnQgJCBmcm9tICcuLi9KUXVlcnknO1xuaW1wb3J0IHtPcHRpb25hbH0gZnJvbSAnLi4vLi4vdXRpbC90cy9PcHRpb25hbCc7XG5cblRvYXN0ci5vcHRpb25zLnRvYXN0Q2xhc3MgPSAndG9hc3RyJztcblxuXG4vKipcbiAqIEhpZ2ggbGV2ZWwgaW50ZXJmYWNlIHRvIGNyZWF0ZSB0b2FzdGVyIFVJIHBvcHVwcyBmb3IgbWVzc2FnZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUb2FzdGVyIHtcblxuICAgIHB1YmxpYyBzdGF0aWMgaW5mbyhtZXNzYWdlOiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcgPSBcIlwiLCBvcHRpb25zOiBUb2FzdGVyT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRpdGxlID0gT3B0aW9uYWwub2YodGl0bGUpLmdldE9yRWxzZShcIlwiKTtcbiAgICAgICAgVG9hc3RyLmluZm8obWVzc2FnZSwgdGl0bGUsIHRoaXMuYXVnbWVudEV4dGVuZGVkT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBzdWNjZXNzKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU6IHN0cmluZyA9IFwiXCIsIG9wdGlvbnM6IFRvYXN0ZXJPcHRpb25zID0ge30pIHtcbiAgICAgICAgdGl0bGUgPSBPcHRpb25hbC5vZih0aXRsZSkuZ2V0T3JFbHNlKFwiXCIpO1xuICAgICAgICBUb2FzdHIuc3VjY2VzcyhtZXNzYWdlLCB0aXRsZSwgdGhpcy5hdWdtZW50RXh0ZW5kZWRPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHdhcm5pbmcobWVzc2FnZTogc3RyaW5nLCB0aXRsZTogc3RyaW5nID0gXCJcIiwgb3B0aW9uczogVG9hc3Rlck9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aXRsZSA9IE9wdGlvbmFsLm9mKHRpdGxlKS5nZXRPckVsc2UoXCJcIik7XG4gICAgICAgIFRvYXN0ci53YXJuaW5nKG1lc3NhZ2UsIHRpdGxlLCB0aGlzLmF1Z21lbnRFeHRlbmRlZE9wdGlvbnMob3B0aW9ucykpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZXJyb3IobWVzc2FnZTogc3RyaW5nLCB0aXRsZTogc3RyaW5nID0gXCJcIiwgb3B0aW9uczogVG9hc3Rlck9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aXRsZSA9IE9wdGlvbmFsLm9mKHRpdGxlKS5nZXRPckVsc2UoXCJcIik7XG4gICAgICAgIFRvYXN0ci5lcnJvcihtZXNzYWdlLCB0aXRsZSwgdGhpcy5hdWdtZW50RXh0ZW5kZWRPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gZXJyb3IgdGhhdCBkb2Vzbid0IGF1dG8taGlkZSBhbmQgaXMgYSBzaW5nbGV0b24gYXJvdW5kIHRoZSBzYW1lXG4gICAgICogbWVzc2FnZXMgYW5kIHJlcXVpcmVzIHRoZSB1c2VyIHRvIGFja25vd2xlZGdlIGl0Li4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWVzc2FnZVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcGVyc2lzdGVudEVycm9yKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU6IHN0cmluZyA9IFwiXCIpIHtcblxuICAgICAgICB0aGlzLmVycm9yKG1lc3NhZ2UsIHRpdGxlLCB7XG4gICAgICAgICAgICB0aW1lT3V0OiAwLFxuICAgICAgICAgICAgZXh0ZW5kZWRUaW1lT3V0OiAwLFxuICAgICAgICAgICAgcHJldmVudER1cGxpY2F0ZXM6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBhdWdtZW50RXh0ZW5kZWRPcHRpb25zKG9wdGlvbnM6IFRvYXN0ZXJPcHRpb25zKTogVG9hc3Rlck9wdGlvbnMge1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnJlcXVpcmVzQWNrbm93bGVkZ21lbnQpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgY2xvc2VCdXR0b246IHRydWUsXG4gICAgICAgICAgICAgICAgdGltZU91dDogMCxcbiAgICAgICAgICAgICAgICBleHRlbmRlZFRpbWVPdXQ6IDAsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICB9XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb2FzdGVyT3B0aW9ucyB7XG4gICAgdGltZU91dD86IG51bWJlcjtcbiAgICBleHRlbmRlZFRpbWVPdXQ/OiBudW1iZXI7XG4gICAgcHJldmVudER1cGxpY2F0ZXM/OiBib29sZWFuO1xuICAgIGNsb3NlQnV0dG9uPzogYm9vbGVhbjtcbiAgICBkZWJ1Zz86IGJvb2xlYW47XG4gICAgbmV3ZXN0T25Ub3A/OiBib29sZWFuO1xuICAgIHJlcXVpcmVzQWNrbm93bGVkZ21lbnQ/OiBib29sZWFuO1xuICAgIHBvc2l0aW9uQ2xhc3M/OiAndG9hc3QtdG9wLWNlbnRlcicgfCAndG9hc3QtdG9wLXJpZ2h0JyB8ICd0b2FzdC10b3AtbGVmdCcgfCAndG9hc3QtdG9wLWZ1bGwtd2lkdGgnO1xufVxuXG5leHBvcnQgZW51bSBUb2FzdGVyTWVzc2FnZVR5cGUge1xuXG4gICAgU1VDQ0VTUyA9IFwic3VjY2Vzc1wiLFxuXG4gICAgSU5GTyA9IFwiaW5mb1wiLFxuXG4gICAgV0FSTklORyA9IFwid2FybmluZ1wiLFxuXG4gICAgRVJST1IgPSBcImVycm9yXCJcblxufVxuXG5cbiJdfQ==