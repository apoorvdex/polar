"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const reactstrap_1 = require("reactstrap");
const Blackout_1 = require("../blackout/Blackout");
class Styles {
}
Styles.title = {
    fontSize: "20px",
    fontWeight: "bold"
};
Styles.subtitle = {
    fontSize: "14px"
};
Styles.button = {
    fontSize: "14px"
};
Styles.popover = {};
class ConfirmPopover extends react_1.default.Component {
    constructor(props) {
        super(props);
    }
    componentWillReceiveProps(nextProps, nextContext) {
        if (this.props.open !== nextProps.open) {
            Blackout_1.Blackout.toggle(nextProps.open);
        }
    }
    componentWillUnmount() {
        Blackout_1.Blackout.disable();
    }
    render() {
        return (react_1.default.createElement(reactstrap_1.Popover, { placement: this.props.placement || 'bottom', isOpen: this.props.open, target: this.props.target, className: "confirm-popover", style: Styles.popover },
            react_1.default.createElement(reactstrap_1.PopoverBody, { className: "text-center" },
                react_1.default.createElement("div", { className: "w-100 p-1", style: Styles.title }, this.props.title),
                react_1.default.createElement("div", { className: "w-100 p-1 muted", style: Styles.subtitle }, this.props.subtitle || ""),
                react_1.default.createElement(reactstrap_1.Button, { color: "secondary", style: Styles.button, size: "sm", className: "m-1", onClick: () => this.props.onCancel() }, "Cancel"),
                react_1.default.createElement(reactstrap_1.Button, { color: "primary", style: Styles.button, size: "sm", className: "m-1", onClick: () => this.props.onConfirm() }, "Confirm"))));
    }
}
exports.ConfirmPopover = ConfirmPopover;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZmlybVBvcG92ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDb25maXJtUG9wb3Zlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxrREFBMEI7QUFDMUIsMkNBQXdEO0FBRXhELG1EQUE4QztBQUc5QyxNQUFNLE1BQU07O0FBRU0sWUFBSyxHQUF3QjtJQUN2QyxRQUFRLEVBQUUsTUFBTTtJQUNoQixVQUFVLEVBQUUsTUFBTTtDQUNyQixDQUFDO0FBRVksZUFBUSxHQUF3QjtJQUMxQyxRQUFRLEVBQUUsTUFBTTtDQUNuQixDQUFDO0FBRVksYUFBTSxHQUF3QjtJQUN4QyxRQUFRLEVBQUUsTUFBTTtDQUNuQixDQUFDO0FBRVksY0FBTyxHQUF3QixFQUc1QyxDQUFDO0FBSU4sTUFBYSxjQUFlLFNBQVEsZUFBSyxDQUFDLFNBQXlCO0lBRS9ELFlBQVksS0FBYTtRQUNyQixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFakIsQ0FBQztJQUVNLHlCQUF5QixDQUFDLFNBQTJCLEVBQUUsV0FBZ0I7UUFFMUUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsSUFBSSxFQUFFO1lBQ3BDLG1CQUFRLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuQztJQUVMLENBQUM7SUFFTSxvQkFBb0I7UUFDdkIsbUJBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRU0sTUFBTTtRQUVULE9BQU8sQ0FFSCw4QkFBQyxvQkFBTyxJQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsSUFBSSxRQUFRLEVBQzNDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFDdkIsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUN6QixTQUFTLEVBQUMsaUJBQWlCLEVBQzNCLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTztZQUUxQiw4QkFBQyx3QkFBVyxJQUFDLFNBQVMsRUFBQyxhQUFhO2dCQUVoQyx1Q0FBSyxTQUFTLEVBQUMsV0FBVyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxJQUN6QyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FDZjtnQkFFTix1Q0FBSyxTQUFTLEVBQUMsaUJBQWlCLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxRQUFRLElBQ2xELElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FDeEI7Z0JBRU4sOEJBQUMsbUJBQU0sSUFBQyxLQUFLLEVBQUMsV0FBVyxFQUNqQixLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFDcEIsSUFBSSxFQUFDLElBQUksRUFDVCxTQUFTLEVBQUMsS0FBSyxFQUNmLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxhQUFpQjtnQkFFN0QsOEJBQUMsbUJBQU0sSUFBQyxLQUFLLEVBQUMsU0FBUyxFQUNmLEtBQUssRUFBRSxNQUFNLENBQUMsTUFBTSxFQUNwQixJQUFJLEVBQUMsSUFBSSxFQUNULFNBQVMsRUFBQyxLQUFLLEVBQ2YsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLGNBQWtCLENBRXJELENBRVIsQ0FDYixDQUFDO0lBQ04sQ0FBQztDQUVKO0FBekRELHdDQXlEQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCByZWFjdC9uby1tdWx0aS1jb21wOiAwLCByZWFjdC9wcm9wLXR5cGVzOiAwICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtCdXR0b24sIFBvcG92ZXIsIFBvcG92ZXJCb2R5fSBmcm9tICdyZWFjdHN0cmFwJztcbmltcG9ydCBQb3BwZXIgZnJvbSAncG9wcGVyLmpzJztcbmltcG9ydCB7QmxhY2tvdXR9IGZyb20gJy4uL2JsYWNrb3V0L0JsYWNrb3V0JztcbmltcG9ydCB7SVN0eWxlTWFwfSBmcm9tICcuLi8uLi9yZWFjdC9JU3R5bGVNYXAnO1xuXG5jbGFzcyBTdHlsZXMge1xuXG4gICAgcHVibGljIHN0YXRpYyB0aXRsZTogUmVhY3QuQ1NTUHJvcGVydGllcyA9IHtcbiAgICAgICAgZm9udFNpemU6IFwiMjBweFwiLFxuICAgICAgICBmb250V2VpZ2h0OiBcImJvbGRcIlxuICAgIH07XG5cbiAgICBwdWJsaWMgc3RhdGljIHN1YnRpdGxlOiBSZWFjdC5DU1NQcm9wZXJ0aWVzID0ge1xuICAgICAgICBmb250U2l6ZTogXCIxNHB4XCJcbiAgICB9O1xuXG4gICAgcHVibGljIHN0YXRpYyBidXR0b246IFJlYWN0LkNTU1Byb3BlcnRpZXMgPSB7XG4gICAgICAgIGZvbnRTaXplOiBcIjE0cHhcIlxuICAgIH07XG5cbiAgICBwdWJsaWMgc3RhdGljIHBvcG92ZXI6IFJlYWN0LkNTU1Byb3BlcnRpZXMgPSB7XG4gICAgICAgIC8vIG1pbldpZHRoOiAnMzUwcHgnLFxuICAgICAgICAvLyB3aWR0aDogJzM1MHB4J1xuICAgIH07XG5cbn1cblxuZXhwb3J0IGNsYXNzIENvbmZpcm1Qb3BvdmVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgIH1cblxuICAgIHB1YmxpYyBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wczogUmVhZG9ubHk8SVByb3BzPiwgbmV4dENvbnRleHQ6IGFueSk6IHZvaWQge1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9wZW4gIT09IG5leHRQcm9wcy5vcGVuKSB7XG4gICAgICAgICAgICBCbGFja291dC50b2dnbGUobmV4dFByb3BzLm9wZW4pO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgY29tcG9uZW50V2lsbFVubW91bnQoKTogdm9pZCB7XG4gICAgICAgIEJsYWNrb3V0LmRpc2FibGUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuXG4gICAgICAgIHJldHVybiAoXG5cbiAgICAgICAgICAgIDxQb3BvdmVyIHBsYWNlbWVudD17dGhpcy5wcm9wcy5wbGFjZW1lbnQgfHwgJ2JvdHRvbSd9XG4gICAgICAgICAgICAgICAgICAgICBpc09wZW49e3RoaXMucHJvcHMub3Blbn1cbiAgICAgICAgICAgICAgICAgICAgIHRhcmdldD17dGhpcy5wcm9wcy50YXJnZXR9XG4gICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjb25maXJtLXBvcG92ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e1N0eWxlcy5wb3BvdmVyfT5cblxuICAgICAgICAgICAgICAgIDxQb3BvdmVyQm9keSBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy0xMDAgcC0xXCIgc3R5bGU9e1N0eWxlcy50aXRsZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy50aXRsZX1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LTEwMCBwLTEgbXV0ZWRcIiBzdHlsZT17U3R5bGVzLnN1YnRpdGxlfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLnN1YnRpdGxlIHx8IFwiXCJ9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY29sb3I9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXtTdHlsZXMuYnV0dG9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJzbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibS0xXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnByb3BzLm9uQ2FuY2VsKCl9PkNhbmNlbDwvQnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17U3R5bGVzLmJ1dHRvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm0tMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5wcm9wcy5vbkNvbmZpcm0oKX0+Q29uZmlybTwvQnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgPC9Qb3BvdmVyQm9keT5cblxuICAgICAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICApO1xuICAgIH1cblxufVxuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICBvcGVuOiBib29sZWFuO1xuICAgIHRhcmdldDogc3RyaW5nO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgc3VidGl0bGU/OiBzdHJpbmc7XG4gICAgcGxhY2VtZW50PzogUG9wcGVyLlBsYWNlbWVudDtcbiAgICBvbkNhbmNlbDogKCkgPT4gdm9pZDtcbiAgICBvbkNvbmZpcm06ICgpID0+IHZvaWQ7XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICAgIG9wZW46IGJvb2xlYW47XG59XG5cbiJdfQ==