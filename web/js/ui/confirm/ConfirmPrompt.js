"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const reactstrap_1 = require("reactstrap");
class Styles {
}
Styles.title = {
    fontSize: "20px",
    fontWeight: "bold"
};
Styles.subtitle = {
    fontSize: "14px"
};
Styles.button = {
    fontSize: "14px"
};
Styles.popover = {};
class ConfirmPrompt extends react_1.default.Component {
    constructor(props) {
        super(props);
    }
    render() {
        return (react_1.default.createElement(reactstrap_1.Popover, { placement: this.props.placement || 'bottom', isOpen: this.props.open, target: this.props.target, className: "confirm-prompt", style: Styles.popover },
            react_1.default.createElement(reactstrap_1.PopoverBody, { className: "text-center" },
                react_1.default.createElement("div", { className: "w-100 p-1", style: Styles.title }, this.props.title),
                react_1.default.createElement("div", { className: "w-100 p-1 muted", style: Styles.subtitle }, this.props.subtitle || ""),
                react_1.default.createElement(reactstrap_1.Button, { color: "secondary", style: Styles.button, size: "sm", className: "m-1", onClick: () => this.props.onCancel() }, "Cancel"),
                react_1.default.createElement(reactstrap_1.Button, { color: "primary", style: Styles.button, size: "sm", className: "m-1", onClick: () => this.props.onConfirm() }, "Confirm"))));
    }
}
exports.ConfirmPrompt = ConfirmPrompt;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZmlybVByb21wdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNvbmZpcm1Qcm9tcHQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0Esa0RBQTBCO0FBQzFCLDJDQUF3RDtBQUl4RCxNQUFNLE1BQU07O0FBRU0sWUFBSyxHQUF3QjtJQUN2QyxRQUFRLEVBQUUsTUFBTTtJQUNoQixVQUFVLEVBQUUsTUFBTTtDQUNyQixDQUFDO0FBRVksZUFBUSxHQUF3QjtJQUMxQyxRQUFRLEVBQUUsTUFBTTtDQUNuQixDQUFDO0FBRVksYUFBTSxHQUF3QjtJQUN4QyxRQUFRLEVBQUUsTUFBTTtDQUNuQixDQUFDO0FBRVksY0FBTyxHQUF3QixFQUU1QyxDQUFDO0FBSU4sTUFBYSxhQUFjLFNBQVEsZUFBSyxDQUFDLFNBQXFDO0lBRTFFLFlBQVksS0FBeUI7UUFDakMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRWpCLENBQUM7SUFFTSxNQUFNO1FBRVQsT0FBTyxDQUVILDhCQUFDLG9CQUFPLElBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxJQUFJLFFBQVEsRUFDM0MsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUN2QixNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQ3pCLFNBQVMsRUFBQyxnQkFBZ0IsRUFDMUIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxPQUFPO1lBRTFCLDhCQUFDLHdCQUFXLElBQUMsU0FBUyxFQUFDLGFBQWE7Z0JBRWhDLHVDQUFLLFNBQVMsRUFBQyxXQUFXLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLElBQ3pDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUNmO2dCQUVOLHVDQUFLLFNBQVMsRUFBQyxpQkFBaUIsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsSUFDbEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksRUFBRSxDQUN4QjtnQkFFTiw4QkFBQyxtQkFBTSxJQUFDLEtBQUssRUFBQyxXQUFXLEVBQ2pCLEtBQUssRUFBRSxNQUFNLENBQUMsTUFBTSxFQUNwQixJQUFJLEVBQUMsSUFBSSxFQUNULFNBQVMsRUFBQyxLQUFLLEVBQ2YsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLGFBQWlCO2dCQUU3RCw4QkFBQyxtQkFBTSxJQUFDLEtBQUssRUFBQyxTQUFTLEVBQ2YsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQ3BCLElBQUksRUFBQyxJQUFJLEVBQ1QsU0FBUyxFQUFDLEtBQUssRUFDZixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsY0FBa0IsQ0FFckQsQ0FFUixDQUNiLENBQUM7SUFDTixDQUFDO0NBRUo7QUE3Q0Qsc0NBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IHJlYWN0L25vLW11bHRpLWNvbXA6IDAsIHJlYWN0L3Byb3AtdHlwZXM6IDAgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0J1dHRvbiwgUG9wb3ZlciwgUG9wb3ZlckJvZHl9IGZyb20gJ3JlYWN0c3RyYXAnO1xuaW1wb3J0IFBvcHBlciBmcm9tICdwb3BwZXIuanMnO1xuaW1wb3J0IHtJU3R5bGVNYXB9IGZyb20gJy4uLy4uL3JlYWN0L0lTdHlsZU1hcCc7XG5cbmNsYXNzIFN0eWxlcyB7XG5cbiAgICBwdWJsaWMgc3RhdGljIHRpdGxlOiBSZWFjdC5DU1NQcm9wZXJ0aWVzID0ge1xuICAgICAgICBmb250U2l6ZTogXCIyMHB4XCIsXG4gICAgICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiXG4gICAgfTtcblxuICAgIHB1YmxpYyBzdGF0aWMgc3VidGl0bGU6IFJlYWN0LkNTU1Byb3BlcnRpZXMgPSB7XG4gICAgICAgIGZvbnRTaXplOiBcIjE0cHhcIlxuICAgIH07XG5cbiAgICBwdWJsaWMgc3RhdGljIGJ1dHRvbjogUmVhY3QuQ1NTUHJvcGVydGllcyA9IHtcbiAgICAgICAgZm9udFNpemU6IFwiMTRweFwiXG4gICAgfTtcblxuICAgIHB1YmxpYyBzdGF0aWMgcG9wb3ZlcjogUmVhY3QuQ1NTUHJvcGVydGllcyA9IHtcbiAgICAgICAgLy8gVE9EOiB3aWR0aCBpc24ndCB3b3JraW5nIHJpZ2h0IG5vdy5cbiAgICB9O1xuXG59XG5cbmV4cG9ydCBjbGFzcyBDb25maXJtUHJvbXB0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PENvbmZpcm1Qcm9tcHRQcm9wcywgSVN0YXRlPiB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogQ29uZmlybVByb21wdFByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG5cbiAgICAgICAgcmV0dXJuIChcblxuICAgICAgICAgICAgPFBvcG92ZXIgcGxhY2VtZW50PXt0aGlzLnByb3BzLnBsYWNlbWVudCB8fCAnYm90dG9tJ31cbiAgICAgICAgICAgICAgICAgICAgIGlzT3Blbj17dGhpcy5wcm9wcy5vcGVufVxuICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PXt0aGlzLnByb3BzLnRhcmdldH1cbiAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNvbmZpcm0tcHJvbXB0XCJcbiAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXtTdHlsZXMucG9wb3Zlcn0+XG5cbiAgICAgICAgICAgICAgICA8UG9wb3ZlckJvZHkgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctMTAwIHAtMVwiIHN0eWxlPXtTdHlsZXMudGl0bGV9PlxuICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMudGl0bGV9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy0xMDAgcC0xIG11dGVkXCIgc3R5bGU9e1N0eWxlcy5zdWJ0aXRsZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5zdWJ0aXRsZSB8fCBcIlwifVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNvbG9yPVwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17U3R5bGVzLmJ1dHRvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm0tMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5wcm9wcy5vbkNhbmNlbCgpfT5DYW5jZWw8L0J1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e1N0eWxlcy5idXR0b259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtLTFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMucHJvcHMub25Db25maXJtKCl9PkNvbmZpcm08L0J1dHRvbj5cblxuICAgICAgICAgICAgICAgIDwvUG9wb3ZlckJvZHk+XG5cbiAgICAgICAgICAgIDwvUG9wb3Zlcj5cbiAgICAgICAgKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb25maXJtUHJvbXB0UHJvcHMge1xuICAgIG9wZW4/OiBib29sZWFuO1xuICAgIHRhcmdldDogc3RyaW5nO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgc3VidGl0bGU/OiBzdHJpbmc7XG4gICAgcGxhY2VtZW50PzogUG9wcGVyLlBsYWNlbWVudDtcbiAgICBvbkNhbmNlbDogKCkgPT4gdm9pZDtcbiAgICBvbkNvbmZpcm06ICgpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIHtcbiAgICBvcGVuOiBib29sZWFuO1xufVxuXG4iXX0=