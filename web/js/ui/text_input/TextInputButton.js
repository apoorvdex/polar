"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const reactstrap_1 = require("reactstrap");
class TextInputButton extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.value = '';
        this.onCancel = this.onCancel.bind(this);
        this.toggle = this.toggle.bind(this);
        this.state = {
            popoverOpen: false
        };
    }
    render() {
        return (react_1.default.createElement("div", null,
            react_1.default.createElement(reactstrap_1.Button, { id: this.props.id, onClick: this.toggle }, this.props.children),
            react_1.default.createElement(reactstrap_1.Popover, { placement: this.props.placement || 'bottom', isOpen: this.state.popoverOpen, target: this.props.id, toggle: this.toggle },
                react_1.default.createElement(reactstrap_1.PopoverBody, null,
                    react_1.default.createElement("div", { className: "w-100 text-center lead p-1" }),
                    react_1.default.createElement(reactstrap_1.Form, null,
                        react_1.default.createElement(reactstrap_1.FormGroup, null,
                            react_1.default.createElement(reactstrap_1.Label, { className: "font-weight-bold", for: this.props.id }, this.props.title),
                            react_1.default.createElement(reactstrap_1.Input, { type: "text", name: "text", id: this.props.id, onChange: (event) => this.value = event.target.value, placeholder: this.props.placement || '' }))),
                    react_1.default.createElement("div", { className: "text-right" },
                        react_1.default.createElement(reactstrap_1.Button, { color: "secondary", size: "sm", className: "m-1", onClick: () => this.onCancel() }, "Cancel"),
                        react_1.default.createElement(reactstrap_1.Button, { color: "primary", size: "sm", className: "m-1", onClick: () => this.props.onComplete(this.value) }, "Set"))))));
    }
    hide() {
        this.setState({
            popoverOpen: false
        });
    }
    onCancel() {
        this.hide();
    }
    toggle() {
        this.setState({
            popoverOpen: !this.state.popoverOpen
        });
    }
}
exports.TextInputButton = TextInputButton;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dElucHV0QnV0dG9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGV4dElucHV0QnV0dG9uLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLGtEQUEwQjtBQUMxQiwyQ0FBdUY7QUFHdkYsTUFBYSxlQUFnQixTQUFRLGVBQUssQ0FBQyxTQUF5QjtJQUloRSxZQUFZLEtBQWE7UUFDckIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBSFQsVUFBSyxHQUFXLEVBQUUsQ0FBQztRQUt2QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFckMsSUFBSSxDQUFDLEtBQUssR0FBRztZQUNULFdBQVcsRUFBRSxLQUFLO1NBQ3JCLENBQUM7SUFFTixDQUFDO0lBRU0sTUFBTTtRQUNULE9BQU8sQ0FDSDtZQUVJLDhCQUFDLG1CQUFNLElBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxJQUMxQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FDZjtZQUVULDhCQUFDLG9CQUFPLElBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxJQUFJLFFBQVEsRUFDM0MsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUM5QixNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQ3JCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtnQkFFeEIsOEJBQUMsd0JBQVc7b0JBRVIsdUNBQUssU0FBUyxFQUFDLDRCQUE0QixHQUVyQztvQkFFTiw4QkFBQyxpQkFBSTt3QkFFRCw4QkFBQyxzQkFBUzs0QkFFTiw4QkFBQyxrQkFBSyxJQUFDLFNBQVMsRUFBQyxrQkFBa0IsRUFBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQVM7NEJBRWxGLDhCQUFDLGtCQUFLLElBQUMsSUFBSSxFQUFDLE1BQU0sRUFDWCxJQUFJLEVBQUMsTUFBTSxFQUNYLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFDakIsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUNwRCxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLElBQUksRUFBRSxHQUFHLENBRXpDLENBRVQ7b0JBRVAsdUNBQUssU0FBUyxFQUFDLFlBQVk7d0JBRXZCLDhCQUFDLG1CQUFNLElBQUMsS0FBSyxFQUFDLFdBQVcsRUFDakIsSUFBSSxFQUFDLElBQUksRUFDVCxTQUFTLEVBQUMsS0FBSyxFQUNmLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGFBQWlCO3dCQUV2RCw4QkFBQyxtQkFBTSxJQUFDLEtBQUssRUFBQyxTQUFTLEVBQ2YsSUFBSSxFQUFDLElBQUksRUFDVCxTQUFTLEVBQUMsS0FBSyxFQUNmLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQWMsQ0FFcEUsQ0FFSSxDQUVSLENBRVIsQ0FDVCxDQUFDO0lBQ04sQ0FBQztJQUVPLElBQUk7UUFDUixJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ0ksV0FBVyxFQUFFLEtBQUs7U0FDckIsQ0FBQyxDQUFDO0lBRXJCLENBQUM7SUFFTyxRQUFRO1FBQ1osSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFTyxNQUFNO1FBQ1YsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNJLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVztTQUN2QyxDQUFDLENBQUM7SUFDckIsQ0FBQztDQUVKO0FBMUZELDBDQTBGQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCByZWFjdC9uby1tdWx0aS1jb21wOiAwLCByZWFjdC9wcm9wLXR5cGVzOiAwICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtCdXR0b24sIEZvcm0sIEZvcm1Hcm91cCwgSW5wdXQsIExhYmVsLCBQb3BvdmVyLCBQb3BvdmVyQm9keX0gZnJvbSAncmVhY3RzdHJhcCc7XG5pbXBvcnQgUG9wcGVyIGZyb20gJ3BvcHBlci5qcyc7XG5cbmV4cG9ydCBjbGFzcyBUZXh0SW5wdXRCdXR0b24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcblxuICAgIHByaXZhdGUgdmFsdWU6IHN0cmluZyA9ICcnO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IElQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5vbkNhbmNlbCA9IHRoaXMub25DYW5jZWwuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy50b2dnbGUgPSB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBwb3BvdmVyT3BlbjogZmFsc2VcbiAgICAgICAgfTtcblxuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2PlxuXG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBpZD17dGhpcy5wcm9wcy5pZH0gb25DbGljaz17dGhpcy50b2dnbGV9PlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICAgICAgICAgIDxQb3BvdmVyIHBsYWNlbWVudD17dGhpcy5wcm9wcy5wbGFjZW1lbnQgfHwgJ2JvdHRvbSd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgaXNPcGVuPXt0aGlzLnN0YXRlLnBvcG92ZXJPcGVufVxuICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD17dGhpcy5wcm9wcy5pZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGU9e3RoaXMudG9nZ2xlfT5cblxuICAgICAgICAgICAgICAgICAgICA8UG9wb3ZlckJvZHk+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy0xMDAgdGV4dC1jZW50ZXIgbGVhZCBwLTFcIj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxGb3JtPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZvcm1Hcm91cD5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWwgY2xhc3NOYW1lPVwiZm9udC13ZWlnaHQtYm9sZFwiIGZvcj17dGhpcy5wcm9wcy5pZH0+e3RoaXMucHJvcHMudGl0bGV9PC9MYWJlbD5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e3RoaXMucHJvcHMuaWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PiB0aGlzLnZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3RoaXMucHJvcHMucGxhY2VtZW50IHx8ICcnfS8+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Gb3JtPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtcmlnaHRcIj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY29sb3I9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm0tMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLm9uQ2FuY2VsKCl9PkNhbmNlbDwvQnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm0tMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnByb3BzLm9uQ29tcGxldGUodGhpcy52YWx1ZSl9PlNldDwvQnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8L1BvcG92ZXJCb2R5PlxuXG4gICAgICAgICAgICAgICAgPC9Qb3BvdmVyPlxuXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwb3BvdmVyT3BlbjogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIHByaXZhdGUgb25DYW5jZWwoKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdG9nZ2xlKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wb3Zlck9wZW46ICF0aGlzLnN0YXRlLnBvcG92ZXJPcGVuXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgfVxuXG59XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBwbGFjZW1lbnQ/OiBQb3BwZXIuUGxhY2VtZW50O1xuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICAgIG9uQ29tcGxldGU6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICBwb3BvdmVyT3BlbjogYm9vbGVhbjtcbn1cblxuIl19