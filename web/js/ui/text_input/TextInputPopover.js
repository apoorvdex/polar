"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const reactstrap_1 = require("reactstrap");
const Blackout_1 = require("../blackout/Blackout");
class TextInputPopover extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.value = '';
    }
    componentDidUpdate(prevProps, prevState, snapshot) {
    }
    componentWillReceiveProps(nextProps, nextContext) {
        if (this.props.open !== nextProps.open) {
            Blackout_1.Blackout.toggle(nextProps.open);
        }
    }
    componentWillUnmount() {
        Blackout_1.Blackout.disable();
    }
    render() {
        return (react_1.default.createElement(reactstrap_1.Popover, { placement: this.props.placement || 'bottom', isOpen: this.props.open, target: this.props.target, className: "text-input-popover" },
            react_1.default.createElement(reactstrap_1.PopoverBody, null,
                react_1.default.createElement("div", { className: "w-100 text-center lead p-1" }),
                react_1.default.createElement(reactstrap_1.Label, { className: "font-weight-bold", for: this.props.target + '-input' }, this.props.title),
                react_1.default.createElement(reactstrap_1.Input, { type: "text", name: "text", id: this.props.target + '-input', onKeyDown: event => this.onKeyDown(event), defaultValue: this.props.defaultValue || '', onChange: (event) => this.value = event.target.value, autoFocus: true, placeholder: this.props.placement || '' }),
                react_1.default.createElement("div", { className: "text-right mt-1" },
                    react_1.default.createElement(reactstrap_1.Button, { color: "secondary", size: "sm", className: "m-1", onClick: () => this.props.onCancel() }, "Cancel"),
                    react_1.default.createElement(reactstrap_1.Button, { color: "primary", size: "sm", className: "m-1", onClick: () => this.props.onComplete(this.value) }, "Set")))));
    }
    onKeyDown(event) {
        if (event.key === "Enter") {
            this.props.onComplete(this.value);
        }
    }
}
exports.TextInputPopover = TextInputPopover;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dElucHV0UG9wb3Zlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlRleHRJbnB1dFBvcG92ZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0Esa0RBQTBCO0FBQzFCLDJDQUFzRTtBQUV0RSxtREFBOEM7QUFFOUMsTUFBYSxnQkFBaUIsU0FBUSxlQUFLLENBQUMsU0FBeUI7SUFJakUsWUFBWSxLQUFhO1FBQ3JCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUhULFVBQUssR0FBVyxFQUFFLENBQUM7SUFLM0IsQ0FBQztJQUVNLGtCQUFrQixDQUFDLFNBQTJCLEVBQUUsU0FBMkIsRUFBRSxRQUFjO0lBRWxHLENBQUM7SUFFTSx5QkFBeUIsQ0FBQyxTQUEyQixFQUFFLFdBQWdCO1FBQzFFLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLElBQUksRUFBRTtZQUNwQyxtQkFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbkM7SUFDTCxDQUFDO0lBRU0sb0JBQW9CO1FBQ3ZCLG1CQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVNLE1BQU07UUFFVCxPQUFPLENBR0gsOEJBQUMsb0JBQU8sSUFBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLElBQUksUUFBUSxFQUMzQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQ3ZCLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFDekIsU0FBUyxFQUFDLG9CQUFvQjtZQUVuQyw4QkFBQyx3QkFBVztnQkFFUix1Q0FBSyxTQUFTLEVBQUMsNEJBQTRCLEdBRXJDO2dCQUVOLDhCQUFDLGtCQUFLLElBQUMsU0FBUyxFQUFDLGtCQUFrQixFQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxRQUFRLElBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQVM7Z0JBRWpHLDhCQUFDLGtCQUFLLElBQUMsSUFBSSxFQUFDLE1BQU0sRUFDWCxJQUFJLEVBQUMsTUFBTSxFQUNYLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxRQUFRLEVBQ2hDLFNBQVMsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQ3pDLFlBQVksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksSUFBSyxFQUFFLEVBQzVDLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFDcEQsU0FBUyxRQUNULFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsSUFBSSxFQUFFLEdBQUc7Z0JBRWpELHVDQUFLLFNBQVMsRUFBQyxpQkFBaUI7b0JBRTVCLDhCQUFDLG1CQUFNLElBQUMsS0FBSyxFQUFDLFdBQVcsRUFDakIsSUFBSSxFQUFDLElBQUksRUFDVCxTQUFTLEVBQUMsS0FBSyxFQUNmLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxhQUFpQjtvQkFFN0QsOEJBQUMsbUJBQU0sSUFBQyxLQUFLLEVBQUMsU0FBUyxFQUNmLElBQUksRUFBQyxJQUFJLEVBQ1QsU0FBUyxFQUFDLEtBQUssRUFDZixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFjLENBRXBFLENBRUksQ0FFUixDQUdiLENBQUM7SUFDTixDQUFDO0lBRU8sU0FBUyxDQUFDLEtBQXVDO1FBRXJELElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxPQUFPLEVBQUU7WUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3JDO0lBRUwsQ0FBQztDQUVKO0FBaEZELDRDQWdGQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCByZWFjdC9uby1tdWx0aS1jb21wOiAwLCByZWFjdC9wcm9wLXR5cGVzOiAwICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtCdXR0b24sIElucHV0LCBMYWJlbCwgUG9wb3ZlciwgUG9wb3ZlckJvZHl9IGZyb20gJ3JlYWN0c3RyYXAnO1xuaW1wb3J0IFBvcHBlciBmcm9tICdwb3BwZXIuanMnO1xuaW1wb3J0IHtCbGFja291dH0gZnJvbSAnLi4vYmxhY2tvdXQvQmxhY2tvdXQnO1xuXG5leHBvcnQgY2xhc3MgVGV4dElucHV0UG9wb3ZlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuXG4gICAgcHJpdmF0ZSB2YWx1ZTogc3RyaW5nID0gJyc7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgIH1cblxuICAgIHB1YmxpYyBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzOiBSZWFkb25seTxJUHJvcHM+LCBwcmV2U3RhdGU6IFJlYWRvbmx5PElTdGF0ZT4sIHNuYXBzaG90PzogYW55KTogdm9pZCB7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHM6IFJlYWRvbmx5PElQcm9wcz4sIG5leHRDb250ZXh0OiBhbnkpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMub3BlbiAhPT0gbmV4dFByb3BzLm9wZW4pIHtcbiAgICAgICAgICAgIEJsYWNrb3V0LnRvZ2dsZShuZXh0UHJvcHMub3Blbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgY29tcG9uZW50V2lsbFVubW91bnQoKTogdm9pZCB7XG4gICAgICAgIEJsYWNrb3V0LmRpc2FibGUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuXG4gICAgICAgIHJldHVybiAoXG5cbiAgICAgICAgICAgIC8vIFRPRE86IHNldCB0aGUgbWluLXdpZHRoIGhlcmUgdmlhIGlubGluZSBzdHlsZXNcbiAgICAgICAgICAgIDxQb3BvdmVyIHBsYWNlbWVudD17dGhpcy5wcm9wcy5wbGFjZW1lbnQgfHwgJ2JvdHRvbSd9XG4gICAgICAgICAgICAgICAgICAgICBpc09wZW49e3RoaXMucHJvcHMub3Blbn1cbiAgICAgICAgICAgICAgICAgICAgIHRhcmdldD17dGhpcy5wcm9wcy50YXJnZXR9XG4gICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWlucHV0LXBvcG92ZXJcIj5cblxuICAgICAgICAgICAgICAgIDxQb3BvdmVyQm9keT5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctMTAwIHRleHQtY2VudGVyIGxlYWQgcC0xXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPExhYmVsIGNsYXNzTmFtZT1cImZvbnQtd2VpZ2h0LWJvbGRcIiBmb3I9e3RoaXMucHJvcHMudGFyZ2V0ICsgJy1pbnB1dCd9Pnt0aGlzLnByb3BzLnRpdGxlfTwvTGFiZWw+XG5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0IHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLnRhcmdldCArICctaW5wdXQnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgb25LZXlEb3duPXtldmVudCA9PiB0aGlzLm9uS2V5RG93bihldmVudCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9e3RoaXMucHJvcHMuZGVmYXVsdFZhbHVlICB8fCAnJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpID0+IHRoaXMudmFsdWUgPSBldmVudC50YXJnZXQudmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvRm9jdXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXt0aGlzLnByb3BzLnBsYWNlbWVudCB8fCAnJ30vPlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1yaWdodCBtdC0xXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY29sb3I9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtLTFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnByb3BzLm9uQ2FuY2VsKCl9PkNhbmNlbDwvQnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJzbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm0tMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMucHJvcHMub25Db21wbGV0ZSh0aGlzLnZhbHVlKX0+U2V0PC9CdXR0b24+XG5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8L1BvcG92ZXJCb2R5PlxuXG4gICAgICAgICAgICA8L1BvcG92ZXI+XG5cblxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25LZXlEb3duKGV2ZW50OiBSZWFjdC5LZXlib2FyZEV2ZW50PEhUTUxFbGVtZW50Pikge1xuXG4gICAgICAgIGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNvbXBsZXRlKHRoaXMudmFsdWUpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgdGFyZ2V0OiBzdHJpbmc7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBkZWZhdWx0VmFsdWU/OiBzdHJpbmc7XG4gICAgb3BlbjogYm9vbGVhbjtcbiAgICBwbGFjZW1lbnQ/OiBQb3BwZXIuUGxhY2VtZW50O1xuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICAgIG9uQ2FuY2VsOiAoKSA9PiB2b2lkO1xuICAgIG9uQ29tcGxldGU6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcblxufVxuXG4iXX0=