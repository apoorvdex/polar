"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Numbers_1 = require("../../util/Numbers");
const SplashLifecycle_1 = require("../../../../apps/repository/js/splash/SplashLifecycle");
const LifecycleEvents_1 = require("../util/LifecycleEvents");
const LocalPrefs_1 = require("../../util/LocalPrefs");
const RendererAnalytics_1 = require("../../ga/RendererAnalytics");
class PrioritizedComponentManager extends React.Component {
    constructor(props) {
        super(props);
    }
    render() {
        const NullComponent = () => {
            return (React.createElement("div", null));
        };
        if (!LocalPrefs_1.LocalPrefs.isMarked(LifecycleEvents_1.LifecycleEvents.TOUR_TERMINATED)) {
            return React.createElement(NullComponent, null);
        }
        if (!SplashLifecycle_1.SplashLifecycle.canShow()) {
            return React.createElement(NullComponent, null);
        }
        const datastoreOverview = this.props.datastoreOverview;
        const sorted = [...this.props.prioritizedComponentRefs]
            .filter(current => current.priority(datastoreOverview) !== undefined)
            .sort((o1, o2) => Numbers_1.Numbers.compare(o1.priority(datastoreOverview), o2.priority(datastoreOverview)) * -1);
        if (sorted.length === 0 || document.location.hash !== '') {
            return React.createElement(NullComponent, null);
        }
        SplashLifecycle_1.SplashLifecycle.markShown();
        RendererAnalytics_1.RendererAnalytics.event({ category: 'splashes', action: 'shown' });
        const prioritizedComponentRef = sorted[0];
        RendererAnalytics_1.RendererAnalytics.event({ category: 'splashes-shown', action: prioritizedComponentRef.id });
        return prioritizedComponentRef.create();
    }
}
exports.PrioritizedComponentManager = PrioritizedComponentManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJpb3JpdGl6ZWRDb21wb25lbnRNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUHJpb3JpdGl6ZWRDb21wb25lbnRNYW5hZ2VyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSw2Q0FBK0I7QUFTL0IsZ0RBQTJDO0FBQzNDLDJGQUFzRjtBQUN0Riw2REFBd0Q7QUFDeEQsc0RBQWlEO0FBQ2pELGtFQUE2RDtBQUc3RCxNQUFhLDJCQUE0QixTQUFRLEtBQUssQ0FBQyxTQUF5QjtJQUU1RSxZQUFZLEtBQWE7UUFDckIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRWpCLENBQUM7SUFFTSxNQUFNO1FBRVQsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO1lBQ3ZCLE9BQU8sQ0FBQyxnQ0FBVyxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFFLHVCQUFVLENBQUMsUUFBUSxDQUFDLGlDQUFlLENBQUMsZUFBZSxDQUFDLEVBQUU7WUFFeEQsT0FBTyxvQkFBQyxhQUFhLE9BQUUsQ0FBQztTQUMzQjtRQUVELElBQUksQ0FBRSxpQ0FBZSxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzdCLE9BQU8sb0JBQUMsYUFBYSxPQUFFLENBQUM7U0FDM0I7UUFFRCxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUM7UUFFdkQsTUFBTSxNQUFNLEdBQ1IsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsd0JBQXdCLENBQUM7YUFDbkMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLFNBQVMsQ0FBQzthQUNwRSxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxpQkFBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVoSCxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLFFBQVEsQ0FBQyxRQUFTLENBQUMsSUFBSSxLQUFLLEVBQUUsRUFBRTtZQUt2RCxPQUFPLG9CQUFDLGFBQWEsT0FBRSxDQUFDO1NBQzNCO1FBR0QsaUNBQWUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUU1QixxQ0FBaUIsQ0FBQyxLQUFLLENBQUMsRUFBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO1FBRWpFLE1BQU0sdUJBQXVCLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTFDLHFDQUFpQixDQUFDLEtBQUssQ0FBQyxFQUFDLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsdUJBQXVCLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQztRQUcxRixPQUFPLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxDQUFDO0lBRTVDLENBQUM7Q0FFSjtBQW5ERCxrRUFtREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0J1dHRvbn0gZnJvbSAncmVhY3RzdHJhcCc7XG5pbXBvcnQge0FjdGl2ZVNlbGVjdGlvbn0gZnJvbSAnLi4vcG9wdXAvQWN0aXZlU2VsZWN0aW9ucyc7XG5pbXBvcnQge0lFdmVudERpc3BhdGNoZXJ9IGZyb20gJy4uLy4uL3JlYWN0b3IvU2ltcGxlUmVhY3Rvcic7XG5pbXBvcnQge0Fubm90YXRpb25EZXNjcmlwdG9yfSBmcm9tICcuLi8uLi9tZXRhZGF0YS9Bbm5vdGF0aW9uRGVzY3JpcHRvcic7XG5pbXBvcnQge0hpZ2hsaWdodENyZWF0ZWRFdmVudH0gZnJvbSAnLi4vLi4vY29tbWVudHMvcmVhY3QvSGlnaGxpZ2h0Q3JlYXRlZEV2ZW50JztcbmltcG9ydCB7SGlnaGxpZ2h0Q29sb3J9IGZyb20gJy4uLy4uL21ldGFkYXRhL0Jhc2VIaWdobGlnaHQnO1xuaW1wb3J0IHtQb3B1cFN0YXRlRXZlbnR9IGZyb20gJy4uL3BvcHVwL1BvcHVwU3RhdGVFdmVudCc7XG5pbXBvcnQge0V2ZW50TGlzdGVuZXJ9IGZyb20gJy4uLy4uL3JlYWN0b3IvRXZlbnRMaXN0ZW5lcic7XG5pbXBvcnQge051bWJlcnN9IGZyb20gJy4uLy4uL3V0aWwvTnVtYmVycyc7XG5pbXBvcnQge1NwbGFzaExpZmVjeWNsZX0gZnJvbSAnLi4vLi4vLi4vLi4vYXBwcy9yZXBvc2l0b3J5L2pzL3NwbGFzaC9TcGxhc2hMaWZlY3ljbGUnO1xuaW1wb3J0IHtMaWZlY3ljbGVFdmVudHN9IGZyb20gJy4uL3V0aWwvTGlmZWN5Y2xlRXZlbnRzJztcbmltcG9ydCB7TG9jYWxQcmVmc30gZnJvbSAnLi4vLi4vdXRpbC9Mb2NhbFByZWZzJztcbmltcG9ydCB7UmVuZGVyZXJBbmFseXRpY3N9IGZyb20gJy4uLy4uL2dhL1JlbmRlcmVyQW5hbHl0aWNzJztcbmltcG9ydCB7RGF0YXN0b3JlT3ZlcnZpZXd9IGZyb20gJy4uLy4uL2RhdGFzdG9yZS9EYXRhc3RvcmUnO1xuXG5leHBvcnQgY2xhc3MgUHJpb3JpdGl6ZWRDb21wb25lbnRNYW5hZ2VyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG5cbiAgICAgICAgY29uc3QgTnVsbENvbXBvbmVudCA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoPGRpdj48L2Rpdj4pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghIExvY2FsUHJlZnMuaXNNYXJrZWQoTGlmZWN5Y2xlRXZlbnRzLlRPVVJfVEVSTUlOQVRFRCkpIHtcbiAgICAgICAgICAgIC8vIG5vIHNwbGFzaGVzIHVubGVzcyB3ZSBoYXZlIHRoZSB0b3VyLlxuICAgICAgICAgICAgcmV0dXJuIDxOdWxsQ29tcG9uZW50Lz47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoISBTcGxhc2hMaWZlY3ljbGUuY2FuU2hvdygpKSB7XG4gICAgICAgICAgICByZXR1cm4gPE51bGxDb21wb25lbnQvPjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRhdGFzdG9yZU92ZXJ2aWV3ID0gdGhpcy5wcm9wcy5kYXRhc3RvcmVPdmVydmlldztcblxuICAgICAgICBjb25zdCBzb3J0ZWQgPVxuICAgICAgICAgICAgWy4uLnRoaXMucHJvcHMucHJpb3JpdGl6ZWRDb21wb25lbnRSZWZzXVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoY3VycmVudCA9PiBjdXJyZW50LnByaW9yaXR5KGRhdGFzdG9yZU92ZXJ2aWV3KSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIC5zb3J0KChvMSwgbzIpID0+IE51bWJlcnMuY29tcGFyZShvMS5wcmlvcml0eShkYXRhc3RvcmVPdmVydmlldyksIG8yLnByaW9yaXR5KGRhdGFzdG9yZU92ZXJ2aWV3KSkgKiAtMSk7XG5cbiAgICAgICAgaWYgKHNvcnRlZC5sZW5ndGggPT09IDAgfHwgZG9jdW1lbnQubG9jYXRpb24hLmhhc2ggIT09ICcnKSB7XG4gICAgICAgICAgICAvLyByZXR1cm4gYW4gZW1wdHkgZGl2IGlmIHdlIGhhdmUgbm8gc3BsYXNoZXMgT1IgaWYgd2UgaGF2ZSBhXG4gICAgICAgICAgICAvLyBzcGVjaWZpYyBoYXNoIFVSTCB0byBsb2FkLiAgVGhlIHNwbGFzaGVzIHNob3VsZCBvbmx5IGdvIG9uIHRoZVxuICAgICAgICAgICAgLy8gaG9tZSBwYWdlIG9uIGxvYWQuXG5cbiAgICAgICAgICAgIHJldHVybiA8TnVsbENvbXBvbmVudC8+O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbWFyayB0aGlzIGFzIHNob3duIHNvIHRoYXQgd2UgZGVsYXkgdGhlIG5leHQgc3BsYXNoLCBldmVuIG9uIHJlZnJlc2hcbiAgICAgICAgU3BsYXNoTGlmZWN5Y2xlLm1hcmtTaG93bigpO1xuXG4gICAgICAgIFJlbmRlcmVyQW5hbHl0aWNzLmV2ZW50KHtjYXRlZ29yeTogJ3NwbGFzaGVzJywgYWN0aW9uOiAnc2hvd24nfSk7XG5cbiAgICAgICAgY29uc3QgcHJpb3JpdGl6ZWRDb21wb25lbnRSZWYgPSBzb3J0ZWRbMF07XG5cbiAgICAgICAgUmVuZGVyZXJBbmFseXRpY3MuZXZlbnQoe2NhdGVnb3J5OiAnc3BsYXNoZXMtc2hvd24nLCBhY3Rpb246IHByaW9yaXRpemVkQ29tcG9uZW50UmVmLmlkfSk7XG5cbiAgICAgICAgLy8gcmV0dXJuIHRoZSB0b3AgcmFua2luZyBlbGVtZW50LlxuICAgICAgICByZXR1cm4gcHJpb3JpdGl6ZWRDb21wb25lbnRSZWYuY3JlYXRlKCk7XG5cbiAgICB9XG5cbn1cblxuLyoqXG4gKiBBbGxvd3MgdXMgdG8gZ2l2ZSBhIHNldCBvciBjb21wb25lbnRzIHRvIHRoZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFByaW9yaXRpemVkQ29tcG9uZW50IHtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyB0aGUgY29tcG9uZW50IHRvIGRldGVybWluZSBpdHMgcHJpb3JpdHkuICBUaGlzIGNvdWxkIGJlIHVzZWRcbiAgICAgKiB0byBzZWUgaWYgaXQgbmVlZHMgdG8gcG9wdXAgbm93IG9yIGp1c3Qgc29tZSBzb3J0IG9mIHN0YXRpYyBwcmlvcml0eS5cbiAgICAgKlxuICAgICAqIFJldHVybiB1bmRlZmluZWQgaWYgdGhlIGNvbXBvbmVudCBzaG91bGQgbm90IGJlIGRpc3BsYXllZC4gIFRoaXMgY2FuIGJlXG4gICAgICogdXNlZCBpZiB0aGUgdXNlciBoYXMgYWxyZWFkeSBwZXJmb3JtZWQgYSBnaXZlbiBhY3Rpb24uXG4gICAgICovXG4gICAgcHJpb3JpdHkoKTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJpb3JpdGl6ZWRDb21wb25lbnRSZWYge1xuXG4gICAgaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyB0aGUgY29tcG9uZW50IHRvIGRldGVybWluZSBpdHMgcHJpb3JpdHkuICBUaGlzIGNvdWxkIGJlIHVzZWRcbiAgICAgKiB0byBzZWUgaWYgaXQgbmVlZHMgdG8gcG9wdXAgbm93IG9yIGp1c3Qgc29tZSBzb3J0IG9mIHN0YXRpYyBwcmlvcml0eS5cbiAgICAgKlxuICAgICAqIFJldHVybiB1bmRlZmluZWQgaWYgdGhlIGNvbXBvbmVudCBzaG91bGQgbm90IGJlIGRpc3BsYXllZC4gIFRoaXMgY2FuIGJlXG4gICAgICogdXNlZCBpZiB0aGUgdXNlciBoYXMgYWxyZWFkeSBwZXJmb3JtZWQgYSBnaXZlbiBhY3Rpb24uXG4gICAgICovXG4gICAgcHJpb3JpdHkoZGF0YXN0b3JlT3ZlcnZpZXc6IERhdGFzdG9yZU92ZXJ2aWV3KTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSBjb21wb25lbnQgd2hlbiB3ZSdyZSByZWFkeSBmb3IgaXQuXG4gICAgICovXG4gICAgY3JlYXRlKCk6IEpTWC5FbGVtZW50O1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb3BzIHtcblxuICAgIHJlYWRvbmx5IHByaW9yaXRpemVkQ29tcG9uZW50UmVmczogUmVhZG9ubHlBcnJheTxQcmlvcml0aXplZENvbXBvbmVudFJlZj47XG5cbiAgICByZWFkb25seSBkYXRhc3RvcmVPdmVydmlldzogRGF0YXN0b3JlT3ZlcnZpZXc7XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU3RhdGUge1xuXG59XG5cbiJdfQ==