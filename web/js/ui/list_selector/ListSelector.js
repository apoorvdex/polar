"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const reactstrap_1 = require("reactstrap");
const Styles = {
    Label: {
        userSelect: 'none',
        width: '100%',
        cursor: 'pointer',
        marginBottom: '0'
    },
};
class ListSelector extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.onChange = this.onChange.bind(this);
        this.onCancel = this.onCancel.bind(this);
        this.options = Object.assign([], this.props.options);
        this.state = {};
    }
    render() {
        return (React.createElement("div", { className: "column-selector m-0", id: this.props.id },
            React.createElement("div", { className: "text-muted pb-1" }, this.props.title),
            React.createElement(reactstrap_1.ListGroup, { flush: true }, this.createListGroupItems(this.options)),
            React.createElement("div", { className: "pt-2 text-right" },
                React.createElement(reactstrap_1.Button, { className: "btn ml-1", color: "secondary", onClick: () => this.onCancel(), size: "sm" }, "Cancel"),
                React.createElement(reactstrap_1.Button, { className: "btn ml-1", color: "primary", onClick: () => this.onSet(), size: "sm" }, "Set Columns"))));
    }
    ;
    createListGroupItems(options) {
        const result = [];
        options.map(option => {
            const id = this.props.id + '-' + option.id;
            result.push(React.createElement(reactstrap_1.ListGroupItem, { key: option.id },
                React.createElement("div", { className: "ml-2" },
                    React.createElement(reactstrap_1.Input, { type: "checkbox", id: id, defaultChecked: option.selected, onChange: (event) => this.onChange(option, event) }),
                    React.createElement(reactstrap_1.Label, { for: id, style: Styles.Label }, option.label))));
        });
        return result;
    }
    onChange(option, event) {
        const selected = event.target.checked;
        option.selected = event.target.checked;
        this.props.onChange(option);
    }
    onCancel() {
        if (this.props.onCancel) {
            this.props.onCancel();
        }
    }
    onSet() {
        if (this.props.onSet) {
            this.props.onSet(this.options);
        }
    }
}
exports.ListSelector = ListSelector;
exports.createListOptionTypeMap = (things) => things;
//# sourceMappingURL=data:application/json;base64,