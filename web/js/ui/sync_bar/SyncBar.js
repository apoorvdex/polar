"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const reactstrap_1 = require("reactstrap");
const Collapse_1 = __importDefault(require("reactstrap/lib/Collapse"));
const Logger_1 = require("../../logger/Logger");
const log = Logger_1.Logger.create();
const Styles = {
    root: {},
    textBox: {
        position: 'fixed',
        left: '0',
        bottom: '5px',
        padding: '2px',
        fontSize: '12px',
        backgroundColor: '#F0F0EF',
        borderColor: '#D4D4D4',
        borderRadius: '0px 5px 0px 0px',
        minWidth: '250px',
        userSelect: 'none',
        zIndex: 99999999999,
    },
    progress: {
        position: 'fixed',
        left: '0',
        bottom: '0',
        minWidth: '100%',
        zIndex: 99999999999,
        height: '5px',
    }
};
class SyncBar extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.value = '';
        this.onProgress = this.onProgress.bind(this);
        this.state = {
            progress: undefined
        };
    }
    componentDidMount() {
        if (this.props.progress) {
            this.props.progress.addEventListener(progress => {
                log.info(`${progress.percentage}: ${progress.message}`);
                this.onProgress(progress);
            });
        }
    }
    componentWillUnmount() {
        if (this.listener && this.props.progress) {
            this.props.progress.removeEventListener(this.listener);
        }
    }
    render() {
        const progress = Math.floor(this.state.progress || 0);
        const isOpen = progress !== 0;
        return (react_1.default.createElement("div", { style: Styles.root, className: "" },
            react_1.default.createElement(Collapse_1.default, { timeout: 0, isOpen: isOpen },
                react_1.default.createElement("div", { style: Styles.textBox, className: "border-top border-right" }, this.state.message),
                react_1.default.createElement(reactstrap_1.Progress, { style: Styles.progress, className: "rounded-0 border-top border-left border-secondary progress-bar-striped", value: progress }))));
    }
    onProgress(progress) {
        this.setState({
            progress: progress.percentage,
            message: progress.message
        });
    }
}
exports.SyncBar = SyncBar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3luY0Jhci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlN5bmNCYXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0Esa0RBQTBCO0FBRTFCLDJDQUFvQztBQUVwQyx1RUFBK0M7QUFHL0MsZ0RBQTJDO0FBRTNDLE1BQU0sR0FBRyxHQUFHLGVBQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUU1QixNQUFNLE1BQU0sR0FBYztJQUV0QixJQUFJLEVBQUUsRUFFTDtJQUVELE9BQU8sRUFBRTtRQUNMLFFBQVEsRUFBRSxPQUFPO1FBQ2pCLElBQUksRUFBRSxHQUFHO1FBQ1QsTUFBTSxFQUFFLEtBQUs7UUFDYixPQUFPLEVBQUUsS0FBSztRQUNkLFFBQVEsRUFBRSxNQUFNO1FBQ2hCLGVBQWUsRUFBRSxTQUFTO1FBQzFCLFdBQVcsRUFBRSxTQUFTO1FBQ3RCLFlBQVksRUFBRSxpQkFBaUI7UUFDL0IsUUFBUSxFQUFFLE9BQU87UUFDakIsVUFBVSxFQUFFLE1BQU07UUFDbEIsTUFBTSxFQUFFLFdBQVc7S0FDdEI7SUFFRCxRQUFRLEVBQUU7UUFFTixRQUFRLEVBQUUsT0FBTztRQUNqQixJQUFJLEVBQUUsR0FBRztRQUNULE1BQU0sRUFBRSxHQUFHO1FBQ1gsUUFBUSxFQUFFLE1BQU07UUFDaEIsTUFBTSxFQUFFLFdBQVc7UUFDbkIsTUFBTSxFQUFFLEtBQUs7S0FFaEI7Q0FFSixDQUFDO0FBTUYsTUFBYSxPQUFRLFNBQVEsZUFBSyxDQUFDLFNBQXlCO0lBTXhELFlBQVksS0FBYTtRQUNyQixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFMVCxVQUFLLEdBQVcsRUFBRSxDQUFDO1FBT3ZCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFN0MsSUFBSSxDQUFDLEtBQUssR0FBRztZQUNULFFBQVEsRUFBRSxTQUFTO1NBQ3RCLENBQUM7SUFFTixDQUFDO0lBRU0saUJBQWlCO1FBRXBCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBRTVDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsVUFBVSxLQUFLLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO2dCQUV4RCxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzlCLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFFTCxDQUFDO0lBR00sb0JBQW9CO1FBRXZCLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUN0QyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDMUQ7SUFFTCxDQUFDO0lBRU0sTUFBTTtRQUVULE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFdEQsTUFBTSxNQUFNLEdBQUcsUUFBUSxLQUFLLENBQUMsQ0FBQztRQUU5QixPQUFPLENBRUgsdUNBQUssS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFDLEVBQUU7WUFFakMsOEJBQUMsa0JBQVEsSUFBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNO2dCQUVoQyx1Q0FBSyxLQUFLLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUMseUJBQXlCLElBQzFELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUNqQjtnQkFHTiw4QkFBQyxxQkFBUSxJQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsUUFBUSxFQUN0QixTQUFTLEVBQUMsd0VBQXdFLEVBQ2xGLEtBQUssRUFBRSxRQUFRLEdBRWQsQ0FFSixDQUVULENBRVQsQ0FBQztJQUNOLENBQUM7SUFFTyxVQUFVLENBQUMsUUFBeUI7UUFDeEMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNWLFFBQVEsRUFBRSxRQUFRLENBQUMsVUFBVTtZQUM3QixPQUFPLEVBQUUsUUFBUSxDQUFDLE9BQU87U0FDNUIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUVKO0FBNUVELDBCQTRFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCByZWFjdC9uby1tdWx0aS1jb21wOiAwLCByZWFjdC9wcm9wLXR5cGVzOiAwICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtJU3R5bGVNYXB9IGZyb20gJy4uLy4uL3JlYWN0L0lTdHlsZU1hcCc7XG5pbXBvcnQge1Byb2dyZXNzfSBmcm9tICdyZWFjdHN0cmFwJztcbmltcG9ydCB7UmVhY3Rvcn0gZnJvbSAnLi4vLi4vcmVhY3Rvci9SZWFjdG9yJztcbmltcG9ydCBDb2xsYXBzZSBmcm9tICdyZWFjdHN0cmFwL2xpYi9Db2xsYXBzZSc7XG5pbXBvcnQge0lFdmVudERpc3BhdGNoZXJ9IGZyb20gJy4uLy4uL3JlYWN0b3IvU2ltcGxlUmVhY3Rvcic7XG5pbXBvcnQge0V2ZW50TGlzdGVuZXJ9IGZyb20gJy4uLy4uL3JlYWN0b3IvRXZlbnRMaXN0ZW5lcic7XG5pbXBvcnQge0xvZ2dlcn0gZnJvbSAnLi4vLi4vbG9nZ2VyL0xvZ2dlcic7XG5cbmNvbnN0IGxvZyA9IExvZ2dlci5jcmVhdGUoKTtcblxuY29uc3QgU3R5bGVzOiBJU3R5bGVNYXAgPSB7XG5cbiAgICByb290OiB7XG5cbiAgICB9LFxuXG4gICAgdGV4dEJveDoge1xuICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgbGVmdDogJzAnLFxuICAgICAgICBib3R0b206ICc1cHgnLFxuICAgICAgICBwYWRkaW5nOiAnMnB4JyxcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI0YwRjBFRicsXG4gICAgICAgIGJvcmRlckNvbG9yOiAnI0Q0RDRENCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzBweCA1cHggMHB4IDBweCcsXG4gICAgICAgIG1pbldpZHRoOiAnMjUwcHgnLFxuICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgIHpJbmRleDogOTk5OTk5OTk5OTksXG4gICAgfSxcblxuICAgIHByb2dyZXNzOiB7XG5cbiAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgIGxlZnQ6ICcwJyxcbiAgICAgICAgYm90dG9tOiAnMCcsXG4gICAgICAgIG1pbldpZHRoOiAnMTAwJScsXG4gICAgICAgIHpJbmRleDogOTk5OTk5OTk5OTksXG4gICAgICAgIGhlaWdodDogJzVweCcsXG5cbiAgICB9XG5cbn07XG5cbi8qKlxuICogVGhlIHN5bmMgYmFyIGlzIGEgYmFyIGluIHRoZSBib3R0b20gcmlnaHQgb2YgdGhlIHBhZ2UgdGhhdCBkaXNwbGF5cyBzeW5jXG4gKiBwcm9ncmVzcyBhbmQgY2FuIGJyaW5nIHVwIGEgcG9wdXAgZGlzcGxheWluZyB3aGF0IGl0IGlzIGN1cnJlbnRseSBkb2luZy5cbiAqL1xuZXhwb3J0IGNsYXNzIFN5bmNCYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcblxuICAgIHByaXZhdGUgdmFsdWU6IHN0cmluZyA9ICcnO1xuXG4gICAgcHJpdmF0ZSBsaXN0ZW5lcj86IEV2ZW50TGlzdGVuZXI8U3luY0JhclByb2dyZXNzPjtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBJUHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMub25Qcm9ncmVzcyA9IHRoaXMub25Qcm9ncmVzcy5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBwcm9ncmVzczogdW5kZWZpbmVkXG4gICAgICAgIH07XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgY29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMucHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMucHJvZ3Jlc3MuYWRkRXZlbnRMaXN0ZW5lcihwcm9ncmVzcyA9PiB7XG5cbiAgICAgICAgICAgICAgICBsb2cuaW5mbyhgJHtwcm9ncmVzcy5wZXJjZW50YWdlfTogJHtwcm9ncmVzcy5tZXNzYWdlfWApO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5vblByb2dyZXNzKHByb2dyZXNzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cblxuICAgIHB1YmxpYyBjb21wb25lbnRXaWxsVW5tb3VudCgpOiB2b2lkIHtcblxuICAgICAgICBpZiAodGhpcy5saXN0ZW5lciAmJiB0aGlzLnByb3BzLnByb2dyZXNzKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLnByb2dyZXNzLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5saXN0ZW5lcik7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG5cbiAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLmZsb29yKHRoaXMuc3RhdGUucHJvZ3Jlc3MgfHwgMCk7XG5cbiAgICAgICAgY29uc3QgaXNPcGVuID0gcHJvZ3Jlc3MgIT09IDA7XG5cbiAgICAgICAgcmV0dXJuIChcblxuICAgICAgICAgICAgPGRpdiBzdHlsZT17U3R5bGVzLnJvb3R9IGNsYXNzTmFtZT1cIlwiPlxuXG4gICAgICAgICAgICAgICAgPENvbGxhcHNlIHRpbWVvdXQ9ezB9IGlzT3Blbj17aXNPcGVufT5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXtTdHlsZXMudGV4dEJveH0gY2xhc3NOYW1lPVwiYm9yZGVyLXRvcCBib3JkZXItcmlnaHRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLm1lc3NhZ2V9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIHsvKnRoZSB0aXRsZSBzdHJpbmcgZG9lc24ndCByZW5kZXIgcHJvcGVybHkgYW5kIGxvb2tzIGhvcnJpYmxlKi99XG4gICAgICAgICAgICAgICAgICAgIDxQcm9ncmVzcyBzdHlsZT17U3R5bGVzLnByb2dyZXNzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicm91bmRlZC0wIGJvcmRlci10b3AgYm9yZGVyLWxlZnQgYm9yZGVyLXNlY29uZGFyeSBwcm9ncmVzcy1iYXItc3RyaXBlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cHJvZ3Jlc3N9PlxuICAgICAgICAgICAgICAgICAgICAgICAgey8qe01hdGguZmxvb3IocHJvZ3Jlc3MpfSUqL31cbiAgICAgICAgICAgICAgICAgICAgPC9Qcm9ncmVzcz5cblxuICAgICAgICAgICAgICAgIDwvQ29sbGFwc2U+XG5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblByb2dyZXNzKHByb2dyZXNzOiBTeW5jQmFyUHJvZ3Jlc3MpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBwcm9ncmVzczogcHJvZ3Jlc3MucGVyY2VudGFnZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHByb2dyZXNzLm1lc3NhZ2VcbiAgICAgICAgfSk7XG4gICAgfVxuXG59XG5cbmludGVyZmFjZSBJUHJvcHMge1xuXG4gICAgcHJvZ3Jlc3M/OiBJRXZlbnREaXNwYXRjaGVyPFN5bmNCYXJQcm9ncmVzcz47XG5cbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG5cbiAgICAvLyBpbml0aWFsbHkgdGhlcmUgaXMgbm8gcHJvZ3Jlc3MgdG8gZGlzcGxheVxuICAgIHByb2dyZXNzPzogbnVtYmVyO1xuXG4gICAgLy8gdGhlIG1lc3NhZ2UgdG8gZGlzcGFseSBpbiB0aGUgYm94LiAgSWYgYW55LlxuICAgIG1lc3NhZ2U/OiBzdHJpbmc7XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTeW5jQmFyUHJvZ3Jlc3Mge1xuXG4gICAgcmVhZG9ubHkgdGFzazogc3RyaW5nO1xuICAgIHJlYWRvbmx5IG1lc3NhZ2U/OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgcGVyY2VudGFnZTogbnVtYmVyO1xuXG59XG4iXX0=