"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const ActiveSelections_1 = require("../popup/ActiveSelections");
const ControlledAnnotationBar_1 = require("./ControlledAnnotationBar");
const Elements_1 = require("../../util/Elements");
const Logger_1 = require("../../logger/Logger");
const ReactDOM = __importStar(require("react-dom"));
const Optional_1 = require("../../util/ts/Optional");
const Points_1 = require("../../Points");
const DocFormatFactory_1 = require("../../docformat/DocFormatFactory");
const log = Logger_1.Logger.create();
class ControlledAnnotationBars {
    static create(controlledPopupProps, annotationBarCallbacks) {
        this.registerEventListener(annotationBarCallbacks);
    }
    static registerEventListener(annotationBarCallbacks) {
        const target = document.getElementById("viewerContainer");
        let annotationBar;
        ActiveSelections_1.ActiveSelections.addEventListener(activeSelectionEvent => {
            const pageElement = Elements_1.Elements.untilRoot(activeSelectionEvent.element, ".page");
            if (!pageElement) {
                log.warn("Not found within .page element");
                return;
            }
            const pageNum = parseInt(pageElement.getAttribute("data-page-number"), 10);
            switch (activeSelectionEvent.type) {
                case 'created':
                    annotationBar = this.createAnnotationBar(pageNum, pageElement, annotationBarCallbacks, activeSelectionEvent);
                    break;
                case 'destroyed':
                    if (annotationBar) {
                        this.destroyAnnotationBar(annotationBar);
                    }
                    break;
            }
            if (activeSelectionEvent.type === 'destroyed') {
                return;
            }
        }, target);
    }
    static destroyAnnotationBar(annotationBar) {
        if (annotationBar && annotationBar.parentElement) {
            annotationBar.parentElement.removeChild(annotationBar);
        }
    }
    static computePosition(pageElement, point, offset) {
        const docFormat = DocFormatFactory_1.DocFormatFactory.getInstance();
        let origin = Optional_1.Optional.of(pageElement.getBoundingClientRect())
            .map(rect => {
            return { 'x': rect.left, 'y': rect.top };
        })
            .get();
        if (docFormat.name === 'html') {
            origin = { x: 0, y: 0 };
        }
        const relativePoint = Points_1.Points.relativeTo(origin, point);
        offset = offset || { x: 0, y: 0 };
        const left = relativePoint.x + offset.x;
        const top = relativePoint.y + offset.y;
        return {
            x: left,
            y: top
        };
    }
    static createAnnotationBar(pageNum, pageElement, annotationBarCallbacks, activeSelectionEvent) {
        const point = {
            x: activeSelectionEvent.boundingClientRect.left + (activeSelectionEvent.boundingClientRect.width / 2),
            y: activeSelectionEvent.boundingClientRect.top
        };
        const offset = {
            x: -75,
            y: -50
        };
        const position = this.computePosition(pageElement, point, offset);
        const annotationBar = document.createElement('div');
        annotationBar.addEventListener('mouseup', (event) => event.stopPropagation());
        annotationBar.addEventListener('mousedown', (event) => event.stopPropagation());
        const style = `position: absolute; top: ${position.y}px; left: ${position.x}px; z-index: 10000;`;
        annotationBar.setAttribute('style', style);
        pageElement.insertBefore(annotationBar, pageElement.firstChild);
        const onHighlightedCallback = (highlightCreatedEvent) => {
            annotationBarCallbacks.onHighlighted(highlightCreatedEvent);
            this.destroyAnnotationBar(annotationBar);
        };
        ReactDOM.render(React.createElement(ControlledAnnotationBar_1.ControlledAnnotationBar, { activeSelection: activeSelectionEvent, onHighlighted: onHighlightedCallback, type: 'range', pageNum: pageNum }), annotationBar);
        return annotationBar;
    }
}
exports.ControlledAnnotationBars = ControlledAnnotationBars;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJvbGxlZEFubm90YXRpb25CYXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQ29udHJvbGxlZEFubm90YXRpb25CYXJzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQSw2Q0FBK0I7QUFFL0IsZ0VBQWlGO0FBR2pGLHVFQUFrRTtBQUNsRSxrREFBNkM7QUFDN0MsZ0RBQTJDO0FBQzNDLG9EQUFzQztBQUd0QyxxREFBZ0Q7QUFDaEQseUNBQW9DO0FBQ3BDLHVFQUFrRTtBQUdsRSxNQUFNLEdBQUcsR0FBRyxlQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFNUIsTUFBYSx3QkFBd0I7SUFFMUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxvQkFBMEMsRUFDMUMsc0JBQThDO1FBRS9ELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBRXZELENBQUM7SUFFTyxNQUFNLENBQUMscUJBQXFCLENBQUMsc0JBQThDO1FBRS9FLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUUsQ0FBQztRQUUzRCxJQUFJLGFBQXNDLENBQUM7UUFFM0MsbUNBQWdCLENBQUMsZ0JBQWdCLENBQUMsb0JBQW9CLENBQUMsRUFBRTtZQUVyRCxNQUFNLFdBQVcsR0FBRyxtQkFBUSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFOUUsSUFBSSxDQUFFLFdBQVcsRUFBRTtnQkFDZixHQUFHLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLENBQUM7Z0JBQzNDLE9BQU87YUFDVjtZQUVELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFFM0UsUUFBUSxvQkFBb0IsQ0FBQyxJQUFJLEVBQUU7Z0JBRS9CLEtBQUssU0FBUztvQkFFVixhQUFhLEdBQUcsSUFB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S0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFFaEYsTUFBTSxLQUFLLEdBQUcsNEJBQTRCLFFBQVEsQ0FBQyxDQUFDLGFBQWEsUUFBUSxDQUFDLENBQUMscUJBQXFCLENBQUM7UUFDakcsYUFBYSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFM0MsV0FBVyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRWhFLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxxQkFBNEMsRUFBRSxFQUFFO1lBRzNFLHNCQUFzQixDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1lBQzVELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUM7UUFFRixRQUFRLENBQUMsTUFBTSxDQUNYLG9CQUFDLGlEQUF1QixJQUFDLGVBQWUsRUFBRSxvQkFBb0IsRUFDckMsYUFBYSxFQUFFLHFCQUFxQixFQUNwQyxJQUFJLEVBQUMsT0FBTyxFQUNaLE9BQU8sRUFBRSxPQUFPLEdBQUcsRUFFNUMsYUFBYSxDQUVoQixDQUFDO1FBRUYsT0FBTyxhQUFhLENBQUM7SUFFekIsQ0FBQztDQUVKO0FBeEpELDREQXdKQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QW5ub3RhdGlvbkJhciwgQW5ub3RhdGlvbkJhckNhbGxiYWNrcywgQW5ub3RhdGlvbkJhclRyaWdnZXJFdmVudH0gZnJvbSAnLi9Bbm5vdGF0aW9uQmFyJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Q29udHJvbGxlZFBvcHVwc30gZnJvbSAnLi4vcG9wdXAvQ29udHJvbGxlZFBvcHVwcyc7XG5pbXBvcnQge0FjdGl2ZVNlbGVjdGlvbkV2ZW50LCBBY3RpdmVTZWxlY3Rpb25zfSBmcm9tICcuLi9wb3B1cC9BY3RpdmVTZWxlY3Rpb25zJztcbmltcG9ydCB7SUV2ZW50RGlzcGF0Y2hlciwgU2ltcGxlUmVhY3Rvcn0gZnJvbSAnLi4vLi4vcmVhY3Rvci9TaW1wbGVSZWFjdG9yJztcbmltcG9ydCB7Q29udHJvbGxlZFBvcHVwUHJvcHN9IGZyb20gJy4uL3BvcHVwL0NvbnRyb2xsZWRQb3B1cCc7XG5pbXBvcnQge0NvbnRyb2xsZWRBbm5vdGF0aW9uQmFyfSBmcm9tICcuL0NvbnRyb2xsZWRBbm5vdGF0aW9uQmFyJztcbmltcG9ydCB7RWxlbWVudHN9IGZyb20gJy4uLy4uL3V0aWwvRWxlbWVudHMnO1xuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJy4uLy4uL2xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBEb2NSZXBvQXBwIGZyb20gJy4uLy4uLy4uLy4uL2FwcHMvcmVwb3NpdG9yeS9qcy9kb2NfcmVwby9Eb2NSZXBvQXBwJztcbmltcG9ydCB7UG9pbnR9IGZyb20gJy4uLy4uL1BvaW50JztcbmltcG9ydCB7T3B0aW9uYWx9IGZyb20gJy4uLy4uL3V0aWwvdHMvT3B0aW9uYWwnO1xuaW1wb3J0IHtQb2ludHN9IGZyb20gJy4uLy4uL1BvaW50cyc7XG5pbXBvcnQge0RvY0Zvcm1hdEZhY3Rvcnl9IGZyb20gJy4uLy4uL2RvY2Zvcm1hdC9Eb2NGb3JtYXRGYWN0b3J5JztcbmltcG9ydCB7SGlnaGxpZ2h0Q3JlYXRlZEV2ZW50fSBmcm9tICcuLi8uLi9jb21tZW50cy9yZWFjdC9IaWdobGlnaHRDcmVhdGVkRXZlbnQnO1xuXG5jb25zdCBsb2cgPSBMb2dnZXIuY3JlYXRlKCk7XG5cbmV4cG9ydCBjbGFzcyBDb250cm9sbGVkQW5ub3RhdGlvbkJhcnMge1xuXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUoY29udHJvbGxlZFBvcHVwUHJvcHM6IENvbnRyb2xsZWRQb3B1cFByb3BzLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGFubm90YXRpb25CYXJDYWxsYmFja3M6IEFubm90YXRpb25CYXJDYWxsYmFja3MpIHtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcihhbm5vdGF0aW9uQmFyQ2FsbGJhY2tzKTtcblxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIHJlZ2lzdGVyRXZlbnRMaXN0ZW5lcihhbm5vdGF0aW9uQmFyQ2FsbGJhY2tzOiBBbm5vdGF0aW9uQmFyQ2FsbGJhY2tzKSB7XG5cbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aWV3ZXJDb250YWluZXJcIikhO1xuXG4gICAgICAgIGxldCBhbm5vdGF0aW9uQmFyOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZDtcblxuICAgICAgICBBY3RpdmVTZWxlY3Rpb25zLmFkZEV2ZW50TGlzdGVuZXIoYWN0aXZlU2VsZWN0aW9uRXZlbnQgPT4ge1xuXG4gICAgICAgICAgICBjb25zdCBwYWdlRWxlbWVudCA9IEVsZW1lbnRzLnVudGlsUm9vdChhY3RpdmVTZWxlY3Rpb25FdmVudC5lbGVtZW50LCBcIi5wYWdlXCIpO1xuXG4gICAgICAgICAgICBpZiAoISBwYWdlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGxvZy53YXJuKFwiTm90IGZvdW5kIHdpdGhpbiAucGFnZSBlbGVtZW50XCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcGFnZU51bSA9IHBhcnNlSW50KHBhZ2VFbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtcGFnZS1udW1iZXJcIiksIDEwKTtcblxuICAgICAgICAgICAgc3dpdGNoIChhY3RpdmVTZWxlY3Rpb25FdmVudC50eXBlKSB7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdjcmVhdGVkJzpcblxuICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uQmFyID0gdGhpcy5jcmVhdGVBbm5vdGF0aW9uQmFyKHBhZ2VOdW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ub3RhdGlvbkJhckNhbGxiYWNrcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVTZWxlY3Rpb25FdmVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdkZXN0cm95ZWQnOlxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbm5vdGF0aW9uQmFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3lBbm5vdGF0aW9uQmFyKGFubm90YXRpb25CYXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFjdGl2ZVNlbGVjdGlvbkV2ZW50LnR5cGUgPT09ICdkZXN0cm95ZWQnKSB7XG4gICAgICAgICAgICAgICAgLy8gb25seSBjcmVhdGVkIHN1cHBvcnRlZCBmb3Igbm93LlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LCB0YXJnZXQpO1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZGVzdHJveUFubm90YXRpb25CYXIoYW5ub3RhdGlvbkJhcjogSFRNTEVsZW1lbnQpIHtcblxuICAgICAgICBpZiAoYW5ub3RhdGlvbkJhciAmJiBhbm5vdGF0aW9uQmFyLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGFubm90YXRpb25CYXIucGFyZW50RWxlbWVudCEucmVtb3ZlQ2hpbGQoYW5ub3RhdGlvbkJhcik7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGNvbXB1dGVQb3NpdGlvbihwYWdlRWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50OiBQb2ludCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBQb2ludCB8IHVuZGVmaW5lZCk6IFBvaW50IHtcblxuICAgICAgICBjb25zdCBkb2NGb3JtYXQgPSBEb2NGb3JtYXRGYWN0b3J5LmdldEluc3RhbmNlKCk7XG5cbiAgICAgICAgbGV0IG9yaWdpbjogUG9pbnQgPVxuICAgICAgICAgICAgT3B0aW9uYWwub2YocGFnZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpXG4gICAgICAgICAgICAgICAgLm1hcChyZWN0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsneCc6IHJlY3QubGVmdCwgJ3knOiByZWN0LnRvcH07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZ2V0KCk7XG5cbiAgICAgICAgLy8gb25lIG9mZiBmb3IgdGhlIGh0bWwgdmlld2VyLi4uIEkgaG9wZSB3ZSBjYW4gdW5pZnkgdGhlc2Ugb25lIGRheS5cbiAgICAgICAgaWYgKGRvY0Zvcm1hdC5uYW1lID09PSAnaHRtbCcpIHtcbiAgICAgICAgICAgIG9yaWdpbiA9IHt4OiAwLCB5OiAwfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlbGF0aXZlUG9pbnQ6IFBvaW50ID1cbiAgICAgICAgICAgIFBvaW50cy5yZWxhdGl2ZVRvKG9yaWdpbiwgcG9pbnQpO1xuXG4gICAgICAgIG9mZnNldCA9IG9mZnNldCB8fCB7eDogMCwgeTogMH07XG5cbiAgICAgICAgY29uc3QgbGVmdCA9IHJlbGF0aXZlUG9pbnQueCArIG9mZnNldC54O1xuICAgICAgICBjb25zdCB0b3AgPSByZWxhdGl2ZVBvaW50LnkgKyBvZmZzZXQueTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogbGVmdCxcbiAgICAgICAgICAgIHk6IHRvcFxuICAgICAgICB9O1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgY3JlYXRlQW5ub3RhdGlvbkJhcihwYWdlTnVtOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlRWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uQmFyQ2FsbGJhY2tzOiBBbm5vdGF0aW9uQmFyQ2FsbGJhY2tzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlU2VsZWN0aW9uRXZlbnQ6IEFjdGl2ZVNlbGVjdGlvbkV2ZW50KSB7XG5cbiAgICAgICAgY29uc3QgcG9pbnQ6IFBvaW50ID0ge1xuICAgICAgICAgICAgeDogYWN0aXZlU2VsZWN0aW9uRXZlbnQuYm91bmRpbmdDbGllbnRSZWN0LmxlZnQgKyAoYWN0aXZlU2VsZWN0aW9uRXZlbnQuYm91bmRpbmdDbGllbnRSZWN0LndpZHRoIC8gMiksXG4gICAgICAgICAgICB5OiBhY3RpdmVTZWxlY3Rpb25FdmVudC5ib3VuZGluZ0NsaWVudFJlY3QudG9wXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgb2Zmc2V0OiBQb2ludCA9IHtcbiAgICAgICAgICAgIHg6IC03NSxcbiAgICAgICAgICAgIHk6IC01MFxuICAgICAgICB9O1xuXG5cbiAgICAgICAgLy8gVE9ETyB1c2UgdGhlIG1vdXNlRGlyZWN0aW9uIG9uIHRoZSBhY3RpdmVTZWxlY3Rpb25FdmVudCBhbmQgcGxhY2VcbiAgICAgICAgLy8gd2l0aCB0b3AvYm90dG9tXG5cbiAgICAgICAgLy8gVE9ETzogd2UgaGF2ZSB0byBjb21wdXRlIHRoZSBwb3NpdGlvbiBhYm92ZSBvciBiZWxvdyBiYXNlZCBvbiB0aGVcbiAgICAgICAgLy8gZGlyZWN0aW9uIG9mIHRoZSBtb3VzZSBtb3ZlbWVudC5cblxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuY29tcHV0ZVBvc2l0aW9uKHBhZ2VFbGVtZW50LCBwb2ludCwgb2Zmc2V0KTtcblxuICAgICAgICBjb25zdCBhbm5vdGF0aW9uQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgYW5ub3RhdGlvbkJhci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgKGV2ZW50KSA9PiBldmVudC5zdG9wUHJvcGFnYXRpb24oKSk7XG4gICAgICAgIGFubm90YXRpb25CYXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGV2ZW50KSA9PiBldmVudC5zdG9wUHJvcGFnYXRpb24oKSk7XG5cbiAgICAgICAgY29uc3Qgc3R5bGUgPSBgcG9zaXRpb246IGFic29sdXRlOyB0b3A6ICR7cG9zaXRpb24ueX1weDsgbGVmdDogJHtwb3NpdGlvbi54fXB4OyB6LWluZGV4OiAxMDAwMDtgO1xuICAgICAgICBhbm5vdGF0aW9uQmFyLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBzdHlsZSk7XG5cbiAgICAgICAgcGFnZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGFubm90YXRpb25CYXIsIHBhZ2VFbGVtZW50LmZpcnN0Q2hpbGQpO1xuXG4gICAgICAgIGNvbnN0IG9uSGlnaGxpZ2h0ZWRDYWxsYmFjayA9IChoaWdobGlnaHRDcmVhdGVkRXZlbnQ6IEhpZ2hsaWdodENyZWF0ZWRFdmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gVE9ETzogdGhlcmUncyBhIGRlbGF5IGhlcmUgYW5kIGl0IG1pZ2h0IGJlIG5pY2UgdG8gaGF2ZSBhIHByb2dyZXNzXG4gICAgICAgICAgICAvLyBiYXIgdW50aWwgaXQgY29tcGxldGVzLlxuICAgICAgICAgICAgYW5ub3RhdGlvbkJhckNhbGxiYWNrcy5vbkhpZ2hsaWdodGVkKGhpZ2hsaWdodENyZWF0ZWRFdmVudCk7XG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3lBbm5vdGF0aW9uQmFyKGFubm90YXRpb25CYXIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFJlYWN0RE9NLnJlbmRlcihcbiAgICAgICAgICAgIDxDb250cm9sbGVkQW5ub3RhdGlvbkJhciBhY3RpdmVTZWxlY3Rpb249e2FjdGl2ZVNlbGVjdGlvbkV2ZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uSGlnaGxpZ2h0ZWQ9e29uSGlnaGxpZ2h0ZWRDYWxsYmFja31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSdyYW5nZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlTnVtPXtwYWdlTnVtfS8+LFxuXG4gICAgICAgICAgICBhbm5vdGF0aW9uQmFyXG5cbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gYW5ub3RhdGlvbkJhcjtcblxuICAgIH1cblxufVxuXG5cblxuIl19