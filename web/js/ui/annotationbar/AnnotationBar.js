"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const reactstrap_1 = require("reactstrap");
class AnnotationBar extends React.Component {
    constructor(props) {
        super(props);
        this.dispatchOnHighlighted = this.dispatchOnHighlighted.bind(this);
        this.dispatchOnCommented = this.dispatchOnCommented.bind(this);
        this.state = {};
    }
    componentWillMount() {
        this.releaser = this.props.annotationBarTriggerEventDispatcher.addEventListener(event => {
            this.setState({ event });
        });
    }
    componentWillUnmount() {
        if (this.releaser) {
            this.releaser.release();
        }
    }
    render() {
        return (React.createElement("div", null,
            React.createElement("div", { className: "rounded p-1 annotationbar text-center", style: {} },
                React.createElement(reactstrap_1.Button, { size: "lg", type: "button", className: "btn p-1 m-1 annotationbar-btn", title: "", "aria-label": "", onClick: () => this.dispatchOnHighlighted('yellow'), style: {} },
                    React.createElement("span", { className: "fas fa-highlighter", "aria-hidden": "true", style: { color: 'rgba(255,255,0)' } })),
                React.createElement(reactstrap_1.Button, { size: "lg", type: "button", className: "btn p-1 m-1 annotationbar-btn", title: "", "aria-label": "", onClick: () => this.dispatchOnHighlighted('red'), style: {} },
                    React.createElement("span", { className: "fas fa-highlighter annotationbar-btn-highlighter", "aria-hidden": "true", style: { color: 'rgba(255,0,0)' } })),
                React.createElement(reactstrap_1.Button, { size: "lg", type: "button", className: "btn p-1 m-1 annotationbar-btn annotationbar-btn-highlighter", title: "", "aria-label": "", onClick: () => this.dispatchOnHighlighted('green'), style: {} },
                    React.createElement("span", { className: "fas fa-highlighter", "aria-hidden": "true", style: { color: 'rgba(0,255,0)' } })))));
    }
    dispatchOnHighlighted(highlightColor) {
        const highlightCreatedEvent = {
            activeSelection: this.state.event.activeSelection,
            highlightColor,
            pageNum: this.state.event.pageNum,
            annotationDescriptor: this.state.event.annotationDescriptor
        };
        this.props.onHighlighted(highlightCreatedEvent);
        this.props.popupStateEventDispatcher.dispatchEvent({ active: false });
    }
    dispatchOnCommented() {
        const commentTriggerEvent = Object.assign({}, this.state.event);
        this.props.onComment(commentTriggerEvent);
    }
}
exports.AnnotationBar = AnnotationBar;
//# sourceMappingURL=data:application/json;base64,