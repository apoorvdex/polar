"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../../logger/Logger");
const Optional_1 = require("../../util/ts/Optional");
const ID = 'polar-progress-bar';
const log = Logger_1.Logger.create();
class ProgressBar {
    update(val, autoDestroy = true) {
        if (!val || val < 0) {
            return;
        }
        ProgressBar.getProgressElement().map(progressElement => {
            if (progressElement instanceof HTMLProgressElement) {
                progressElement.value = val;
            }
            if (autoDestroy && val >= 100) {
                this.destroy();
            }
        });
    }
    destroy() {
        const progressElement = ProgressBar.getProgressElement().getOrUndefined();
        if (progressElement) {
            if (progressElement.parentElement !== null) {
                progressElement.parentElement.removeChild(progressElement);
            }
            else {
                log.warn("No parent element for progress bar.");
            }
        }
        else {
        }
    }
    static getProgressElement() {
        const element = document.getElementById(ID);
        return Optional_1.Optional.of(element);
    }
    static create(indeterminate = true) {
        const current = this.getProgressElement();
        if (current.isPresent()) {
            return new ProgressBar();
        }
        let element;
        if (indeterminate) {
            element = document.createElement('div');
            element.setAttribute('class', 'progress-indeterminate-slider');
            element.innerHTML = `
                <div class="progress-indeterminate-line"></div>
                <div class="progress-indeterminate-subline progress-indeterminate-inc"></div>
                <div class="progress-indeterminate-subline progress-indeterminate-dec"></div>
            `;
        }
        else {
            element = document.createElement('progress');
        }
        if (!indeterminate && element instanceof HTMLProgressElement) {
            element.value = 0;
            element.max = 100;
        }
        element.id = ID;
        element.style.height = '4px';
        element.style.width = `100%`;
        element.style.position = 'fixed';
        element.style.top = '0';
        element.style.left = '0';
        element.style.zIndex = '99999999999';
        element.style.borderTop = '0';
        element.style.borderLeft = '0';
        element.style.borderRight = '0';
        element.style.borderBottom = '0';
        document.body.appendChild(element);
        return new ProgressBar();
    }
}
exports.ProgressBar = ProgressBar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvZ3Jlc3NCYXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQcm9ncmVzc0Jhci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGdEQUEyQztBQUMzQyxxREFBZ0Q7QUFFaEQsTUFBTSxFQUFFLEdBQUcsb0JBQW9CLENBQUM7QUFFaEMsTUFBTSxHQUFHLEdBQUcsZUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBTzVCLE1BQWEsV0FBVztJQUViLE1BQU0sQ0FBQyxHQUFXLEVBQUUsY0FBdUIsSUFBSTtRQUVsRCxJQUFJLENBQUUsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7WUFDbEIsT0FBTztTQUNWO1FBT0QsV0FBVyxDQUFDLGtCQUFrQixFQUFFLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxFQUFFO1lBRW5ELElBQUksZUFBZSxZQUFZLG1CQUFtQixFQUFFO2dCQUNoRCxlQUFlLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQzthQUMvQjtZQUVELElBQUksV0FBVyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUU7Z0JBQzNCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUNsQjtRQUVMLENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQztJQUVNLE9BQU87UUFFVixNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUUxRSxJQUFJLGVBQWUsRUFBRTtZQUVqQixJQUFJLGVBQWUsQ0FBQyxhQUFhLEtBQUssSUFBSSxFQUFFO2dCQUN4QyxlQUFlLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUM5RDtpQkFBTTtnQkFDSCxHQUFHLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxDQUFDLENBQUM7YUFDbkQ7U0FFSjthQUFNO1NBRU47SUFFTCxDQUFDO0lBRU8sTUFBTSxDQUFDLGtCQUFrQjtRQUM3QixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sbUJBQVEsQ0FBQyxFQUFFLENBQXVCLE9BQU8sQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFTSxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUF5QixJQUFJO1FBRTlDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBRTFDLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQ3JCLE9BQU8sSUFBSSxXQUFXLEVBQUUsQ0FBQztTQUM1QjtRQUVELElBQUksT0FBb0IsQ0FBQztRQU16QixJQUFJLGFBQWEsRUFBRTtZQUVmLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRXhDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLCtCQUErQixDQUFDLENBQUM7WUFFL0QsT0FBTyxDQUFDLFNBQVMsR0FBRzs7OzthQUluQixDQUFDO1NBRUw7YUFBTTtZQUNILE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsSUFBSSxDQUFFLGFBQWEsSUFBSSxPQUFPLFlBQVksbUJBQW1CLEVBQUU7WUFFM0QsT0FBTyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDbEIsT0FBTyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7U0FDckI7UUFFRCxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUVoQixPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFFN0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO1FBSTdCLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUNqQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDeEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ3pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQztRQUNyQyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7UUFDOUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztRQUNoQyxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUM7UUFJakMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbkMsT0FBTyxJQUFJLFdBQVcsRUFBRSxDQUFDO0lBRTdCLENBQUM7Q0FFSjtBQS9HRCxrQ0ErR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BlcmNlbnRhZ2V9IGZyb20gJy4uLy4uL3V0aWwvUHJvZ3Jlc3NUcmFja2VyJztcbmltcG9ydCB7TG9nZ2VyfSBmcm9tICcuLi8uLi9sb2dnZXIvTG9nZ2VyJztcbmltcG9ydCB7T3B0aW9uYWx9IGZyb20gJy4uLy4uL3V0aWwvdHMvT3B0aW9uYWwnO1xuXG5jb25zdCBJRCA9ICdwb2xhci1wcm9ncmVzcy1iYXInO1xuXG5jb25zdCBsb2cgPSBMb2dnZXIuY3JlYXRlKCk7XG5cbi8qKlxuICogU2ltcGxlIHByb2dyZXNzIGJhciB0aGF0IHdlIGNhbiBkaXNwbGF5IGF0IGFueSB0aW1lIG9uIGEgcGFnZSB3aXRob3V0XG4gKiBjb21wbGljYXRlZCByZW5kZXJpbmcgaXNzdWVzIG9yIHJlcXVpcmluZyBSZWFjdCB0byBiZSB1c2VkLiAgVGhpcyBhbGxvd3NcbiAqIHVzIHRvIGVhc2lseSBzaG93IGEgR1VJIGZvciBhIGRvd25sb2FkIGF0IGFueSBwb2ludCBpbiB0aW1lLlxuICovXG5leHBvcnQgY2xhc3MgUHJvZ3Jlc3NCYXIge1xuXG4gICAgcHVibGljIHVwZGF0ZSh2YWw6IG51bWJlciwgYXV0b0Rlc3Ryb3k6IGJvb2xlYW4gPSB0cnVlKSB7XG5cbiAgICAgICAgaWYgKCEgdmFsIHx8IHZhbCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZJWE1FOiB0aGVyZSBpcyBub3cgYSBidWcgaGVyZSB3aGVyZSBpZiB0aGUgUHJvZ3Jlc3NCYXIgaXNcbiAgICAgICAgLy8gYXV0by1kZXN0cm95ZWQgZWFybHksIGFueSBsYWdnaW5nIHByb2dyZXNzIGJhciB2YWx1ZXMgd29uJ3QgZ2V0XG4gICAgICAgIC8vIGNyZWF0ZWQuLi4gd2UgbmVlZCB0aGUgYWJpbGl0eSB0byBhdXRvLWNyZWF0ZSBpZiB0aGUgdmFsdWUgaXNcbiAgICAgICAgLy8gaW4gdGhlIGludGVydmFsIFswLDEwMCkgYnV0IGRlc3Ryb3kgaXQgaWYgdGhlIHZhbHVlIGlzIDEwMC5cblxuICAgICAgICBQcm9ncmVzc0Jhci5nZXRQcm9ncmVzc0VsZW1lbnQoKS5tYXAocHJvZ3Jlc3NFbGVtZW50ID0+IHtcblxuICAgICAgICAgICAgaWYgKHByb2dyZXNzRWxlbWVudCBpbnN0YW5jZW9mIEhUTUxQcm9ncmVzc0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0VsZW1lbnQudmFsdWUgPSB2YWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhdXRvRGVzdHJveSAmJiB2YWwgPj0gMTAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzdHJveSgpIHtcblxuICAgICAgICBjb25zdCBwcm9ncmVzc0VsZW1lbnQgPSBQcm9ncmVzc0Jhci5nZXRQcm9ncmVzc0VsZW1lbnQoKS5nZXRPclVuZGVmaW5lZCgpO1xuXG4gICAgICAgIGlmIChwcm9ncmVzc0VsZW1lbnQpIHtcblxuICAgICAgICAgICAgaWYgKHByb2dyZXNzRWxlbWVudC5wYXJlbnRFbGVtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NFbGVtZW50LnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQocHJvZ3Jlc3NFbGVtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nLndhcm4oXCJObyBwYXJlbnQgZWxlbWVudCBmb3IgcHJvZ3Jlc3MgYmFyLlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbG9nLndhcm4oXCJObyBwcm9ncmVzcyBiYXIgdG8gZGVzdHJveS5cIik7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGdldFByb2dyZXNzRWxlbWVudCgpOiBPcHRpb25hbDxIVE1MUHJvZ3Jlc3NFbGVtZW50PiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChJRCk7XG4gICAgICAgIHJldHVybiBPcHRpb25hbC5vZig8SFRNTFByb2dyZXNzRWxlbWVudD4gZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUoaW5kZXRlcm1pbmF0ZTogYm9vbGVhbiA9IHRydWUpOiBQcm9ncmVzc0JhciB7XG5cbiAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuZ2V0UHJvZ3Jlc3NFbGVtZW50KCk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQuaXNQcmVzZW50KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvZ3Jlc3NCYXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlbGVtZW50OiBIVE1MRWxlbWVudDtcblxuICAgICAgICAvLyBUT0RPOiB0ZWNobmljYWxseSB0aGVyZSdzIGEgYnVnIGlmIHdlIHVzZWQgaW5kZXRlcm1pbmF0ZSBhbmRcbiAgICAgICAgLy8gZGV0ZXJtaW5hdGUgcHJvZ3Jlc3MgYmFycyBidXQgd2UgZG9uJ3QgdXNlIHRoZW0gb3ZlcmxhcHBpbmcgaW5cbiAgICAgICAgLy8gdGhlIHNhbWUgYXBwIHJpZ2h0IG5vdy5cblxuICAgICAgICBpZiAoaW5kZXRlcm1pbmF0ZSkge1xuXG4gICAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsICdwcm9ncmVzcy1pbmRldGVybWluYXRlLXNsaWRlcicpO1xuXG4gICAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MtaW5kZXRlcm1pbmF0ZS1saW5lXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2dyZXNzLWluZGV0ZXJtaW5hdGUtc3VibGluZSBwcm9ncmVzcy1pbmRldGVybWluYXRlLWluY1wiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9ncmVzcy1pbmRldGVybWluYXRlLXN1YmxpbmUgcHJvZ3Jlc3MtaW5kZXRlcm1pbmF0ZS1kZWNcIj48L2Rpdj5cbiAgICAgICAgICAgIGA7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwcm9ncmVzcycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEgaW5kZXRlcm1pbmF0ZSAmJiBlbGVtZW50IGluc3RhbmNlb2YgSFRNTFByb2dyZXNzRWxlbWVudCkge1xuICAgICAgICAgICAgLy8gc2V0IHRoZSBkZWZhdWx0c1xuICAgICAgICAgICAgZWxlbWVudC52YWx1ZSA9IDA7XG4gICAgICAgICAgICBlbGVtZW50Lm1heCA9IDEwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQuaWQgPSBJRDtcblxuICAgICAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9ICc0cHgnO1xuXG4gICAgICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSBgMTAwJWA7XG5cbiAgICAgICAgLy8vIHByb2dyZXNzLnN0eWxlLmJhY2tncm91bmRDb2xvcj0nIzg5QURGRCc7XG4gICAgICAgIC8vIHByb2dyZXNzLnN0eWxlLmNvbG9yPScjODlBREZEJztcbiAgICAgICAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUudG9wID0gJzAnO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSAnMCc7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuekluZGV4ID0gJzk5OTk5OTk5OTk5JztcbiAgICAgICAgZWxlbWVudC5zdHlsZS5ib3JkZXJUb3AgPSAnMCc7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuYm9yZGVyTGVmdCA9ICcwJztcbiAgICAgICAgZWxlbWVudC5zdHlsZS5ib3JkZXJSaWdodCA9ICcwJztcbiAgICAgICAgZWxlbWVudC5zdHlsZS5ib3JkZXJCb3R0b20gPSAnMCc7XG4gICAgICAgIC8vIGVsZW1lbnQuc3R5bGUud2Via2l0QXBwZWFyYW5jZSA9ICdub25lJztcbiAgICAgICAgLy8gZWxlbWVudC5zdHlsZS5ib3JkZXJSYWRpdXMgPSAnMCc7XG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtZW50KTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb2dyZXNzQmFyKCk7XG5cbiAgICB9XG5cbn1cblxuIl19