"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../../logger/Logger");
const Optional_1 = require("../../util/ts/Optional");
const ID = 'polar-determinate-progress-bar';
const log = Logger_1.Logger.create();
const FAST_PROGRESS_CUTOFF = 300;
class DeterminateProgressBar {
    static update(value) {
        const progress = typeof value === 'number' ? value : value.progress;
        if (!progress || progress < 0 || progress > 100) {
            return;
        }
        if (!(typeof value === 'number')) {
            if (value.duration < FAST_PROGRESS_CUTOFF && progress < 100) {
                return;
            }
        }
        if (progress === 100 && !this.get().isPresent()) {
            return;
        }
        const progressElement = this.getOrCreate();
        progressElement.value = progress;
        if (progress >= 100) {
            this.destroy();
        }
    }
    static destroy() {
        const timeout = 350;
        const doDestroy = () => {
            const progressElement = this.get().getOrUndefined();
            if (progressElement) {
                if (progressElement.parentElement !== null) {
                    progressElement.parentElement.removeChild(progressElement);
                }
                else {
                    log.warn("No parent element for progress bar.");
                }
            }
            else {
            }
        };
        setTimeout(() => {
            const progressElement = this.get();
            if (!progressElement.isPresent() || progressElement.get().value !== 100) {
                return;
            }
            doDestroy();
        }, timeout);
    }
    static getOrCreate() {
        const result = this.get();
        if (result.isPresent()) {
            return result.get();
        }
        return this.create();
    }
    static get() {
        const element = document.getElementById(ID);
        return Optional_1.Optional.of(element);
    }
    static create() {
        const element = document.createElement('progress');
        element.value = 0;
        element.max = 100;
        element.id = ID;
        element.style.height = '4px';
        element.style.width = `100%`;
        element.style.position = 'fixed';
        element.style.top = '0';
        element.style.left = '0';
        element.style.zIndex = '99999999999';
        element.style.borderTop = '0';
        element.style.borderLeft = '0';
        element.style.borderRight = '0';
        element.style.borderBottom = '0';
        document.body.appendChild(element);
        return element;
    }
}
exports.DeterminateProgressBar = DeterminateProgressBar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGV0ZXJtaW5hdGVQcm9ncmVzc0Jhci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkRldGVybWluYXRlUHJvZ3Jlc3NCYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxnREFBMkM7QUFDM0MscURBQWdEO0FBR2hELE1BQU0sRUFBRSxHQUFHLGdDQUFnQyxDQUFDO0FBRTVDLE1BQU0sR0FBRyxHQUFHLGVBQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUU1QixNQUFNLG9CQUFvQixHQUFHLEdBQUcsQ0FBQztBQU9qQyxNQUFhLHNCQUFzQjtJQUd4QixNQUFNLENBQUMsTUFBTSxDQUFDLEtBQXdCO1FBRXpDLE1BQU0sUUFBUSxHQUNWLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1FBRXZELElBQUksQ0FBRSxRQUFRLElBQUksUUFBUSxHQUFHLENBQUMsSUFBSSxRQUFRLEdBQUcsR0FBRyxFQUFFO1lBRTlDLE9BQU87U0FDVjtRQUVELElBQUksQ0FBRSxDQUFDLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxFQUFFO1lBRS9CLElBQUksS0FBSyxDQUFDLFFBQVEsR0FBRyxvQkFBb0IsSUFBSSxRQUFRLEdBQUcsR0FBRyxFQUFFO2dCQUN6RCxPQUFPO2FBQ1Y7U0FFSjtRQUVELElBQUksUUFBUSxLQUFLLEdBQUcsSUFBSSxDQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQU05QyxPQUFPO1NBQ1Y7UUFFRCxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDM0MsZUFBZSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUM7UUFFakMsSUFBSSxRQUFRLElBQUksR0FBRyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNsQjtJQUVMLENBQUM7SUFFTyxNQUFNLENBQUMsT0FBTztRQUVsQixNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUM7UUFFcEIsTUFBTSxTQUFTLEdBQUcsR0FBRyxFQUFFO1lBRW5CLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUVwRCxJQUFJLGVBQWUsRUFBRTtnQkFFakIsSUFBSSxlQUFlLENBQUMsYUFBYSxLQUFLLElBQUksRUFBRTtvQkFDeEMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7aUJBQzlEO3FCQUFNO29CQUNILEdBQUcsQ0FBQyxJQUFJLENBQUMscUNBQXFDLENBQUMsQ0FBQztpQkFDbkQ7YUFFSjtpQkFBTTthQUVOO1FBRUwsQ0FBQyxDQUFDO1FBRUYsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUVaLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUVuQyxJQUFJLENBQUUsZUFBZSxDQUFDLFNBQVMsRUFBRSxJQUFJLGVBQWUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLEtBQUssR0FBRyxFQUFFO2dCQUN0RSxPQUFPO2FBQ1Y7WUFFRCxTQUFTLEVBQUUsQ0FBQztRQUVoQixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFaEIsQ0FBQztJQUVPLE1BQU0sQ0FBQyxXQUFXO1FBRXRCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUUxQixJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUNwQixPQUFPLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUN2QjtRQUVELE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBRXpCLENBQUM7SUFFTyxNQUFNLENBQUMsR0FBRztRQUNkLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDNUMsT0FBTyxtQkFBUSxDQUFDLEVBQUUsQ0FBdUIsT0FBTyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVPLE1BQU0sQ0FBQyxNQUFNO1FBRWpCLE1BQU0sT0FBTyxHQUF3QixRQUFRLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXhFLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBRWxCLE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBRWhCLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUU3QixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7UUFJN0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ2pDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN4QixPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFDekIsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDO1FBQ3JDLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQztRQUM5QixPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7UUFDL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQztRQUlqQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVuQyxPQUFPLE9BQU8sQ0FBQztJQUVuQixDQUFDO0NBRUo7QUE1SEQsd0RBNEhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQcm9ncmVzc30gZnJvbSAnLi4vLi4vdXRpbC9Qcm9ncmVzc1RyYWNrZXInO1xuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJy4uLy4uL2xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0IHtPcHRpb25hbH0gZnJvbSAnLi4vLi4vdXRpbC90cy9PcHRpb25hbCc7XG5pbXBvcnQge1ByZWNvbmRpdGlvbnN9IGZyb20gJy4uLy4uL1ByZWNvbmRpdGlvbnMnO1xuXG5jb25zdCBJRCA9ICdwb2xhci1kZXRlcm1pbmF0ZS1wcm9ncmVzcy1iYXInO1xuXG5jb25zdCBsb2cgPSBMb2dnZXIuY3JlYXRlKCk7XG5cbmNvbnN0IEZBU1RfUFJPR1JFU1NfQ1VUT0ZGID0gMzAwO1xuXG4vKipcbiAqIFNpbXBsZSBwcm9ncmVzcyBiYXIgdGhhdCB3ZSBjYW4gZGlzcGxheSBhdCBhbnkgdGltZSBvbiBhIHBhZ2Ugd2l0aG91dFxuICogY29tcGxpY2F0ZWQgcmVuZGVyaW5nIGlzc3VlcyBvciByZXF1aXJpbmcgUmVhY3QgdG8gYmUgdXNlZC4gIFRoaXMgYWxsb3dzXG4gKiB1cyB0byBlYXNpbHkgc2hvdyBhIEdVSSBmb3IgYSBkb3dubG9hZCBhdCBhbnkgcG9pbnQgaW4gdGltZS5cbiAqL1xuZXhwb3J0IGNsYXNzIERldGVybWluYXRlUHJvZ3Jlc3NCYXIge1xuXG4gICAgLy8gVE9ETzogd2UgYWNjZXB0IGEgcHJvZ3Jlc3Mgb2JqZWN0IHRvb1xuICAgIHB1YmxpYyBzdGF0aWMgdXBkYXRlKHZhbHVlOiBudW1iZXIgfCBQcm9ncmVzcykge1xuXG4gICAgICAgIGNvbnN0IHByb2dyZXNzOiBudW1iZXIgPVxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyA/IHZhbHVlIDogdmFsdWUucHJvZ3Jlc3M7XG5cbiAgICAgICAgaWYgKCEgcHJvZ3Jlc3MgfHwgcHJvZ3Jlc3MgPCAwIHx8IHByb2dyZXNzID4gMTAwKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIGFuIGludmFsaWQgdmFsdWUuLi5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSkge1xuXG4gICAgICAgICAgICBpZiAodmFsdWUuZHVyYXRpb24gPCBGQVNUX1BST0dSRVNTX0NVVE9GRiAmJiBwcm9ncmVzcyA8IDEwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb2dyZXNzID09PSAxMDAgJiYgISB0aGlzLmdldCgpLmlzUHJlc2VudCgpKSB7XG4gICAgICAgICAgICAvLyB0aGVyZSdzIG5vdGhpbmcgdGhhdCBuZWVkcyB0byBiZSBhY3R1YWxseSBkb25lIGhlcmUuICBXZSd2ZSBiZWVuXG4gICAgICAgICAgICAvLyB0b2xkIHNvbWV0aGluZyB3YXMgY29tcGxldGVkIGJ1dCB3ZSBuZXZlciBhY3R1YWxseSBsb2dnZWQgdGhhdFxuICAgICAgICAgICAgLy8gaXQgd2FzIHByb2Nlc3Npbmcgd2hpY2ggbWlnaHQgaGFwcGVuIHNvbWV0aW1lcyBpZiB3ZSdyZSBnaXZlblxuICAgICAgICAgICAgLy8gdGhlIGxhc3Qgam9iLiAgRWl0aGVyIHdheSBldmVuIGlmIGl0J3MgYSBwcm9ncmFtbWVycyBlcnJvciB0aGVyZVxuICAgICAgICAgICAgLy8gaXMgbm8gbmVlZCB0byB1cGRhdGUgdGhlIFVJIGhlcmUuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcm9ncmVzc0VsZW1lbnQgPSB0aGlzLmdldE9yQ3JlYXRlKCk7XG4gICAgICAgIHByb2dyZXNzRWxlbWVudC52YWx1ZSA9IHByb2dyZXNzO1xuXG4gICAgICAgIGlmIChwcm9ncmVzcyA+PSAxMDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBkZXN0cm95KCkge1xuXG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSAzNTA7XG5cbiAgICAgICAgY29uc3QgZG9EZXN0cm95ID0gKCkgPT4ge1xuXG4gICAgICAgICAgICBjb25zdCBwcm9ncmVzc0VsZW1lbnQgPSB0aGlzLmdldCgpLmdldE9yVW5kZWZpbmVkKCk7XG5cbiAgICAgICAgICAgIGlmIChwcm9ncmVzc0VsZW1lbnQpIHtcblxuICAgICAgICAgICAgICAgIGlmIChwcm9ncmVzc0VsZW1lbnQucGFyZW50RWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmVzc0VsZW1lbnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChwcm9ncmVzc0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZy53YXJuKFwiTm8gcGFyZW50IGVsZW1lbnQgZm9yIHByb2dyZXNzIGJhci5cIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGxvZy53YXJuKFwiTm8gcHJvZ3Jlc3MgYmFyIHRvIGRlc3Ryb3kuXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG5cbiAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzRWxlbWVudCA9IHRoaXMuZ2V0KCk7XG5cbiAgICAgICAgICAgIGlmICghIHByb2dyZXNzRWxlbWVudC5pc1ByZXNlbnQoKSB8fCBwcm9ncmVzc0VsZW1lbnQuZ2V0KCkudmFsdWUgIT09IDEwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZG9EZXN0cm95KCk7XG5cbiAgICAgICAgfSwgdGltZW91dCk7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBnZXRPckNyZWF0ZSgpIHtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmdldCgpO1xuXG4gICAgICAgIGlmIChyZXN1bHQuaXNQcmVzZW50KCkpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuZ2V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUoKTtcblxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGdldCgpOiBPcHRpb25hbDxIVE1MUHJvZ3Jlc3NFbGVtZW50PiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChJRCk7XG4gICAgICAgIHJldHVybiBPcHRpb25hbC5vZig8SFRNTFByb2dyZXNzRWxlbWVudD4gZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgY3JlYXRlKCk6IEhUTUxQcm9ncmVzc0VsZW1lbnQge1xuXG4gICAgICAgIGNvbnN0IGVsZW1lbnQ6IEhUTUxQcm9ncmVzc0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwcm9ncmVzcycpO1xuXG4gICAgICAgIGVsZW1lbnQudmFsdWUgPSAwO1xuICAgICAgICBlbGVtZW50Lm1heCA9IDEwMDtcblxuICAgICAgICBlbGVtZW50LmlkID0gSUQ7XG5cbiAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnNHB4JztcblxuICAgICAgICBlbGVtZW50LnN0eWxlLndpZHRoID0gYDEwMCVgO1xuXG4gICAgICAgIC8vLyBwcm9ncmVzcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9JyM4OUFERkQnO1xuICAgICAgICAvLyBwcm9ncmVzcy5zdHlsZS5jb2xvcj0nIzg5QURGRCc7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xuICAgICAgICBlbGVtZW50LnN0eWxlLnRvcCA9ICcwJztcbiAgICAgICAgZWxlbWVudC5zdHlsZS5sZWZ0ID0gJzAnO1xuICAgICAgICBlbGVtZW50LnN0eWxlLnpJbmRleCA9ICc5OTk5OTk5OTk5OSc7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuYm9yZGVyVG9wID0gJzAnO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmJvcmRlckxlZnQgPSAnMCc7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuYm9yZGVyUmlnaHQgPSAnMCc7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuYm9yZGVyQm90dG9tID0gJzAnO1xuICAgICAgICAvLyBlbGVtZW50LnN0eWxlLndlYmtpdEFwcGVhcmFuY2UgPSAnbm9uZSc7XG4gICAgICAgIC8vIGVsZW1lbnQuc3R5bGUuYm9yZGVyUmFkaXVzID0gJzAnO1xuXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG5cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG5cbiAgICB9XG5cbn1cblxuIl19