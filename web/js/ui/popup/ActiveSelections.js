"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../../logger/Logger");
const Selections_1 = require("../../highlights/text/selection/Selections");
const Ranges_1 = require("../../highlights/text/selection/Ranges");
const log = Logger_1.Logger.create();
class ActiveSelections {
    static addEventListener(listener, target = document.body) {
        let originPoint;
        let activeSelection;
        let eventFired = 'none';
        const handleDestroyedSelection = () => {
            listener(Object.assign({}, activeSelection, { type: 'destroyed' }));
            activeSelection = undefined;
            eventFired = 'destroyed';
        };
        target.addEventListener('mousedown', (event) => {
            if (!activeSelection) {
                originPoint = this.eventToPoint(event);
            }
        });
        target.addEventListener('mouseup', (event) => {
            const handleMouseEvent = () => {
                let hasActiveTextSelection = false;
                eventFired = 'none';
                try {
                    const view = event.view;
                    const selection = view.getSelection();
                    hasActiveTextSelection = this.hasActiveTextSelection(selection);
                    const point = this.eventToPoint(event);
                    const element = this.targetElementForEvent(event);
                    if (!element) {
                        log.warn("No target element: ", event.target);
                        return;
                    }
                    if (activeSelection) {
                        handleDestroyedSelection();
                    }
                    if (hasActiveTextSelection) {
                        const mouseDirection = point.y - originPoint.y < 0 ? 'up' : 'down';
                        const range = selection.getRangeAt(0);
                        const boundingClientRect = range.getBoundingClientRect();
                        activeSelection = {
                            element,
                            originPoint: originPoint,
                            mouseDirection,
                            boundingClientRect,
                            selection,
                            view,
                            type: 'created'
                        };
                        listener(activeSelection);
                        eventFired = 'created';
                    }
                }
                finally {
                }
            };
            this.withTimeout(() => handleMouseEvent());
        });
    }
    static withTimeout(callback) {
        setTimeout(() => callback(), 1);
    }
    static targetElementForEvent(event) {
        if (event.target instanceof Node) {
            if (event.target instanceof HTMLElement) {
                return event.target;
            }
            else {
                return event.target.parentElement;
            }
        }
        else {
            log.warn("Event target is not node: ", event.target);
        }
        return undefined;
    }
    static hasActiveTextSelection(selection) {
        const ranges = Selections_1.Selections.toRanges(selection);
        for (const range of ranges) {
            if (Ranges_1.Ranges.hasText(range)) {
                return true;
            }
        }
        return false;
    }
    static eventToPoint(event) {
        return {
            x: event.offsetX,
            y: event.offsetY
        };
    }
}
exports.ActiveSelections = ActiveSelections;
//# sourceMappingURL=data:application/json;base64,