"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Popover_1 = __importDefault(require("reactstrap/lib/Popover"));
const Optional_1 = require("../../util/ts/Optional");
const Points_1 = require("../../Points");
const DocFormatFactory_1 = require("../../docformat/DocFormatFactory");
const Logger_1 = require("../../logger/Logger");
const ISODateTimeStrings_1 = require("../../metadata/ISODateTimeStrings");
const log = Logger_1.Logger.create();
class ControlledPopup extends React.Component {
    constructor(props) {
        super(props);
        this.docFormat = DocFormatFactory_1.DocFormatFactory.getInstance();
        this.toggle = this.toggle.bind(this);
        this.onTriggerPopupEvent = this.onTriggerPopupEvent.bind(this);
        this.state = {
            active: false,
        };
    }
    componentWillMount() {
        this.props.popupStateEventDispatcher.addEventListener(event => {
            this.setState(event);
        });
        this.props.triggerPopupEventDispatcher.addEventListener(event => {
            this.onTriggerPopupEvent(event);
        });
    }
    componentWillUnmount() {
        this.moveElementToBody();
    }
    render() {
        return (React.createElement("div", { id: "comment-popup-box" },
            React.createElement("div", { id: this.props.id + '-anchor' }),
            React.createElement(Popover_1.default, { placement: this.props.placement, id: this.props.id + '-popover', isOpen: this.state.active, target: this.props.id + '-anchor', toggle: this.toggle, style: {} }, this.props.children)));
    }
    toggle() {
        if (this.selection) {
            const active = !this.selection.isCollapsed;
            this.setState({
                active,
                activated: ISODateTimeStrings_1.ISODateTimeStrings.create()
            });
            if (!active) {
                this.moveElementToBody();
            }
        }
    }
    moveElementToBody() {
        const id = `${this.props.id}-anchor`;
        const anchorElement = document.getElementById(id);
        if (!anchorElement) {
            return;
        }
        const doc = anchorElement.ownerDocument;
        anchorElement.parentElement.removeChild(anchorElement);
        doc.body.appendChild(anchorElement);
    }
    onTriggerPopupEvent(event) {
        const pageElements = document.querySelectorAll(".page");
        const pageElement = pageElements[event.pageNum - 1];
        this.selection = event.selection;
        let origin = Optional_1.Optional.of(pageElement.getBoundingClientRect())
            .map(rect => {
            return { 'x': rect.left, 'y': rect.top };
        })
            .get();
        if (this.docFormat.name === 'html') {
            origin = { x: 0, y: 0 };
        }
        const point = event.point;
        const relativePoint = Points_1.Points.relativeTo(origin, point);
        const offset = event.offset || { x: 0, y: 0 };
        const top = relativePoint.y + offset.y;
        const left = relativePoint.x + offset.x;
        const id = `${this.props.id}-anchor`;
        const cssText = `position: absolute; top: ${top}px; left: ${left}px;`;
        const anchorElement = document.getElementById(id);
        if (anchorElement) {
            anchorElement.style.cssText = cssText;
            anchorElement.parentElement.removeChild(anchorElement);
            pageElement.insertBefore(anchorElement, pageElement.firstChild);
            this.setState({
                active: true,
            });
        }
        else {
            log.warn("Could not find anchor element for id: " + id);
        }
    }
}
exports.ControlledPopup = ControlledPopup;
//# sourceMappingURL=data:application/json;base64,