"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const popper_js_1 = __importDefault(require("popper.js"));
const MouseEventReferenceObject_1 = require("./MouseEventReferenceObject");
const PointReferenceObject_1 = require("./PointReferenceObject");
class Popup {
    static createAtPoint(point, placement, popupElement) {
        const referenceObject = new PointReferenceObject_1.PointReferenceObject(point.x, point.y);
        return new popper_js_1.default(referenceObject, popupElement, {
            placement,
            onCreate: (data) => {
                this.showElement(popupElement);
            },
            modifiers: {}
        });
    }
    static createAtSelection(mouseEvent, range, mouseDirection, placement, popupElement) {
        const referenceObject = new MouseEventReferenceObject_1.MouseEventReferenceObject(mouseEvent, range, mouseDirection);
        return new popper_js_1.default(referenceObject, popupElement, {
            placement,
            onCreate: (data) => {
                this.showElement(popupElement);
            },
            modifiers: {}
        });
    }
    static showElement(element) {
        element.style.display = 'block';
    }
}
exports.Popup = Popup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9wdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQb3B1cC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwwREFBK0I7QUFDL0IsMkVBQXNFO0FBRXRFLGlFQUE0RDtBQVU1RCxNQUFhLEtBQUs7SUFLUCxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQWEsRUFDYixTQUEyQixFQUMzQixZQUF5QjtRQUdqRCxNQUFNLGVBQWUsR0FBRyxJQUFJLDJDQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25FLE9BQU8sSUFBSSxtQkFBTSxDQUFDLGVBQWUsRUFBRSxZQUFZLEVBQUc7WUFFOUMsU0FBUztZQUNULFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUNmLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDbkMsQ0FBQztZQUNELFNBQVMsRUFBRSxFQUNWO1NBRUosQ0FBQyxDQUFDO0lBRVAsQ0FBQztJQUVNLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxVQUFzQixFQUN0QixLQUFZLEVBQ1osY0FBOEIsRUFDOUIsU0FBMkIsRUFDM0IsWUFBeUI7UUFFckQsTUFBTSxlQUFlLEdBQUcsSUFBSSxxREFBeUIsQ0FBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3pGLE9BQU8sSUFBSSxtQkFBTSxDQUFDLGVBQWUsRUFBRSxZQUFZLEVBQUc7WUFFOUMsU0FBUztZQUNULFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUNmLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDbkMsQ0FBQztZQUNELFNBQVMsRUFBRSxFQUVWO1NBRUosQ0FBQyxDQUFDO0lBRVAsQ0FBQztJQUdPLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBb0I7UUFLM0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBRXBDLENBQUM7Q0FFSjtBQXZERCxzQkF1REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUG9wcGVyIGZyb20gJ3BvcHBlci5qcyc7XG5pbXBvcnQge01vdXNlRXZlbnRSZWZlcmVuY2VPYmplY3R9IGZyb20gJy4vTW91c2VFdmVudFJlZmVyZW5jZU9iamVjdCc7XG5pbXBvcnQge0lQb2ludH0gZnJvbSAnLi4vLi4vUG9pbnQnO1xuaW1wb3J0IHtQb2ludFJlZmVyZW5jZU9iamVjdH0gZnJvbSAnLi9Qb2ludFJlZmVyZW5jZU9iamVjdCc7XG5pbXBvcnQge0lFdmVudERpc3BhdGNoZXJ9IGZyb20gJy4uLy4uL3JlYWN0b3IvU2ltcGxlUmVhY3Rvcic7XG5pbXBvcnQge0NvbW1lbnRJbnB1dEV2ZW50fSBmcm9tICcuLi8uLi9jb21tZW50cy9yZWFjdC9Db21tZW50SW5wdXRFdmVudCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHtDb21tZW50UG9wdXBCb3h9IGZyb20gJy4uLy4uL2NvbW1lbnRzL3JlYWN0L0NvbW1lbnRQb3B1cEJveCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge09uQ29tbWVudEhhbmRsZXJ9IGZyb20gJy4uLy4uL2NvbW1lbnRzL3JlYWN0L0NvbW1lbnRQb3B1cEJveGVzJztcbmltcG9ydCB7VHJpZ2dlclBvcHVwRXZlbnR9IGZyb20gJy4vVHJpZ2dlclBvcHVwRXZlbnQnO1xuaW1wb3J0IHtDb250cm9sbGVkUG9wdXB9IGZyb20gJy4vQ29udHJvbGxlZFBvcHVwJztcblxuZXhwb3J0IGNsYXNzIFBvcHVwIHtcblxuICAgIC8vIFRPRE86IGF1dG9tYXRpY2FsbHkgaGlkZSB0aGUgcG9wcGVyIGlmIHRoZXkgY2xpY2sgb3V0c2lkZVxuICAgIC8vIG9mIHRoZSBVSSBhcyBhbiBvcHRpb24uXG5cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUF0UG9pbnQocG9pbnQ6IElQb2ludCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiBQb3BwZXIuUGxhY2VtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B1cEVsZW1lbnQ6IEhUTUxFbGVtZW50KTogUG9wdXBJbnN0YW5jZSB7XG5cblxuICAgICAgICBjb25zdCByZWZlcmVuY2VPYmplY3QgPSBuZXcgUG9pbnRSZWZlcmVuY2VPYmplY3QocG9pbnQueCwgcG9pbnQueSk7XG4gICAgICAgIHJldHVybiBuZXcgUG9wcGVyKHJlZmVyZW5jZU9iamVjdCwgcG9wdXBFbGVtZW50ICwge1xuXG4gICAgICAgICAgICBwbGFjZW1lbnQsXG4gICAgICAgICAgICBvbkNyZWF0ZTogKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dFbGVtZW50KHBvcHVwRWxlbWVudCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUF0U2VsZWN0aW9uKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZTogUmFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3VzZURpcmVjdGlvbjogTW91c2VEaXJlY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQ6IFBvcHBlci5QbGFjZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B1cEVsZW1lbnQ6IEhUTUxFbGVtZW50KTogUG9wdXBJbnN0YW5jZSB7XG5cbiAgICAgICAgY29uc3QgcmVmZXJlbmNlT2JqZWN0ID0gbmV3IE1vdXNlRXZlbnRSZWZlcmVuY2VPYmplY3QobW91c2VFdmVudCwgcmFuZ2UsIG1vdXNlRGlyZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQb3BwZXIocmVmZXJlbmNlT2JqZWN0LCBwb3B1cEVsZW1lbnQgLCB7XG5cbiAgICAgICAgICAgIHBsYWNlbWVudCxcbiAgICAgICAgICAgIG9uQ3JlYXRlOiAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0VsZW1lbnQocG9wdXBFbGVtZW50KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtb2RpZmllcnM6IHtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG5cbiAgICBwcml2YXRlIHN0YXRpYyBzaG93RWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuXG4gICAgICAgIC8vIG1pbWljcyBqcXVlcnkgcG9wdXAuc2hvdygpIHdpdGhvdXQganF1ZXJ5XG5cbiAgICAgICAgLy8gVE9ETzogcmVzdG9yZSB3aGF0IGl0IHdhcyBiZWZvcmUgaXQgd2FzIGhpZGRlbi5cbiAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblxuICAgIH1cblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBvcHVwSW5zdGFuY2Uge1xuICAgIGRlc3Ryb3koKTogdm9pZDtcbn1cblxuLyoqXG4gKiBUaGUgZGlyZWN0aW9uIHRoZSBtb3VzZSBpcyBtb3ZpbmcuXG4gKi9cbmV4cG9ydCB0eXBlIE1vdXNlRGlyZWN0aW9uID0gJ3VwJyB8ICdkb3duJztcblxuIl19