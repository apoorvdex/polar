"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Dictionaries_1 = require("../util/Dictionaries");
const chai = require("chai");
const chaiDiff = require("chai-diff");
const assert = chai.assert;
const expect = chai.expect;
chai.config.truncateThreshold = 0;
chai.use(chaiDiff);
function assertJSON(actual, expected, message, unsorted) {
    actual = toJSON(actual, unsorted);
    expected = toJSON(expected, unsorted);
    if (actual !== expected) {
        console.error("BEGIN ACTUAL ==========");
        console.error(actual);
        console.error("END ACTUAL   ==========");
    }
    try {
        expect(actual).not.differentFrom(expected, message);
    }
    catch (e) {
        console.error(e.message);
        throw e;
    }
}
exports.assertJSON = assertJSON;
function toJSON(obj, unsorted = false) {
    if (typeof obj === "string") {
        obj = JSON.parse(obj);
    }
    const replacer = (key, value) => {
        if (typeof value === 'object' && value instanceof Set) {
            return [...value];
        }
        return value;
    };
    if (!Array.isArray(obj) && !unsorted) {
        obj = Dictionaries_1.Dictionaries.sorted(obj);
    }
    return JSON.stringify(obj, replacer, "  ");
}
exports.toJSON = toJSON;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXNzZXJ0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkFzc2VydGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1REFBa0Q7QUFFbEQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUV0QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQzNCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7QUFFM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLENBQUM7QUFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUVuQixTQUFnQixVQUFVLENBQUMsTUFBVyxFQUNYLFFBQWEsRUFDYixPQUFnQixFQUNoQixRQUFrQjtJQUd6QyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNsQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUV0QyxJQUFLLE1BQU0sS0FBSyxRQUFRLEVBQUU7UUFDdEIsT0FBTyxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEIsT0FBTyxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0tBQzVDO0lBRUQsSUFBSTtRQUNBLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUUsYUFBYSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUN4RDtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekIsTUFBTSxDQUFDLENBQUM7S0FDWDtBQUVMLENBQUM7QUF0QkQsZ0NBc0JDO0FBRUQsU0FBZ0IsTUFBTSxDQUFDLEdBQVEsRUFBRSxXQUFvQixLQUFLO0lBRXRELElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1FBR3pCLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3pCO0lBWUQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxHQUFRLEVBQUUsS0FBVSxFQUFFLEVBQUU7UUFHdEMsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxZQUFZLEdBQUcsRUFBRTtZQUNuRCxPQUFPLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztTQUNyQjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBRWpCLENBQUMsQ0FBQztJQUVGLElBQUksQ0FBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1FBS25DLEdBQUcsR0FBRywyQkFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNsQztJQUVELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBRS9DLENBQUM7QUF2Q0Qsd0JBdUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaWN0aW9uYXJpZXN9IGZyb20gXCIuLi91dGlsL0RpY3Rpb25hcmllc1wiO1xuXG5jb25zdCBjaGFpID0gcmVxdWlyZShcImNoYWlcIik7XG5jb25zdCBjaGFpRGlmZiA9IHJlcXVpcmUoXCJjaGFpLWRpZmZcIik7XG5cbmNvbnN0IGFzc2VydCA9IGNoYWkuYXNzZXJ0O1xuY29uc3QgZXhwZWN0ID0gY2hhaS5leHBlY3Q7XG5cbmNoYWkuY29uZmlnLnRydW5jYXRlVGhyZXNob2xkID0gMDtcbmNoYWkudXNlKGNoYWlEaWZmKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEpTT04oYWN0dWFsOiBhbnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZDogYW55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZT86IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc29ydGVkPzogYm9vbGVhbikge1xuXG4gICAgLy8gZmlyc3QgY29udmVydCBib3RoIHRvIEpTT04gaWYgbmVjZXNzYXJ5LlxuICAgIGFjdHVhbCA9IHRvSlNPTihhY3R1YWwsIHVuc29ydGVkKTtcbiAgICBleHBlY3RlZCA9IHRvSlNPTihleHBlY3RlZCwgdW5zb3J0ZWQpO1xuXG4gICAgaWYgKCBhY3R1YWwgIT09IGV4cGVjdGVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJCRUdJTiBBQ1RVQUwgPT09PT09PT09PVwiKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihhY3R1YWwpO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRU5EIEFDVFVBTCAgID09PT09PT09PT1cIik7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgZXhwZWN0KGFjdHVhbCkubm90LiBkaWZmZXJlbnRGcm9tKGV4cGVjdGVkLCBtZXNzYWdlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZS5tZXNzYWdlKTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvSlNPTihvYmo6IGFueSwgdW5zb3J0ZWQ6IGJvb2xlYW4gPSBmYWxzZSk6IHN0cmluZyB7XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAvLyBmaXJzdCBwYXJzZSBpdCBhcyBhcyBKU09OIGludG8gYW4gb2JqZWN0IHNvIGl0J3Mgc2VyaWFsaXplZCB1c2luZ1xuICAgICAgICAvLyB0aGUgc2FtZSBjYW5vbmljYWwgZnVuY3Rpb24gYmVsb3cuXG4gICAgICAgIG9iaiA9IEpTT04ucGFyc2Uob2JqKTtcbiAgICB9XG5cbiAgICAvLyBpZihvYmogaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIC8vICAgICBpZiggb2JqLmxlbmd0aCA+PSAxICkge1xuICAgIC8vICAgICAgICAgaWYgKCh0eXBlb2Ygb2JqWzBdKSA9PT0gXCJzdHJpbmdcIikge1xuICAgIC8vICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgIH1cbiAgICAvLyB9XG5cbiAgICAvLyBhbHNvIGFjY2VwdCBhbiBhcnJheSBvZiBzdHJpbmdzLlxuXG4gICAgY29uc3QgcmVwbGFjZXIgPSAoa2V5OiBhbnksIHZhbHVlOiBhbnkpID0+IHtcblxuICAgICAgICAvLyBoYW5kbGUgc2V0IHJlcGxhY2VtZW50Li4uXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gWy4uLnZhbHVlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcblxuICAgIH07XG5cbiAgICBpZiAoISBBcnJheS5pc0FycmF5KG9iaikgJiYgIXVuc29ydGVkKSB7XG5cbiAgICAgICAgLy8gVE9ETzogYmVjYXVzZSBvZiB0aGUgdG9KU09OIG1ldGhvZCB3ZSBtaWdodCB3YW50IHRvIGNhbGwgSlNPTlxuICAgICAgICAvLyBzdHJpbmdpZnksIHRoZW4gcGFyc2UgaXQgYWdhaW4sIHRoZW4gc29ydCwgdGhlbiBzdHJpbmdpZnkgYWdhaW4uXG5cbiAgICAgICAgb2JqID0gRGljdGlvbmFyaWVzLnNvcnRlZChvYmopO1xuICAgIH1cblxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIHJlcGxhY2VyLCBcIiAgXCIpO1xuXG59XG4iXX0=