"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Preconditions_1 = require("../Preconditions");
const TIMEOUT = 250;
class SpectronOutputMonitorService {
    constructor(app) {
        this.stopped = false;
        this.app = Preconditions_1.Preconditions.assertNotNull(app, "app");
        this.stopped = false;
    }
    start() {
        this._iter();
        console.log("SpectronOutputMonitorService started");
    }
    _iter() {
        this._doLogForwarding();
        this._reschedule();
    }
    _doLogForwarding() {
        let client = this.app.client;
        if (client) {
            client.getMainProcessLogs().then(function (logs) {
                logs.forEach(function (log) {
                    console.log("main: " + log);
                });
            });
            client.getRenderProcessLogs().then(function (logs) {
                logs.forEach(function (log) {
                    console.log(`render: ${log.timestamp} ${log.source} ${log.level}: ${log.message}`);
                });
            });
        }
        else {
        }
    }
    _reschedule() {
        if (this.stopped) {
            return;
        }
        setTimeout(() => {
            this._doLogForwarding();
        }, TIMEOUT);
    }
    stop() {
        this._doLogForwarding();
        this.stopped = true;
        console.log("SpectronOutputMonitorService stopped");
    }
}
exports.SpectronOutputMonitorService = SpectronOutputMonitorService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3BlY3Ryb25PdXRwdXRNb25pdG9yU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNwZWN0cm9uT3V0cHV0TW9uaXRvclNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxvREFBK0M7QUFFL0MsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDO0FBS3BCLE1BQWEsNEJBQTRCO0lBTXJDLFlBQVksR0FBUTtRQUZaLFlBQU8sR0FBWSxLQUFLLENBQUM7UUFHN0IsSUFBSSxDQUFDLEdBQUcsR0FBRyw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDekIsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELEtBQUs7UUFFRCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFFdkIsQ0FBQztJQUVELGdCQUFnQjtRQUVaLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBRTdCLElBQUcsTUFBTSxFQUFFO1lBSVAsTUFBTSxDQUFDLGtCQUFrQixFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBVztnQkFDbEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUc7b0JBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDO2dCQUNoQyxDQUFDLENBQUMsQ0FBQTtZQUVOLENBQUMsQ0FBQyxDQUFBO1lBSUYsTUFBTSxDQUFDLG9CQUFvQixFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBVztnQkFDcEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUc7b0JBcUJ0QixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxDQUFDLFNBQVMsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxLQUFLLEtBQUssR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFFLENBQUM7Z0JBRXhGLENBQUMsQ0FBQyxDQUFBO1lBRU4sQ0FBQyxDQUFDLENBQUE7U0FFTDthQUFNO1NBRU47SUFFTCxDQUFDO0lBRUQsV0FBVztRQUVQLElBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNiLE9BQU87U0FDVjtRQUVELFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUM1QixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFaEIsQ0FBQztJQUVELElBQUk7UUFJQSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUVwQixPQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7SUFFeEQsQ0FBQztDQUVKO0FBakdELG9FQWlHQyIsInNvdXJjZXNDb250ZW50IjpbIi8vaW1wb3J0IHtBcHBsaWNhdGlvbn0gZnJvbSAnc3BlY3Ryb24nO1xuaW1wb3J0IHtQcmVjb25kaXRpb25zfSBmcm9tICcuLi9QcmVjb25kaXRpb25zJztcblxuY29uc3QgVElNRU9VVCA9IDI1MDtcblxuLyoqXG4gKiBLZWVwIGEgYmFja2dyb3VuZCBtb25pdG9yIHRvIHJlYWQgbG9ncyBhbmQgdGhlbiB3cml0ZSB0aGVtIHRvIHRoZSBtYWluIHByb2Nlc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBTcGVjdHJvbk91dHB1dE1vbml0b3JTZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgYXBwOiBhbnk7XG5cbiAgICBwcml2YXRlIHN0b3BwZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogYW55KSB7XG4gICAgICAgIHRoaXMuYXBwID0gUHJlY29uZGl0aW9ucy5hc3NlcnROb3ROdWxsKGFwcCwgXCJhcHBcIik7XG4gICAgICAgIHRoaXMuc3RvcHBlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLl9pdGVyKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiU3BlY3Ryb25PdXRwdXRNb25pdG9yU2VydmljZSBzdGFydGVkXCIpO1xuICAgIH1cblxuICAgIF9pdGVyKCkge1xuXG4gICAgICAgIHRoaXMuX2RvTG9nRm9yd2FyZGluZygpO1xuICAgICAgICB0aGlzLl9yZXNjaGVkdWxlKCk7XG5cbiAgICB9XG5cbiAgICBfZG9Mb2dGb3J3YXJkaW5nKCkge1xuXG4gICAgICAgIGxldCBjbGllbnQgPSB0aGlzLmFwcC5jbGllbnQ7XG5cbiAgICAgICAgaWYoY2xpZW50KSB7XG5cbiAgICAgICAgICAgIC8vIHJpZ2h0IG5vdyBlIG9ubHkgZm9yd2FyZCB0aGUgbWFpbiBiZWNhdXNlIHdlIGNhbiBnZXQgdGhlIHJlbmRlcmVyXG4gICAgICAgICAgICAvLyB2aWEgdGhlIGphdmFzY3JpcHQgY29uc29sZS5cbiAgICAgICAgICAgIGNsaWVudC5nZXRNYWluUHJvY2Vzc0xvZ3MoKS50aGVuKGZ1bmN0aW9uIChsb2dzOiBhbnlbXSkge1xuICAgICAgICAgICAgICAgIGxvZ3MuZm9yRWFjaChmdW5jdGlvbiAobG9nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibWFpbjogXCIgKyBsb2cpO1xuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC8vIHJpZ2h0IG5vdyBlIG9ubHkgZm9yd2FyZCB0aGUgbWFpbiBiZWNhdXNlIHdlIGNhbiBnZXQgdGhlIHJlbmRlcmVyXG4gICAgICAgICAgICAvLyB2aWEgdGhlIGphdmFzY3JpcHQgY29uc29sZS5cbiAgICAgICAgICAgIGNsaWVudC5nZXRSZW5kZXJQcm9jZXNzTG9ncygpLnRoZW4oZnVuY3Rpb24gKGxvZ3M6IGFueVtdKSB7XG4gICAgICAgICAgICAgICAgbG9ncy5mb3JFYWNoKGZ1bmN0aW9uIChsb2cpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInJlbmRlcjogXCIgKyBKU09OLnN0cmluZ2lmeShsb2csIG51bGwsIFwiICBcIikpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IHRoaXMgaXMgQUxMIHdlIGdldCBmb3IgU0VWRVJFLiAgV2UgZG9uJ3QgZ2V0IGFuXG4gICAgICAgICAgICAgICAgICAgIC8vIGV4Y2VwdGlvbi4gIEkgdGhpbmsgaWYgdGhlcmUgYXJlIGFyZ3MgZ2l2ZW4gdG8gbG9nLmluZm8gb3JcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9nLmVycm9yIHRoZXkgYXJlIG5vdCBmb3J3YXJkZWQgdG8gdXMuXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gcmVuZGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBcImxldmVsXCI6IFwiU0VWRVJFXCIsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgXCJtZXNzYWdlXCI6IFwiZmlsZTovLy9ob21lL2J1cnRvbi9wcm9qZWN0cy9wb2xhci1ib29rc2hlbGYvdGVzdC9zcGVjdHJvbi9jb250ZW50LWNhcHR1cmUvYXBwLWJ1bmRsZS5qcyAxMDY5Nzo4IFxcXCJGSVhNRTI6IFxcXCJcIixcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBcInNvdXJjZVwiOiBcImNvbnNvbGUtYXBpXCIsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgXCJ0aW1lc3RhbXBcIjogMTUzMjQ0ODcxOTQ5MVxuICAgICAgICAgICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gcmVuZGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBcImxldmVsXCI6IFwiSU5GT1wiLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIFwibWVzc2FnZVwiOiBcImZpbGU6Ly8vaG9tZS9idXJ0b24vcHJvamVjdHMvcG9sYXItYm9va3NoZWxmL3Rlc3Qvc3BlY3Ryb24vY29udGVudC1jYXB0dXJlL2FwcC1idW5kbGUuanMgMTA3NTA6MTYgXFxcIklQQyBsaXN0ZW5lciBhZGRlZCBmb3IgY3JlYXRlLWFubm90YXRpb25cXFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgXCJzb3VyY2VcIjogXCJjb25zb2xlLWFwaVwiLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIFwidGltZXN0YW1wXCI6IDE1MzI0NDM2MTM1NTNcbiAgICAgICAgICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGByZW5kZXI6ICR7bG9nLnRpbWVzdGFtcH0gJHtsb2cuc291cmNlfSAke2xvZy5sZXZlbH06ICR7bG9nLm1lc3NhZ2V9YCApO1xuXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgfSlcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIF9yZXNjaGVkdWxlKCkge1xuXG4gICAgICAgIGlmKHRoaXMuc3RvcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9kb0xvZ0ZvcndhcmRpbmcoKTtcbiAgICAgICAgfSwgVElNRU9VVCk7XG5cbiAgICB9XG5cbiAgICBzdG9wKCkge1xuXG4gICAgICAgIC8vIGRvIG9uZSBtb3JlIGp1c3QgdG8gbWFrZSBzdXJlIHdlIGRvbid0IGhhdmUgYW55IG1pc3NpbmcgbGFzdCBtb21lbnRcbiAgICAgICAgLy8gbG9nc1xuICAgICAgICB0aGlzLl9kb0xvZ0ZvcndhcmRpbmcoKTtcbiAgICAgICAgdGhpcy5zdG9wcGVkID0gdHJ1ZTtcblxuICAgICAgICBjb25zb2xlLmxvZyhcIlNwZWN0cm9uT3V0cHV0TW9uaXRvclNlcnZpY2Ugc3RvcHBlZFwiKTtcblxuICAgIH1cblxufVxuIl19