"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const electron_1 = require("electron");
const Logger_1 = require("../../logger/Logger");
const TestResult_1 = require("./renderer/TestResult");
const IPCMessage_1 = require("../../ipc/handler/IPCMessage");
const Optional_1 = require("../../util/ts/Optional");
const log = Logger_1.Logger.create();
class TestResultService {
    constructor() {
    }
    start() {
        electron_1.ipcRenderer.on('test-result', (event, data) => {
            let ipcMessage = IPCMessage_1.IPCMessage.create(data);
            if (ipcMessage.type === "write") {
                this.onWrite(ipcMessage);
            }
            if (ipcMessage.type === "ping") {
                this.onPing(event, ipcMessage);
            }
        });
        electron_1.ipcRenderer.send("test-result", { type: "started" });
    }
    onPing(event, ipcMessage) {
        let pongMessage = new IPCMessage_1.IPCMessage("pong", true);
        event.sender.send(ipcMessage.computeResponseChannel(), pongMessage);
    }
    onWrite(data) {
        if (!Optional_1.Optional.present(TestResult_1.TestResult.get())) {
            let ipcMessage = IPCMessage_1.IPCMessage.create(data);
            if (Optional_1.Optional.present(ipcMessage.value)) {
                TestResult_1.TestResult.set(ipcMessage.value);
                log.info("Received test result: " + JSON.stringify(TestResult_1.TestResult.get()));
            }
            else if (data.err) {
            }
            else {
                log.error("Given neither result nor err: ", data);
            }
        }
        else {
            log.error("Existing test results already defined.: " + data.value);
        }
    }
}
exports.TestResultService = TestResultService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdFJlc3VsdFNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJUZXN0UmVzdWx0U2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHVDQUFxQztBQUNyQyxnREFBMkM7QUFDM0Msc0RBQWlEO0FBQ2pELDZEQUF3RDtBQUN4RCxxREFBZ0Q7QUFFaEQsTUFBTSxHQUFHLEdBQUcsZUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBUTVCLE1BQWEsaUJBQWlCO0lBRTFCO0lBRUEsQ0FBQztJQU1ELEtBQUs7UUFFRCxzQkFBVyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxLQUFxQixFQUFFLElBQVMsRUFBRSxFQUFFO1lBRS9ELElBQUksVUFBVSxHQUFHLHVCQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXpDLElBQUcsVUFBVSxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDNUI7WUFFRCxJQUFHLFVBQVUsQ0FBQyxJQUFJLEtBQUssTUFBTSxFQUFFO2dCQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQzthQUNsQztRQUdMLENBQUMsQ0FBQyxDQUFDO1FBR0gsc0JBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFFekQsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFxQixFQUFFLFVBQTJCO1FBRXJELElBQUksV0FBVyxHQUFHLElBQUksdUJBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFL0MsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLHNCQUFzQixFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFeEUsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFTO1FBRWIsSUFBRyxDQUFFLG1CQUFRLENBQUMsT0FBTyxDQUFDLHVCQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRTtZQUVyQyxJQUFJLFVBQVUsR0FBRyx1QkFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUV6QyxJQUFHLG1CQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFFbkMsdUJBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUVqQyxHQUFHLENBQUMsSUFBSSxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsdUJBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFFekU7aUJBQU0sSUFBRyxJQUFJLENBQUMsR0FBRyxFQUFFO2FBSW5CO2lCQUFNO2dCQUNILEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDckQ7U0FFSjthQUFNO1lBRUgsR0FBRyxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdEU7SUFFTCxDQUFDO0NBR0o7QUFwRUQsOENBb0VDIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbmltcG9ydCB7aXBjUmVuZGVyZXJ9IGZyb20gXCJlbGVjdHJvblwiO1xuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJy4uLy4uL2xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0IHtUZXN0UmVzdWx0fSBmcm9tICcuL3JlbmRlcmVyL1Rlc3RSZXN1bHQnO1xuaW1wb3J0IHtJUENNZXNzYWdlfSBmcm9tICcuLi8uLi9pcGMvaGFuZGxlci9JUENNZXNzYWdlJztcbmltcG9ydCB7T3B0aW9uYWx9IGZyb20gJy4uLy4uL3V0aWwvdHMvT3B0aW9uYWwnO1xuXG5jb25zdCBsb2cgPSBMb2dnZXIuY3JlYXRlKCk7XG5cblxuLyoqXG4gKiBTZXJ2aWNlIHRvIGtlZXAgdGhlIHJlc3VsdCBvZiBhIHRlc3QgcmVzdWx0IHdpdGhpblxuICpcbiAqIEBSZW5kZXJlckNvbnRleHQgVGhpcyBzaG91bGQgYmUgcnVuIGluIHRoZSByZW5kZXJlci5cbiAqL1xuZXhwb3J0IGNsYXNzIFRlc3RSZXN1bHRTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBTdGFydCB0aGUgc2VydmljZSBieSBsaXN0ZW5pbmcgdG8gbWVzc2FnZXMgcG9zdGVkLlxuICAgICAqL1xuICAgIHN0YXJ0KCk6IHZvaWQge1xuXG4gICAgICAgIGlwY1JlbmRlcmVyLm9uKCd0ZXN0LXJlc3VsdCcsIChldmVudDogRWxlY3Ryb24uRXZlbnQsIGRhdGE6IGFueSkgPT4ge1xuXG4gICAgICAgICAgICBsZXQgaXBjTWVzc2FnZSA9IElQQ01lc3NhZ2UuY3JlYXRlKGRhdGEpO1xuXG4gICAgICAgICAgICBpZihpcGNNZXNzYWdlLnR5cGUgPT09IFwid3JpdGVcIikge1xuICAgICAgICAgICAgICAgIHRoaXMub25Xcml0ZShpcGNNZXNzYWdlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoaXBjTWVzc2FnZS50eXBlID09PSBcInBpbmdcIikge1xuICAgICAgICAgICAgICAgIHRoaXMub25QaW5nKGV2ZW50LCBpcGNNZXNzYWdlKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHRlbGwgZXZlcnlvbmUgd2UndmUgc3RhcnRlZCBub3dcbiAgICAgICAgaXBjUmVuZGVyZXIuc2VuZChcInRlc3QtcmVzdWx0XCIsIHsgdHlwZTogXCJzdGFydGVkXCIgfSk7XG5cbiAgICB9XG5cbiAgICBvblBpbmcoZXZlbnQ6IEVsZWN0cm9uLkV2ZW50LCBpcGNNZXNzYWdlOiBJUENNZXNzYWdlPGFueT4pIHtcblxuICAgICAgICBsZXQgcG9uZ01lc3NhZ2UgPSBuZXcgSVBDTWVzc2FnZShcInBvbmdcIiwgdHJ1ZSk7XG5cbiAgICAgICAgZXZlbnQuc2VuZGVyLnNlbmQoaXBjTWVzc2FnZS5jb21wdXRlUmVzcG9uc2VDaGFubmVsKCksIHBvbmdNZXNzYWdlKTtcblxuICAgIH1cblxuICAgIG9uV3JpdGUoZGF0YTogYW55KSB7XG5cbiAgICAgICAgaWYoISBPcHRpb25hbC5wcmVzZW50KFRlc3RSZXN1bHQuZ2V0KCkpKSB7XG5cbiAgICAgICAgICAgIGxldCBpcGNNZXNzYWdlID0gSVBDTWVzc2FnZS5jcmVhdGUoZGF0YSk7XG5cbiAgICAgICAgICAgIGlmKE9wdGlvbmFsLnByZXNlbnQoaXBjTWVzc2FnZS52YWx1ZSkpIHtcblxuICAgICAgICAgICAgICAgIFRlc3RSZXN1bHQuc2V0KGlwY01lc3NhZ2UudmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgbG9nLmluZm8oXCJSZWNlaXZlZCB0ZXN0IHJlc3VsdDogXCIgKyBKU09OLnN0cmluZ2lmeShUZXN0UmVzdWx0LmdldCgpKSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZihkYXRhLmVycikge1xuXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogcmlnaHQgbm93IHdlIGRvIG5vdCBzZXQgdGhlIGVyci4uLlxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZy5lcnJvcihcIkdpdmVuIG5laXRoZXIgcmVzdWx0IG5vciBlcnI6IFwiLCBkYXRhKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVE9ETyBjb25zaWRlciB0ZWxsaW5nIHRoZSBzZW5kZXIuXG4gICAgICAgICAgICBsb2cuZXJyb3IoXCJFeGlzdGluZyB0ZXN0IHJlc3VsdHMgYWxyZWFkeSBkZWZpbmVkLjogXCIgKyBkYXRhLnZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG5cbn1cbiJdfQ==