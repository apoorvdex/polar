"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../logger/Logger");
const BaseWebRequestsListener_1 = require("./BaseWebRequestsListener");
const RequestState_1 = require("./RequestState");
const ProgressCalculator_1 = require("../util/ProgressCalculator");
const log = Logger_1.Logger.create();
class PendingWebRequestsListener extends BaseWebRequestsListener_1.BaseWebRequestsListener {
    constructor() {
        super();
        this.pendingRequests = {};
        this.eventListeners = [];
        this.requestState = new RequestState_1.RequestState();
        this.startedRequests = {};
        this.finishedRequests = {};
    }
    onWebRequestEvent(event) {
        setTimeout(() => {
            this.processWebRequestEvent(event);
        }, 0);
    }
    processWebRequestEvent(event) {
        const { name, details, callback } = event;
        let pendingChange = null;
        if (name === "onBeforeRequest") {
            this.pendingRequests[details.id] = details;
            this.startedRequests[details.id] = {
                event: name,
                id: details.id,
                url: details.url
            };
            pendingChange = "INCREMENTED";
            this.requestState.markStarted(details.id, details.url, name);
        }
        if (name === "onCompleted" ||
            name === "onErrorOccurred" ||
            name === "onBeforeRedirect" ||
            name === "onAuthRequired") {
            delete this.pendingRequests[details.id];
            this.finishedRequests[details.id] = {
                event: name,
                id: details.id,
                url: details.url
            };
            pendingChange = "DECREMENTED";
            this.requestState.markFinished(details.id, details.url, name);
        }
        const started = Object.keys(this.startedRequests).length;
        const finished = Object.keys(this.finishedRequests).length;
        const pending = started - finished;
        if (pendingChange) {
            log.info(`Pending state ${pendingChange} for request id=${details.id} to ${pending} on ${name} for URL: ${details.url}`);
        }
        const progress = ProgressCalculator_1.ProgressCalculator.calculate(finished, started);
        if (pending < 5) {
            log.debug("The following pending requests remain: \n", this.pendingRequests);
        }
        if (pending < 0) {
            const msg = `Pending request count is negative: ${pending} (started=${started}, finished=${finished})`;
            log.warn(msg);
        }
        log.debug(`Pending requests on ${name}: `, {
            pending,
            started,
            finished,
            progress
        });
        this.dispatchEventListeners({
            name,
            details,
            pending,
            started,
            finished,
            progress
        });
        if (callback) {
            callback({ cancel: false });
        }
    }
    addEventListener(eventListener) {
        this.eventListeners.push(eventListener);
    }
    dispatchEventListeners(event) {
        this.eventListeners.forEach(eventListener => {
            eventListener(event);
        });
    }
}
exports.PendingWebRequestsListener = PendingWebRequestsListener;
//# sourceMappingURL=data:application/json;base64,