"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../logger/Logger");
const log = Logger_1.Logger.create();
class RequestState {
    constructor() {
        this.map = {};
        log.info("Tracking request state...");
    }
    markStarted(id, url, eventName) {
        const requestEntry = { id, url, state: 'STARTED', eventName };
        if (id in this.map) {
            const existing = this.map[id];
            log.warn(`Request was started but already present in map for event: ${existing.eventName}`, existing);
            return;
        }
        this.map[id] = requestEntry;
    }
    markFinished(id, url, eventName) {
        const requestEntry = { id, url, state: 'FINISHED', eventName };
        if (!(id in this.map)) {
            log.warn("Request was marked finished but never marked started.");
            return;
        }
        if (this.map[id].state !== 'STARTED') {
            const existing = this.map[id];
            log.warn(`Request was marked finished but is not currently started: `, existing);
            return;
        }
        this.map[id] = requestEntry;
    }
}
exports.RequestState = RequestState;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVxdWVzdFN0YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUmVxdWVzdFN0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXdDO0FBRXhDLE1BQU0sR0FBRyxHQUFHLGVBQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQU01QixNQUFhLFlBQVk7SUFJckI7UUFGaUIsUUFBRyxHQUFrQyxFQUFFLENBQUM7UUFHckQsR0FBRyxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFJTSxXQUFXLENBQUMsRUFBVSxFQUFFLEdBQVcsRUFBRSxTQUFpQjtRQUV6RCxNQUFNLFlBQVksR0FBa0IsRUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFDLENBQUM7UUFFM0UsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNoQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlCLEdBQUcsQ0FBQyxJQUFJLENBQUMsNkRBQTZELFFBQVEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN0RyxPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQztJQUVoQyxDQUFDO0lBRU0sWUFBWSxDQUFDLEVBQVUsRUFBRSxHQUFXLEVBQUUsU0FBaUI7UUFFMUQsTUFBTSxZQUFZLEdBQWtCLEVBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBQyxDQUFDO1FBRTVFLElBQUksQ0FBRSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDcEIsR0FBRyxDQUFDLElBQUksQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO1lBQ2xFLE9BQU87U0FDVjtRQUVELElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ2xDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDOUIsR0FBRyxDQUFDLElBQUksQ0FBQyw0REFBNEQsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNqRixPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQztJQUVoQyxDQUFDO0NBRUo7QUEzQ0Qsb0NBMkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtMb2dnZXJ9IGZyb20gJy4uL2xvZ2dlci9Mb2dnZXInO1xuXG5jb25zdCBsb2cgPSBMb2dnZXIuY3JlYXRlKCk7XG5cbi8qKlxuICogS2VlcCBhbiBpbmRleCBvZiB0aGUgcmVxdWVzdHMgdGhhdCBhcmUgZXhlY3V0aW5nIHNvIHRoYXQgd2UgY2FuIGRldGVjdFxuICogcHJvYmxlbXMgd2l0aCBwZW5kaW5nIFVSTHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXF1ZXN0U3RhdGUge1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBtYXA6IHtbaWQ6IG51bWJlcl06IElSZXF1ZXN0RW50cnl9ID0ge307XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgbG9nLmluZm8oXCJUcmFja2luZyByZXF1ZXN0IHN0YXRlLi4uXCIpO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGZvciBkb3VibGUgc3RhcnRlZCBhbmQgZG91YmxlIGZpbmlzaGVkIHRvby4uXG5cbiAgICBwdWJsaWMgbWFya1N0YXJ0ZWQoaWQ6IG51bWJlciwgdXJsOiBzdHJpbmcsIGV2ZW50TmFtZTogc3RyaW5nKSB7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdEVudHJ5OiBJUmVxdWVzdEVudHJ5ID0ge2lkLCB1cmwsIHN0YXRlOiAnU1RBUlRFRCcsIGV2ZW50TmFtZX07XG5cbiAgICAgICAgaWYgKGlkIGluIHRoaXMubWFwKSB7XG4gICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IHRoaXMubWFwW2lkXTtcbiAgICAgICAgICAgIGxvZy53YXJuKGBSZXF1ZXN0IHdhcyBzdGFydGVkIGJ1dCBhbHJlYWR5IHByZXNlbnQgaW4gbWFwIGZvciBldmVudDogJHtleGlzdGluZy5ldmVudE5hbWV9YCwgZXhpc3RpbmcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYXBbaWRdID0gcmVxdWVzdEVudHJ5O1xuXG4gICAgfVxuXG4gICAgcHVibGljIG1hcmtGaW5pc2hlZChpZDogbnVtYmVyLCB1cmw6IHN0cmluZywgZXZlbnROYW1lOiBzdHJpbmcpIHtcblxuICAgICAgICBjb25zdCByZXF1ZXN0RW50cnk6IElSZXF1ZXN0RW50cnkgPSB7aWQsIHVybCwgc3RhdGU6ICdGSU5JU0hFRCcsIGV2ZW50TmFtZX07XG5cbiAgICAgICAgaWYgKCEgKGlkIGluIHRoaXMubWFwKSkge1xuICAgICAgICAgICAgbG9nLndhcm4oXCJSZXF1ZXN0IHdhcyBtYXJrZWQgZmluaXNoZWQgYnV0IG5ldmVyIG1hcmtlZCBzdGFydGVkLlwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm1hcFtpZF0uc3RhdGUgIT09ICdTVEFSVEVEJykge1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSB0aGlzLm1hcFtpZF07XG4gICAgICAgICAgICBsb2cud2FybihgUmVxdWVzdCB3YXMgbWFya2VkIGZpbmlzaGVkIGJ1dCBpcyBub3QgY3VycmVudGx5IHN0YXJ0ZWQ6IGAsIGV4aXN0aW5nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWFwW2lkXSA9IHJlcXVlc3RFbnRyeTtcblxuICAgIH1cblxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSByZXF1ZXN0IHN0b3JlZCBpbiB0aGUgYmFja2luZyBtYXAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVJlcXVlc3RFbnRyeSB7XG5cbiAgICByZWFkb25seSBpZDogbnVtYmVyO1xuICAgIHJlYWRvbmx5IHVybDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHN0YXRlOiAnU1RBUlRFRCcgfCAnRklOSVNIRUQnO1xuICAgIHJlYWRvbmx5IGV2ZW50TmFtZTogc3RyaW5nO1xuXG59XG4iXX0=