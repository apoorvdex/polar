"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../logger/Logger");
const BaseWebRequestsListener_1 = require("./BaseWebRequestsListener");
const log = Logger_1.Logger.create();
class DebugWebRequestsListener extends BaseWebRequestsListener_1.BaseWebRequestsListener {
    constructor() {
        super();
        this.pending = 0;
    }
    onWebRequestEvent(event) {
        const { name, details, callback } = event;
        if (name === "onCompleted" || name === "onErrorOccurred") {
            --this.pending;
        }
        log.info(`${name} (pending=${this.pending}): `, JSON.stringify(details, null, "  "));
        if (name === "onBeforeRequest") {
            ++this.pending;
        }
        if (callback) {
            callback({ cancel: false });
        }
    }
}
exports.DebugWebRequestsListener = DebugWebRequestsListener;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdXZWJSZXF1ZXN0c0xpc3RlbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRGVidWdXZWJSZXF1ZXN0c0xpc3RlbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsNkNBQXdDO0FBQ3hDLHVFQUFrRTtBQUVsRSxNQUFNLEdBQUcsR0FBRyxlQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFXNUIsTUFBYSx3QkFBeUIsU0FBUSxpREFBdUI7SUFTakU7UUFFSSxLQUFLLEVBQUUsQ0FBQztRQU5KLFlBQU8sR0FBRyxDQUFDLENBQUM7SUFRcEIsQ0FBQztJQU1NLGlCQUFpQixDQUFDLEtBQTRCO1FBRWpELE1BQU0sRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBQyxHQUFHLEtBQUssQ0FBQztRQUV4QyxJQUFJLElBQUksS0FBSyxhQUFhLElBQUksSUFBSSxLQUFLLGlCQUFpQixFQUFFO1lBR3RELEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUNsQjtRQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLGFBQWEsSUFBSSxDQUFDLE9BQU8sS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRXJGLElBQUksSUFBSSxLQUFLLGlCQUFpQixFQUFFO1lBRTVCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUNsQjtRQUVELElBQUksUUFBUSxFQUFFO1lBR1YsUUFBUSxDQUFDLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUM7U0FDN0I7SUFFTCxDQUFDO0NBRUo7QUE1Q0QsNERBNENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJTmFtZWRXZWJSZXF1ZXN0RXZlbnR9IGZyb20gJy4vV2ViUmVxdWVzdFJlYWN0b3InO1xuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJy4uL2xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0IHtCYXNlV2ViUmVxdWVzdHNMaXN0ZW5lcn0gZnJvbSAnLi9CYXNlV2ViUmVxdWVzdHNMaXN0ZW5lcic7XG5cbmNvbnN0IGxvZyA9IExvZ2dlci5jcmVhdGUoKTtcblxuLyoqXG4gKiBBIHNpbXBsZSBkZWJ1ZyB3ZWIgcmVxdWVzdHMgbGlzdGVuZXIgd2hpY2gganVzdCB0cmFjZXMgdGhlIG91dHB1dCBzbyB0aGF0IHdlXG4gKiBjYW4gYmV0dGVyIHVuZGVyc3RhbmQgdGhlIGV2ZW50IGZsb3cuXG4gKlxuICogTWFpbiBBUEkgZG9jdW1lbnRhdGlvbiBpcyBoZXJlOlxuICpcbiAqIGh0dHBzOi8vZWxlY3Ryb25qcy5vcmcvZG9jcy9hcGkvd2ViLXJlcXVlc3RcbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWJ1Z1dlYlJlcXVlc3RzTGlzdGVuZXIgZXh0ZW5kcyBCYXNlV2ViUmVxdWVzdHNMaXN0ZW5lciB7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIHBlbmRpbmcgcmVxdWVzdHNcbiAgICAgKi9cbiAgICBwcml2YXRlIHBlbmRpbmcgPSAwO1xuXG4gICAgLyoqXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG5cbiAgICAgICAgc3VwZXIoKTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHdlIHJlY2VpdmUgYW4gZXZlbnQuICBBbGwgdGhlIGV2ZW50cyBnaXZlIHVzIGEgJ2RldGFpbHMnXG4gICAgICogb2JqZWN0LlxuICAgICAqL1xuICAgIHB1YmxpYyBvbldlYlJlcXVlc3RFdmVudChldmVudDogSU5hbWVkV2ViUmVxdWVzdEV2ZW50KSB7XG5cbiAgICAgICAgY29uc3Qge25hbWUsIGRldGFpbHMsIGNhbGxiYWNrfSA9IGV2ZW50O1xuXG4gICAgICAgIGlmIChuYW1lID09PSBcIm9uQ29tcGxldGVkXCIgfHwgbmFtZSA9PT0gXCJvbkVycm9yT2NjdXJyZWRcIikge1xuICAgICAgICAgICAgLy8gdGhpcyByZXF1ZXN0IGhhcyBhbHJlYWR5IGNvbXBsZXRlZCBzbyBpcyBub3QgY29uc2lkZXJlZCBhZ2FpbnN0XG4gICAgICAgICAgICAvLyBwZW5kaW5nIGFueSBsb25nZXJcbiAgICAgICAgICAgIC0tdGhpcy5wZW5kaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgbG9nLmluZm8oYCR7bmFtZX0gKHBlbmRpbmc9JHt0aGlzLnBlbmRpbmd9KTogYCwgSlNPTi5zdHJpbmdpZnkoZGV0YWlscywgbnVsbCwgXCIgIFwiKSk7XG5cbiAgICAgICAgaWYgKG5hbWUgPT09IFwib25CZWZvcmVSZXF1ZXN0XCIpIHtcbiAgICAgICAgICAgIC8vIGFmdGVyIHRoaXMgcmVxdWVzdCB0aGUgcGVuZGluZyB3aWxsIGJlIGluY3JlbWVudGVkLlxuICAgICAgICAgICAgKyt0aGlzLnBlbmRpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vIHRoZSBjYWxsYmFjayBhbHdheXMgaGFzIHRvIGJlIHVzZWQgb3IgdGhlIHJlcXVlc3RzIHdpbGwgYmVcbiAgICAgICAgICAgIC8vIGNhbmNlbGxlZC5cbiAgICAgICAgICAgIGNhbGxiYWNrKHtjYW5jZWw6IGZhbHNlfSk7XG4gICAgICAgIH1cblxuICAgIH1cblxufVxuIl19