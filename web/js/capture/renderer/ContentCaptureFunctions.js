"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function configureBrowser(windowDimensions) {
    const ENABLE_VH_HANDLING = true;
    const VH_HANDLING_REQUIRE_CHILDREN = false;
    const VH_HANDLING_STRATEGY = 'auto';
    function defineProperty(target, key, value) {
        console.log(`Defining ${key} as: ${value} on: `, target);
        try {
            Object.defineProperty(target, key, {
                get: () => {
                    return value;
                }
            });
        }
        catch (e) {
            console.warn(`Unable to define ${key}`, e);
        }
    }
    function configureBrowserWindowSize(windowDimensions) {
        console.log("Configuring browser window size...");
        const definitions = [
            { key: "width", value: windowDimensions.width },
            { key: "availWidth", value: windowDimensions.width },
            { key: "height", value: windowDimensions.height },
            { key: "availHeight", value: windowDimensions.height }
        ];
        for (const definition of definitions) {
            defineProperty(window.screen, definition.key, definition.value);
        }
        defineProperty(window, 'outerWidth', windowDimensions.width);
        defineProperty(window, 'outerHeight', windowDimensions.height);
    }
    function writeStyles(id, cssText) {
        const styleElement = document.createElement('style');
        styleElement.type = 'text/css';
        styleElement.id = id;
        styleElement.innerHTML = cssText;
        document.getElementsByTagName('head')[0].appendChild(styleElement);
    }
    function defineMaxHeightStylesheet(rule) {
        const cssText = `
        ${rule} {
            max-height: 400px;        
        }
        `;
        writeStyles('polar-vh-max-height', cssText);
    }
    function isVHProp(name, value) {
        const regex = /^[0-9]+VH$/gi;
        const val = value || "";
        return val.match(regex) !== null;
    }
    function isVHRule(rule) {
        const height = rule.style.height || "";
        const minHeight = rule.style.minHeight || "";
        return isVHProp('height', height) || isVHProp('min-height', minHeight);
    }
    function defineAutoStylesheetForVH(rule) {
        function defineStyle(cssPropertyValue, cssPropertyName) {
            if (isVHProp(cssPropertyName, cssPropertyValue)) {
                console.log(`Defining CSS auto style for: ${cssPropertyName}`);
                const cssText = `
                ${rule.selectorText} {
                    ${cssPropertyName}: auto !important;        
                }
                `;
                writeStyles(`polar-vh-auto-${cssPropertyName}`, cssText);
            }
        }
        defineStyle(rule.style.minHeight, 'min-height');
        defineStyle(rule.style.height, 'height');
    }
    function configureWhiteBackground() {
        const cssText = `
        html, body {
            background-color: #FFF;        
        }
        `;
        writeStyles('polar-white-background', cssText);
        console.log("Configured white background");
    }
    function configureMaxVerticalHeight() {
        if (!ENABLE_VH_HANDLING) {
            console.log("VH truncation disabled");
            return;
        }
        console.log("Configuring max vertical height...");
        for (const stylesheet of Array.from(document.styleSheets)) {
            const rules = stylesheet.rules;
            for (const rule of rules) {
                if (rule.style && isVHRule(rule)) {
                    console.log(`Found VH rule to override (follows): ${rule.selectorText}`);
                    const matchingElements = document.querySelectorAll(rule.selectorText);
                    let elementsQualify = true;
                    if (VH_HANDLING_REQUIRE_CHILDREN) {
                        for (const matchingElement of Array.from(matchingElements)) {
                            if (matchingElement.childNodes.length > 0) {
                                console.log("Selector does not quality for as it has child nodes");
                                elementsQualify = false;
                                break;
                            }
                        }
                    }
                    if (elementsQualify) {
                        console.log("Handling VH with strategy: " + VH_HANDLING_STRATEGY);
                        if (VH_HANDLING_STRATEGY === 'max-height') {
                            defineMaxHeightStylesheet(rule.selectorText);
                        }
                        else {
                            defineAutoStylesheetForVH(rule);
                        }
                    }
                }
            }
        }
    }
    function configureSelectionCSS() {
        const cssText = `
            ::selection {
                background-color: rgb(180, 216, 252) !important;
                color: #111111 !important;
            }
        `;
        writeStyles(`polar-css-selection`, cssText);
    }
    try {
        configureBrowserWindowSize(windowDimensions);
        configureMaxVerticalHeight();
        configureSelectionCSS();
    }
    catch (e) {
        console.error("Failed to execute script: ", e);
    }
}
exports.configureBrowser = configureBrowser;
//# sourceMappingURL=data:application/json;base64,