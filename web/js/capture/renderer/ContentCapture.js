"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Results_1 = require("../../util/Results");
const AdBlocker_1 = require("./AdBlocker");
class ContentCapture {
    static execute() {
        return Results_1.Results.execute(() => ContentCapture.captureHTML());
    }
    static captureHTML(contentDoc, url, result) {
        const ENABLE_IFRAMES = true;
        if (!contentDoc) {
            contentDoc = document;
        }
        if (!url) {
            url = contentDoc.location.href;
        }
        if (!result) {
            const scrollBox = this.computeScrollBox(contentDoc);
            result = {
                capturedDocuments: {},
                type: "phz",
                version: "4.0.0",
                title: contentDoc.title,
                url: contentDoc.location.href,
                scroll: scrollBox,
                scrollBox
            };
        }
        if (url in result.capturedDocuments) {
            console.warn("Skipping URL.  Already indexed: " + url);
            return result;
        }
        this.inlineStyles(contentDoc);
        const cloneDoc = contentDoc.cloneNode(true);
        result.capturedDocuments[url]
            = ContentCapture.captureDoc(cloneDoc, contentDoc.location.href);
        if (ENABLE_IFRAMES) {
            console.log("Exporting iframes...");
            const iframes = contentDoc.querySelectorAll("iframe");
            console.log("Found N iframes: " + iframes.length);
            let nrHandled = 0;
            let nrSkipped = 0;
            for (const iframe of Array.from(iframes)) {
                const frameValidity = ContentCapture.computeFrameValidity(iframe);
                if (frameValidity.valid && iframe.contentDocument) {
                    const iframeHref = iframe.contentDocument.location.href;
                    console.log("Going to capture iframe: " + iframeHref);
                    console.log(iframe.outerHTML);
                    ContentCapture.captureHTML(iframe.contentDocument, iframeHref, result);
                    ++nrHandled;
                }
                else {
                    console.log(`Skipping iframe: (${frameValidity})` + iframe.outerHTML);
                    ++nrSkipped;
                }
            }
            console.log(`Handled ${nrHandled} and skipped ${nrSkipped} iframes`);
        }
        return result;
    }
    static computeFrameValidity(iframe) {
        const result = {
            reason: null,
            valid: true
        };
        if (!iframe.contentDocument) {
            return { reason: "NO_CONTENT_DOCUMENT", valid: false };
        }
        if (iframe.style.display === "none") {
            return { reason: "DISPLAY_NONE", valid: false };
        }
        return result;
    }
    static captureDoc(cloneDoc, url) {
        if (!cloneDoc) {
            throw new Error("No cloneDoc");
        }
        const scrollBox = this.computeScrollBox(cloneDoc);
        const docTypeFormat = this.docTypeFormat(cloneDoc);
        const result = {
            title: cloneDoc.title,
            href: url,
            url,
            scrollHeight: scrollBox.height,
            scrollBox,
            content: "",
            contentTextLength: 0,
            docTypeFormat,
            contentType: cloneDoc.contentType,
            mutations: {
                eventAttributesRemoved: 0,
                existingBaseRemoved: false,
                baseAdded: false,
                javascriptAnchorsRemoved: 0,
                cleanupRemoveScripts: null,
                cleanupHead: null,
                cleanupBase: null,
                showAriaHidden: 0,
            }
        };
        console.log("Doc type format is: " + docTypeFormat);
        if (docTypeFormat === 'html') {
            result.mutations.cleanupRemoveScripts = ContentCapture.cleanupRemoveScripts(cloneDoc, url);
            result.mutations.cleanupHead = ContentCapture.cleanupHead(cloneDoc, url);
            result.mutations.cleanupBase = ContentCapture.cleanupBase(cloneDoc, url);
            result.mutations.adsBlocked = AdBlocker_1.AdBlocker.cleanse(cloneDoc, url);
            document.head.appendChild(ContentCapture.createMeta("polar-url", result.url));
            const EVENT_ATTRIBUTES = ContentCapture.createEventAttributes();
            cloneDoc.querySelectorAll("*").forEach((element) => {
                Array.from(element.attributes).forEach((attr) => {
                    if (EVENT_ATTRIBUTES[attr.name]) {
                        element.removeAttribute(attr.name);
                        ++result.mutations.eventAttributesRemoved;
                    }
                });
            });
            cloneDoc.querySelectorAll("a").forEach((element) => {
                const href = element.getAttribute("href");
                if (href && href.indexOf("javascript:") === 0) {
                    element.removeAttribute("href");
                    ++result.mutations.javascriptAnchorsRemoved;
                }
            });
            result.mutations.showAriaHidden = ContentCapture.cleanupShowAriaHidden(cloneDoc);
        }
        result.content = ContentCapture.toOuterHTML(cloneDoc, docTypeFormat);
        result.contentTextLength = result.content.length;
        console.log(`Captured ${url} which has a text length of: ${result.content.length}`);
        return result;
    }
    static docTypeFormat(doc) {
        if (doc.doctype === null || doc.doctype === undefined) {
            return 'html';
        }
        if (doc.doctype.name === null || doc.doctype.name === undefined) {
            return 'html';
        }
        return doc.doctype.name.toLowerCase() === 'html' ? 'html' : 'xml';
    }
    static computeScrollBox(doc) {
        const computedStyle = getComputedStyle(doc.documentElement);
        return {
            width: doc.documentElement.scrollWidth,
            widthOverflow: computedStyle.overflowX || 'visible',
            height: doc.documentElement.scrollHeight,
            heightOverflow: computedStyle.overflowY || 'visible',
        };
    }
    static cleanupBase(cloneDoc, url) {
        const result = {
            existingBaseRemoved: false,
            baseAdded: false
        };
        let base = cloneDoc.querySelector("base");
        if (base && base.parentElement) {
            base.parentElement.removeChild(base);
            result.existingBaseRemoved = true;
        }
        base = cloneDoc.createElement("base");
        base.setAttribute("href", url);
        if (cloneDoc.head.firstChild != null) {
            cloneDoc.head.insertBefore(base, cloneDoc.head.firstChild);
        }
        else {
            cloneDoc.head.appendChild(base);
        }
        result.baseAdded = true;
        return result;
    }
    static cleanupHead(cloneDoc, url) {
        const result = {
            headAdded: false
        };
        if (!cloneDoc.head) {
            cloneDoc.insertBefore(cloneDoc.createElement("head"), cloneDoc.firstElementChild);
            result.headAdded = true;
        }
        return result;
    }
    static inlineStyles(doc) {
        const result = {
            inlined: 0
        };
        function toSerializedStylesheet(styleSheet) {
            let buff = "";
            const imports = [];
            for (const rule of Array.from(styleSheet.rules)) {
                buff += rule.cssText;
            }
            return buff;
        }
        for (const styleSheet of Array.from(doc.styleSheets)) {
            if (styleSheet.ownerNode instanceof HTMLElement) {
                if (styleSheet.ownerNode.tagName === 'STYLE') {
                    styleSheet.ownerNode.innerText = toSerializedStylesheet(styleSheet);
                    ++result.inlined;
                }
            }
        }
        return result;
    }
    static cleanupRemoveScripts(cloneDoc, url) {
        const result = {
            scriptsRemoved: 0
        };
        cloneDoc.querySelectorAll("script").forEach((scriptElement) => {
            if (scriptElement.parentElement) {
                scriptElement.parentElement.removeChild(scriptElement);
                ++result.scriptsRemoved;
            }
        });
        if (cloneDoc.querySelectorAll("script").length !== 0) {
            throw new Error("Unable to remove scripts");
        }
        return result;
    }
    static cleanupShowAriaHidden(cloneDoc) {
        let mutations = 0;
        cloneDoc.querySelectorAll("*").forEach((element) => {
            if (element.getAttribute("aria-hidden") === "true") {
                element.setAttribute("aria-hidden", "false");
                ++mutations;
            }
        });
        return mutations;
    }
    static cleanupFullStylesheetURLs(cloneDoc) {
        let mutations = 0;
        cloneDoc.querySelectorAll("a").forEach((element) => {
            const href = element.getAttribute("href");
            if (href) {
                element.setAttribute("aria-hidden", "false");
                ++mutations;
            }
        });
        return mutations;
    }
    static doctypeToOuterHTML(doctype) {
        return "<!DOCTYPE "
            + doctype.name
            + (doctype.publicId ? ' PUBLIC "' + doctype.publicId + '"' : '')
            + (!doctype.publicId && doctype.systemId ? ' SYSTEM' : '')
            + (doctype.systemId ? ' "' + doctype.systemId + '"' : '')
            + '>';
    }
    static processingInstructionToOuterHTML(processingInstruction) {
        return `<?${processingInstruction.target} ${processingInstruction.data} ?>`;
    }
    static createMeta(name, content) {
        const meta = document.createElement("meta");
        meta.setAttribute("name", name);
        meta.setAttribute("content", content);
        return meta;
    }
    static toOuterHTML(doc, docTypeFormat) {
        if (docTypeFormat === 'xml') {
            let result = '';
            for (const node of Array.from(doc.childNodes)) {
                switch (node.nodeType) {
                    case Node.DOCUMENT_TYPE_NODE:
                        result += this.doctypeToOuterHTML(node);
                        result += '\n';
                        break;
                    case Node.PROCESSING_INSTRUCTION_NODE:
                        result += this.processingInstructionToOuterHTML(node);
                        result += '\n';
                        break;
                    case Node.ELEMENT_NODE:
                        result += node.outerHTML;
                        result += '\n';
                        break;
                }
            }
            return result;
        }
        else {
            if (doc.doctype) {
                return ContentCapture.doctypeToOuterHTML(doc.doctype) +
                    "\n" +
                    doc.documentElement.outerHTML;
            }
            else {
                return doc.documentElement.outerHTML;
            }
        }
    }
    static createEventAttributes() {
        return Object.freeze({
            "onafterprint": 1,
            "onbeforeprint": 1,
            "onbeforeunload": 1,
            "onerror": 1,
            "onhashchange": 1,
            "onload": 1,
            "onmessage": 1,
            "onoffline": 1,
            "ononline": 1,
            "onpagehide": 1,
            "onpageshow": 1,
            "onpopstate": 1,
            "onresize": 1,
            "onstorage": 1,
            "onunload": 1,
            "onblur": 1,
            "onchange": 1,
            "oncontextmenu": 1,
            "onfocus": 1,
            "oninput": 1,
            "oninvalid": 1,
            "onreset": 1,
            "onsearch": 1,
            "onselect": 1,
            "onsubmit": 1,
            "onkeydown": 1,
            "onkeypress": 1,
            "onkeyup": 1,
            "ondblclick": 1,
            "onmousedown": 1,
            "onmousemove": 1,
            "onmouseout": 1,
            "onmouseover": 1,
            "onmouseup": 1,
            "onmousewheel": 1,
            "onwheel": 1,
            "ondrag": 1,
            "ondragend": 1,
            "ondragenter": 1,
            "ondragleave": 1,
            "ondragover": 1,
            "ondragstart": 1,
            "ondrop": 1,
            "onscroll": 1,
            "oncopy": 1,
            "oncut": 1,
            "onpaste": 1,
            "onabort": 1,
            "oncanplay": 1,
            "oncanplaythrough": 1,
            "oncuechange": 1,
            "ondurationchange": 1,
            "onemptied": 1,
            "onended": 1,
            "onloadeddata": 1,
            "onloadedmetadata": 1,
            "onloadstart": 1,
            "onpause": 1,
            "onplay": 1,
            "onplaying": 1,
            "onprogress": 1,
            "onratechange": 1,
            "onseeked": 1,
            "onseeking": 1,
            "onstalled": 1,
            "onsuspend": 1,
            "ontimeupdate": 1,
            "onvolumechange": 1,
            "onwaiting": 1,
            "onshow": 1,
            "ontoggle": 1
        });
    }
}
exports.ContentCapture = ContentCapture;
console.log("Content capture script loaded within: " + window.location.href);
process.once('loaded', () => {
    console.log("Re-defining ContentCapture");
    global.ContentCapture = ContentCapture;
});
//# sourceMappingURL=data:application/json;base64,