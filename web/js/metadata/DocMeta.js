"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const DocInfo_1 = require("./DocInfo");
const SerializedObject_1 = require("./SerializedObject");
const Preconditions_1 = require("../Preconditions");
const AnnotationInfos_1 = require("./AnnotationInfos");
class DocMeta extends SerializedObject_1.SerializedObject {
    constructor(docInfo, pageMetas) {
        super();
        this.annotationInfo = AnnotationInfos_1.AnnotationInfos.create();
        this.version = 2;
        this.attachments = {};
        this.docInfo = docInfo;
        this.pageMetas = pageMetas;
    }
    getPageMeta(num) {
        num = Preconditions_1.Preconditions.assertNotNull(num, "num");
        const pageMeta = this.pageMetas[num];
        if (!pageMeta) {
            throw new Error("No pageMeta for page: " + num);
        }
        return pageMeta;
    }
    validate() {
        Preconditions_1.Preconditions.assertInstanceOf(this.docInfo, DocInfo_1.DocInfo, "docInfo");
        Preconditions_1.Preconditions.assertNotNull(this.pageMetas, "pageMetas");
        Preconditions_1.Preconditions.assertNumber(this.version, "version");
    }
}
exports.DocMeta = DocMeta;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9jTWV0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkRvY01ldGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1Q0FBa0M7QUFFbEMseURBQW9EO0FBQ3BELG9EQUErQztBQUMvQyx1REFBa0Q7QUFTbEQsTUFBYSxPQUFRLFNBQVEsbUNBQWdCO0lBdUJ6QyxZQUFZLE9BQWdCLEVBQUUsU0FBbUM7UUFDN0QsS0FBSyxFQUFFLENBQUM7UUFwQkwsbUJBQWMsR0FBRyxpQ0FBZSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzFDLFlBQU8sR0FBRyxDQUFDLENBQUM7UUFFWixnQkFBVyxHQUErQixFQUFFLENBQUM7UUFrQmhELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQy9CLENBQUM7SUFFTSxXQUFXLENBQUMsR0FBVztRQUUxQixHQUFHLEdBQUcsNkJBQWEsQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRTlDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFckMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDbkQ7UUFFRCxPQUFPLFFBQVEsQ0FBQztJQUVwQixDQUFDO0lBRU0sUUFBUTtRQUNYLDZCQUFhLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxpQkFBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2pFLDZCQUFhLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDekQsNkJBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN4RCxDQUFDO0NBRUo7QUFqREQsMEJBaURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEb2NJbmZvfSBmcm9tICcuL0RvY0luZm8nO1xuaW1wb3J0IHtQYWdlTWV0YX0gZnJvbSAnLi9QYWdlTWV0YSc7XG5pbXBvcnQge1NlcmlhbGl6ZWRPYmplY3R9IGZyb20gJy4vU2VyaWFsaXplZE9iamVjdCc7XG5pbXBvcnQge1ByZWNvbmRpdGlvbnN9IGZyb20gJy4uL1ByZWNvbmRpdGlvbnMnO1xuaW1wb3J0IHtBbm5vdGF0aW9uSW5mb3N9IGZyb20gJy4vQW5ub3RhdGlvbkluZm9zJztcbmltcG9ydCB7QW5ub3RhdGlvbkluZm99IGZyb20gJy4vQW5ub3RhdGlvbkluZm8nO1xuaW1wb3J0IHtBdHRhY2htZW50fSBmcm9tICcuL0F0dGFjaG1lbnQnO1xuXG5cbi8qKlxuICogUm9vdCBtZXRhZGF0YSBmb3IgYSBkb2N1bWVudCBpbmNsdWRpbmcgcGFnZSBtZXRhZGF0YSwgYW5kIG1ldGFkYXRhIGZvclxuICogdGhlIHNwZWNpZmljIGRvY3VtZW50LlxuICovXG5leHBvcnQgY2xhc3MgRG9jTWV0YSBleHRlbmRzIFNlcmlhbGl6ZWRPYmplY3QgaW1wbGVtZW50cyAgSURvY01ldGEge1xuXG4gICAgcHVibGljIGRvY0luZm86IERvY0luZm87XG4gICAgcHVibGljIHBhZ2VNZXRhczoge1tpZDogbnVtYmVyXTogUGFnZU1ldGF9O1xuICAgIHB1YmxpYyBhbm5vdGF0aW9uSW5mbyA9IEFubm90YXRpb25JbmZvcy5jcmVhdGUoKTtcbiAgICBwdWJsaWMgdmVyc2lvbiA9IDI7XG5cbiAgICBwdWJsaWMgYXR0YWNobWVudHM6IHtbaWQ6IHN0cmluZ106IEF0dGFjaG1lbnR9ID0ge307XG5cbiAgICAvLyBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZT86IERvY01ldGEpIHtcbiAgICAvL1xuICAgIC8vICAgICBzdXBlcih0ZW1wbGF0ZSk7XG4gICAgLy9cbiAgICAvLyAgICAgaWYodGVtcGxhdGUpIHtcbiAgICAvLyAgICAgICAgIHRoaXMuZG9jSW5mbyA9IFByZWNvbmRpdGlvbnMuYXNzZXJ0Tm90TnVsbCh0ZW1wbGF0ZS5kb2NJbmZvLCBcImRvY0luZm9cIik7XG4gICAgLy8gICAgIH0gZWxzZSB7XG4gICAgLy8gICAgICAgICB0aGlzLmRvY0luZm8gPSBudWxsO1xuICAgIC8vICAgICB9XG4gICAgLy9cbiAgICAvLyAgICAgdGhpcy5pbml0KHRlbXBsYXRlKTtcbiAgICAvL1xuICAgIC8vIH1cblxuICAgIGNvbnN0cnVjdG9yKGRvY0luZm86IERvY0luZm8sIHBhZ2VNZXRhczoge1tpZDogbnVtYmVyXTogUGFnZU1ldGF9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZG9jSW5mbyA9IGRvY0luZm87XG4gICAgICAgIHRoaXMucGFnZU1ldGFzID0gcGFnZU1ldGFzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRQYWdlTWV0YShudW06IG51bWJlcikge1xuXG4gICAgICAgIG51bSA9IFByZWNvbmRpdGlvbnMuYXNzZXJ0Tm90TnVsbChudW0sIFwibnVtXCIpO1xuXG4gICAgICAgIGNvbnN0IHBhZ2VNZXRhID0gdGhpcy5wYWdlTWV0YXNbbnVtXTtcblxuICAgICAgICBpZiAoIXBhZ2VNZXRhKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBwYWdlTWV0YSBmb3IgcGFnZTogXCIgKyBudW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhZ2VNZXRhO1xuXG4gICAgfVxuXG4gICAgcHVibGljIHZhbGlkYXRlKCkge1xuICAgICAgICBQcmVjb25kaXRpb25zLmFzc2VydEluc3RhbmNlT2YodGhpcy5kb2NJbmZvLCBEb2NJbmZvLCBcImRvY0luZm9cIik7XG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0Tm90TnVsbCh0aGlzLnBhZ2VNZXRhcywgXCJwYWdlTWV0YXNcIik7XG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0TnVtYmVyKHRoaXMudmVyc2lvbiwgXCJ2ZXJzaW9uXCIpO1xuICAgIH1cblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEb2NNZXRhIHtcblxuICAgIC8qKlxuICAgICAqIFRoZSBEb2NJbmZvIHdoaWNoIGluY2x1ZGVzIGluZm9ybWF0aW9uIGxpa2UgdGl0bGUsIG5yUGFnZXMsIGV0Yy5cbiAgICAgKi9cbiAgICBkb2NJbmZvOiBEb2NJbmZvO1xuXG5cbiAgICAvKipcbiAgICAgKiBBIHNwYXJzZSBkaWN0aW9uYXJ5IG9mIHBhZ2UgbnVtYmVyIHRvIHBhZ2UgbWV0YWRhdGEuXG4gICAgICpcbiAgICAgKi9cbiAgICBwYWdlTWV0YXM6IHtbaWQ6IG51bWJlcl06IFBhZ2VNZXRhfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbm5vdGF0aW9uIGluZm8gZm9yIHRoaXMgZG9jdW1lbnQgaW5jbHVkaW5nIHRoZSBsYXN0IGFubm90YXRpb25cbiAgICAgKiB0aW1lLCBwcm9ncmVzcywgZXRjLlxuICAgICAqL1xuICAgIGFubm90YXRpb25JbmZvOiBBbm5vdGF0aW9uSW5mbztcblxuICAgIC8qKlxuICAgICAqIFRoZSB2ZXJzaW9uIG9mIHRoaXMgRG9jTWV0YSB2ZXJzaW9uLlxuICAgICAqL1xuICAgIHZlcnNpb246IG51bWJlcjtcblxufVxuIl19