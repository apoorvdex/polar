"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Strings_1 = require("../util/Strings");
const TimeDurations_1 = require("../util/TimeDurations");
class ISODateTimeStrings {
    static create(value) {
        let date;
        if (value !== undefined) {
            if (value instanceof Date) {
                date = value;
            }
            if (typeof value === 'number') {
                date = new Date(value);
            }
        }
        if (!date) {
            date = new Date();
        }
        return date.toISOString();
    }
    static adjust(datetime, durationStr) {
        const date = this.parse(datetime);
        const unixtimeMs = date.valueOf() - TimeDurations_1.TimeDurations.toMillis(durationStr);
        return this.create(new Date(unixtimeMs));
    }
    static toISODateString(date) {
        if (!date) {
            return undefined;
        }
        const ordYear = date.getUTCFullYear();
        const ordMonth = date.getUTCMonth() + 1;
        const ordDay = date.getUTCDate();
        if (!ordYear || !ordMonth || !ordDay) {
            return undefined;
        }
        const year = Strings_1.Strings.lpad(ordYear, '0', 4);
        const month = Strings_1.Strings.lpad(ordMonth, '0', 2);
        const day = Strings_1.Strings.lpad(ordDay, '0', 2);
        return `${year}-${month}-${day}`;
    }
    static parse(value) {
        return new Date(Date.parse(value));
    }
    static toUnixTimeMS(value) {
        return Date.parse(value);
    }
    static toISODate(input) {
        return input.substring(0, '0000-00-00'.length);
    }
    static toISOYear(input) {
        return input.substring(0, '0000'.length);
    }
}
exports.ISODateTimeStrings = ISODateTimeStrings;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSVNPRGF0ZVRpbWVTdHJpbmdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiSVNPRGF0ZVRpbWVTdHJpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXdDO0FBQ3hDLHlEQUFpRTtBQWNqRSxNQUFhLGtCQUFrQjtJQUVwQixNQUFNLENBQUMsTUFBTSxDQUFDLEtBQXFCO1FBRXRDLElBQUksSUFBc0IsQ0FBQztRQUUzQixJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFFckIsSUFBSSxLQUFLLFlBQVksSUFBSSxFQUFFO2dCQUN2QixJQUFJLEdBQUcsS0FBSyxDQUFDO2FBQ2hCO1lBRUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7Z0JBQzNCLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMxQjtTQUVKO1FBRUQsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNQLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1NBQ3JCO1FBRUQsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBMkIsRUFBRSxXQUF3QjtRQUV0RSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRWxDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyw2QkFBYSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUV4RSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUU3QyxDQUFDO0lBRU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFVO1FBRXBDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDUCxPQUFPLFNBQVMsQ0FBQztTQUNwQjtRQUVELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUVqQyxJQUFJLENBQUUsT0FBTyxJQUFJLENBQUUsUUFBUSxJQUFJLENBQUUsTUFBTSxFQUFFO1lBQ3JDLE9BQU8sU0FBUyxDQUFDO1NBQ3BCO1FBRUQsTUFBTSxJQUFJLEdBQUcsaUJBQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzQyxNQUFNLEtBQUssR0FBRyxpQkFBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sR0FBRyxHQUFHLGlCQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFekMsT0FBTyxHQUFHLElBQUksSUFBSSxLQUFLLElBQUksR0FBRyxFQUFFLENBQUM7SUFFckMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBYTtRQUM3QixPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFhO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRU0sTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUF3QjtRQUM1QyxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRU0sTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUF3QjtRQUM1QyxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QyxDQUFDO0NBRUo7QUF6RUQsZ0RBeUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdHJpbmdzfSBmcm9tICcuLi91dGlsL1N0cmluZ3MnO1xuaW1wb3J0IHtEdXJhdGlvblN0ciwgVGltZUR1cmF0aW9uc30gZnJvbSAnLi4vdXRpbC9UaW1lRHVyYXRpb25zJztcblxuZXhwb3J0IHR5cGUgSVNPRGF0ZVRpbWVTdHJpbmcgPSBzdHJpbmc7XG5cbi8qKlxuICogQW4gSVNPIERhdGUgc3RyaW5nIHdpdGhvdXQgYSB0aW1lLlxuICovXG5leHBvcnQgdHlwZSBJU09EYXRlU3RyaW5nID0gc3RyaW5nO1xuXG4vKipcbiAqIFRpbWUgcmVwcmVzZW50ZWQgYXMgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgSmFuIDEsIDE5NzAuXG4gKi9cbmV4cG9ydCB0eXBlIFVuaXhUaW1lTVMgPSBudW1iZXI7XG5cbmV4cG9ydCBjbGFzcyBJU09EYXRlVGltZVN0cmluZ3Mge1xuXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUodmFsdWU/OiBEYXRlIHwgbnVtYmVyKTogSVNPRGF0ZVRpbWVTdHJpbmcge1xuXG4gICAgICAgIGxldCBkYXRlOiBEYXRlIHwgdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICBkYXRlID0gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkYXRlKSB7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBhZGp1c3QoZGF0ZXRpbWU6IElTT0RhdGVUaW1lU3RyaW5nLCBkdXJhdGlvblN0cjogRHVyYXRpb25TdHIpIHtcblxuICAgICAgICBjb25zdCBkYXRlID0gdGhpcy5wYXJzZShkYXRldGltZSk7XG5cbiAgICAgICAgY29uc3QgdW5peHRpbWVNcyA9IGRhdGUudmFsdWVPZigpIC0gVGltZUR1cmF0aW9ucy50b01pbGxpcyhkdXJhdGlvblN0cik7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKG5ldyBEYXRlKHVuaXh0aW1lTXMpKTtcblxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgdG9JU09EYXRlU3RyaW5nKGRhdGU6IERhdGUpOiBJU09EYXRlU3RyaW5nIHwgdW5kZWZpbmVkIHtcblxuICAgICAgICBpZiAoIWRhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvcmRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICBjb25zdCBvcmRNb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKSArIDE7XG4gICAgICAgIGNvbnN0IG9yZERheSA9IGRhdGUuZ2V0VVRDRGF0ZSgpO1xuXG4gICAgICAgIGlmICghIG9yZFllYXIgfHwgISBvcmRNb250aCB8fCAhIG9yZERheSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHllYXIgPSBTdHJpbmdzLmxwYWQob3JkWWVhciwgJzAnLCA0KTtcbiAgICAgICAgY29uc3QgbW9udGggPSBTdHJpbmdzLmxwYWQob3JkTW9udGgsICcwJywgMik7XG4gICAgICAgIGNvbnN0IGRheSA9IFN0cmluZ3MubHBhZChvcmREYXksICcwJywgMik7XG5cbiAgICAgICAgcmV0dXJuIGAke3llYXJ9LSR7bW9udGh9LSR7ZGF5fWA7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHBhcnNlKHZhbHVlOiBzdHJpbmcpOiBEYXRlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKERhdGUucGFyc2UodmFsdWUpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHRvVW5peFRpbWVNUyh2YWx1ZTogc3RyaW5nKTogVW5peFRpbWVNUyB7XG4gICAgICAgIHJldHVybiBEYXRlLnBhcnNlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHRvSVNPRGF0ZShpbnB1dDogSVNPRGF0ZVRpbWVTdHJpbmcpOiBJU09EYXRlU3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnN1YnN0cmluZygwLCAnMDAwMC0wMC0wMCcubGVuZ3RoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHRvSVNPWWVhcihpbnB1dDogSVNPRGF0ZVRpbWVTdHJpbmcpOiBJU09EYXRlU3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnN1YnN0cmluZygwLCAnMDAwMCcubGVuZ3RoKTtcbiAgICB9XG5cbn1cblxuIl19