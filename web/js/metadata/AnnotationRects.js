"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../logger/Logger");
const Preconditions_1 = require("../Preconditions");
const Rect_1 = require("../Rect");
const AnnotationRect_1 = require("./AnnotationRect");
const Rects_1 = require("../Rects");
const log = Logger_1.Logger.create();
class AnnotationRects {
    static createFromEvent(contextMenuLocation) {
        let points = contextMenuLocation.points;
        let elements = document.elementsFromPoint(points.client.x, points.client.y);
        elements = elements.filter(element => element.matches(".page"));
        if (elements.length === 1) {
            let pageElement = elements[0];
            log.info("Creating box on pageElement: ", pageElement);
            let pageElementPoint = points.pageOffset;
            let boxRect = Rects_1.Rects.createFromBasicRect({
                left: pageElementPoint.x,
                top: pageElementPoint.y,
                width: 150,
                height: 150
            });
            log.info("Placing box at: ", boxRect);
            let containerRect = Rects_1.Rects.createFromBasicRect({
                left: 0,
                top: 0,
                width: pageElement.offsetWidth,
                height: pageElement.offsetHeight
            });
            return AnnotationRects.createFromPositionedRect(boxRect, containerRect);
        }
        throw new Error("Wrong number of .page elements: " + elements.length);
    }
    static createFromPositionedRect(boxRect, containerRect) {
        Preconditions_1.Preconditions.assertInstanceOf(boxRect, Rect_1.Rect, "boxRect");
        let xAxis = boxRect.toLine("x").multiply(100 / containerRect.width);
        let yAxis = boxRect.toLine("y").multiply(100 / containerRect.height);
        return AnnotationRects.createFromLines(xAxis, yAxis);
    }
    static createFromLines(xAxis, yAxis) {
        return AnnotationRects.createFromRect(Rects_1.Rects.createFromLines(xAxis, yAxis));
    }
    static createFromRect(rect) {
        return new AnnotationRect_1.AnnotationRect({
            left: rect.left,
            top: rect.top,
            width: rect.width,
            height: rect.height
        });
    }
}
exports.AnnotationRects = AnnotationRects;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQW5ub3RhdGlvblJlY3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQW5ub3RhdGlvblJlY3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsNkNBQXdDO0FBQ3hDLG9EQUErQztBQUMvQyxrQ0FBNkI7QUFDN0IscURBQWdEO0FBRWhELG9DQUErQjtBQUMvQixNQUFNLEdBQUcsR0FBRyxlQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFNUIsTUFBYSxlQUFlO0lBTXhCLE1BQU0sQ0FBQyxlQUFlLENBQUMsbUJBQXdDO1FBRTNELElBQUksTUFBTSxHQUFHLG1CQUFtQixDQUFDLE1BQU0sQ0FBQztRQUV4QyxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU1RSxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUVoRSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBRXZCLElBQUksV0FBVyxHQUFnQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFM0MsR0FBRyxDQUFDLElBQUksQ0FBQywrQkFBK0IsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUd2RCxJQUFJLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7WUFFekMsSUFBSSxPQUFPLEdBQUcsYUFBSyxDQUFDLG1CQUFtQixDQUFDO2dCQUNwQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztnQkFDeEIsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3ZCLEtBQUssRUFBRSxHQUFHO2dCQUNWLE1BQU0sRUFBRSxHQUFHO2FBQ2QsQ0FBQyxDQUFDO1lBRUgsR0FBRyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUl0QyxJQUFJLGFBQWEsR0FBRyxhQUFLLENBQUMsbUJBQW1CLENBQUM7Z0JBQzFDLElBQUksRUFBRSxDQUFDO2dCQUNQLEdBQUcsRUFBRSxDQUFDO2dCQUNOLEtBQUssRUFBRSxXQUFXLENBQUMsV0FBVztnQkFDOUIsTUFBTSxFQUFFLFdBQVcsQ0FBQyxZQUFZO2FBQ25DLENBQUMsQ0FBQztZQUVILE9BQU8sZUFBZSxDQUFDLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztTQUUzRTtRQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTFFLENBQUM7SUFXRCxNQUFNLENBQUMsd0JBQXdCLENBQUMsT0FBYSxFQUFFLGFBQW1CO1FBRTlELDZCQUFhLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFdBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUV6RCxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BFLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFckUsT0FBTyxlQUFlLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUV6RCxDQUFDO0lBUUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFXLEVBQUUsS0FBVztRQUMzQyxPQUFPLGVBQWUsQ0FBQyxjQUFjLENBQUMsYUFBSyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBUUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFVO1FBRTVCLE9BQU8sSUFBSSwrQkFBYyxDQUFDO1lBQ3RCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztZQUNiLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07U0FDdEIsQ0FBQyxDQUFDO0lBRVAsQ0FBQztDQUVKO0FBaEdELDBDQWdHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29udGV4dE1lbnVMb2NhdGlvbn0gZnJvbSAnLi4vY29udGV4dG1lbnUvQ29udGV4dE1lbnVMb2NhdGlvbic7XG5pbXBvcnQge0xvZ2dlcn0gZnJvbSAnLi4vbG9nZ2VyL0xvZ2dlcic7XG5pbXBvcnQge1ByZWNvbmRpdGlvbnN9IGZyb20gJy4uL1ByZWNvbmRpdGlvbnMnO1xuaW1wb3J0IHtSZWN0fSBmcm9tICcuLi9SZWN0JztcbmltcG9ydCB7QW5ub3RhdGlvblJlY3R9IGZyb20gJy4vQW5ub3RhdGlvblJlY3QnO1xuaW1wb3J0IHtMaW5lfSBmcm9tICcuLi91dGlsL0xpbmUnO1xuaW1wb3J0IHtSZWN0c30gZnJvbSAnLi4vUmVjdHMnO1xuY29uc3QgbG9nID0gTG9nZ2VyLmNyZWF0ZSgpO1xuXG5leHBvcnQgY2xhc3MgQW5ub3RhdGlvblJlY3RzIHtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnRleHRNZW51TG9jYXRpb24ge0NvbnRleHRNZW51TG9jYXRpb259XG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUZyb21FdmVudChjb250ZXh0TWVudUxvY2F0aW9uOiBDb250ZXh0TWVudUxvY2F0aW9uKSB7XG5cbiAgICAgICAgbGV0IHBvaW50cyA9IGNvbnRleHRNZW51TG9jYXRpb24ucG9pbnRzO1xuXG4gICAgICAgIGxldCBlbGVtZW50cyA9IGRvY3VtZW50LmVsZW1lbnRzRnJvbVBvaW50KHBvaW50cy5jbGllbnQueCwgcG9pbnRzLmNsaWVudC55KTtcblxuICAgICAgICBlbGVtZW50cyA9IGVsZW1lbnRzLmZpbHRlcihlbGVtZW50ID0+IGVsZW1lbnQubWF0Y2hlcyhcIi5wYWdlXCIpKTtcblxuICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoID09PSAxKSB7XG5cbiAgICAgICAgICAgIGxldCBwYWdlRWxlbWVudCA9IDxIVE1MRWxlbWVudD5lbGVtZW50c1swXTtcblxuICAgICAgICAgICAgbG9nLmluZm8oXCJDcmVhdGluZyBib3ggb24gcGFnZUVsZW1lbnQ6IFwiLCBwYWdlRWxlbWVudCk7XG5cbiAgICAgICAgICAgIC8vIGdldCB0aGUgcG9pbnQgd2l0aGluIHRoZSBlbGVtZW50IGl0c2VsZi4uXG4gICAgICAgICAgICBsZXQgcGFnZUVsZW1lbnRQb2ludCA9IHBvaW50cy5wYWdlT2Zmc2V0O1xuXG4gICAgICAgICAgICBsZXQgYm94UmVjdCA9IFJlY3RzLmNyZWF0ZUZyb21CYXNpY1JlY3Qoe1xuICAgICAgICAgICAgICAgIGxlZnQ6IHBhZ2VFbGVtZW50UG9pbnQueCxcbiAgICAgICAgICAgICAgICB0b3A6IHBhZ2VFbGVtZW50UG9pbnQueSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMTUwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMTUwXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbG9nLmluZm8oXCJQbGFjaW5nIGJveCBhdDogXCIsIGJveFJlY3QpO1xuXG4gICAgICAgICAgICAvLyBnZXQgYSByZWN0IGZvciB0aGUgZWxlbWVudC4uLiB3ZSByZWFsbHkgb25seSBuZWVkIHRoZSBkaW1lbnNpb25zXG4gICAgICAgICAgICAvLyB0aG91Z2guLiBub3QgdGhlIHdpZHRoIGFuZCBoZWlnaHQuXG4gICAgICAgICAgICBsZXQgY29udGFpbmVyUmVjdCA9IFJlY3RzLmNyZWF0ZUZyb21CYXNpY1JlY3Qoe1xuICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBwYWdlRWxlbWVudC5vZmZzZXRXaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHBhZ2VFbGVtZW50Lm9mZnNldEhlaWdodFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBBbm5vdGF0aW9uUmVjdHMuY3JlYXRlRnJvbVBvc2l0aW9uZWRSZWN0KGJveFJlY3QsIGNvbnRhaW5lclJlY3QpO1xuXG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXcm9uZyBudW1iZXIgb2YgLnBhZ2UgZWxlbWVudHM6IFwiICsgZWxlbWVudHMubGVuZ3RoKTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBBbm5vdGF0aW9uUmVjdCBmcm9tIGEgcG9zaXRpb25lZCByZWN0LiAgV2UgdXNlIHRoaXMgdG8gdGFrZVxuICAgICAqIGEgZHJhZ2dlZCBvciByZXNpemVkIHJlY3QgLyBib3ggb24gdGhlIHNjcmVlbiB0aGVuIGNvbnZlcnQgaXQgdG8gYVxuICAgICAqIFBhZ2VtYXJrUmVjdCB3aXRoIHRoZSBjb3JyZWN0IGNvb3JkaW5hdGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJveFJlY3Qge1JlY3R9XG4gICAgICogQHBhcmFtIGNvbnRhaW5lclJlY3Qge1JlY3R9XG4gICAgICogQHJldHVybiB7QW5ub3RhdGlvblJlY3R9XG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUZyb21Qb3NpdGlvbmVkUmVjdChib3hSZWN0OiBSZWN0LCBjb250YWluZXJSZWN0OiBSZWN0KTogQW5ub3RhdGlvblJlY3Qge1xuXG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0SW5zdGFuY2VPZihib3hSZWN0LCBSZWN0LCBcImJveFJlY3RcIik7XG5cbiAgICAgICAgbGV0IHhBeGlzID0gYm94UmVjdC50b0xpbmUoXCJ4XCIpLm11bHRpcGx5KDEwMCAvIGNvbnRhaW5lclJlY3Qud2lkdGgpO1xuICAgICAgICBsZXQgeUF4aXMgPSBib3hSZWN0LnRvTGluZShcInlcIikubXVsdGlwbHkoMTAwIC8gY29udGFpbmVyUmVjdC5oZWlnaHQpO1xuXG4gICAgICAgIHJldHVybiBBbm5vdGF0aW9uUmVjdHMuY3JlYXRlRnJvbUxpbmVzKHhBeGlzLCB5QXhpcyk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB4QXhpcyB7TGluZX1cbiAgICAgKiBAcGFyYW0geUF4aXMge0xpbmV9XG4gICAgICogQHJldHVybiB7QW5ub3RhdGlvblJlY3R9XG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUZyb21MaW5lcyh4QXhpczogTGluZSwgeUF4aXM6IExpbmUpIHtcbiAgICAgICAgcmV0dXJuIEFubm90YXRpb25SZWN0cy5jcmVhdGVGcm9tUmVjdChSZWN0cy5jcmVhdGVGcm9tTGluZXMoeEF4aXMsIHlBeGlzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWN0IHtSZWN0fVxuICAgICAqIEByZXR1cm4ge0Fubm90YXRpb25SZWN0fVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVGcm9tUmVjdChyZWN0OiBSZWN0KSB7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBBbm5vdGF0aW9uUmVjdCh7XG4gICAgICAgICAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgICAgICAgICB0b3A6IHJlY3QudG9wLFxuICAgICAgICAgICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG59XG4iXX0=