"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SerializedObject_1 = require("./SerializedObject");
const Preconditions_1 = require("../Preconditions");
class VersionedObject extends SerializedObject_1.SerializedObject {
    constructor(template) {
        super(template);
        this.id = template.id;
        this.guid = template.guid;
        this.created = template.created;
        this.lastUpdated = template.lastUpdated;
        this.author = template.author;
        this.init(template);
    }
    setup() {
        super.setup();
        if (!this.lastUpdated && this.created) {
            this.lastUpdated = this.created;
        }
    }
    validate() {
        super.validate();
        this.created = Preconditions_1.Preconditions.assertNotNull(this.created);
        this.lastUpdated = Preconditions_1.Preconditions.assertNotNull(this.lastUpdated);
        Preconditions_1.Preconditions.assertNotNull(this.id, "id");
        Preconditions_1.Preconditions.assertNotNull(this.created, "created");
    }
}
exports.VersionedObject = VersionedObject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmVyc2lvbmVkT2JqZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVmVyc2lvbmVkT2JqZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EseURBQW9EO0FBQ3BELG9EQUErQztBQUkvQyxNQUFzQixlQUFnQixTQUFRLG1DQUFnQjtJQXNDMUQsWUFBc0IsUUFBeUI7UUFFM0MsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRWhCLElBQUksQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQztRQUN4QyxJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFFOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUV4QixDQUFDO0lBRU0sS0FBSztRQUVSLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUVkLElBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDbEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ25DO0lBRUwsQ0FBQztJQUVNLFFBQVE7UUFFWCxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFakIsSUFBSSxDQUFDLE9BQU8sR0FBRyw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLFdBQVcsR0FBRyw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFakUsNkJBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzQyw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRXpELENBQUM7Q0FFSjtBQTFFRCwwQ0EwRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0F1dGhvcn0gZnJvbSAnLi9BdXRob3InO1xuaW1wb3J0IHtTZXJpYWxpemVkT2JqZWN0fSBmcm9tICcuL1NlcmlhbGl6ZWRPYmplY3QnO1xuaW1wb3J0IHtQcmVjb25kaXRpb25zfSBmcm9tICcuLi9QcmVjb25kaXRpb25zJztcbmltcG9ydCB7SVNPRGF0ZVRpbWVTdHJpbmd9IGZyb20gJy4vSVNPRGF0ZVRpbWVTdHJpbmdzJztcbmltcG9ydCB7UmVmfSBmcm9tICcuL1JlZnMnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVmVyc2lvbmVkT2JqZWN0IGV4dGVuZHMgU2VyaWFsaXplZE9iamVjdCB7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdW5pcXVlIElEIGZvciB0aGlzIG9iamVjdC4gIEV2ZXJ5IG9iamVjdCBuZWVkcyB0byBoYXZlIGEgdW5pcXVlIElEIHNvXG4gICAgICogdGhhdCB3ZSBjYW4gcmVmZXJlbmNlIGl0IGVhc2lseS4gIFRoZSBJRCBzaG91bGQgcmVwcmVzZW50IHRoZSBpbW11dGFibGVcbiAgICAgKiBmb3JtIG9mIHRoaXMgb2JqZWN0LiBJZiB0aGUgb2JqZWN0IGlzIG11dGF0ZWQgdGhlIGlkIHNob3VsZCBjaGFuZ2UuXG4gICAgICovXG4gICAgcHVibGljIGlkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGFuIG9iamVjdCBpcyBjcmVhdGVkIGl0IGhhcyBhbiBpZCBqdXN0IGxpa2UgZXZlcnkgb3RoZXIgYW5ub3RhdGlvblxuICAgICAqIG9iamVjdCBob3dldmVyLCB3ZSBjYW4gdXBkYXRlIHRoZW0gb3ZlciB0aW1lIGFuZCB3aGVuIGl0J3MgdXBkYXRlZCB3ZVxuICAgICAqIG5lZWQgdG8gZ2VuZXJhdGUgYSBuZXcgaWQuICBUaGUgZ3VpZCBhbGxvd3MgdXMgdG8gcmVmZXJlbmNlIGFhbiBvYmplY3QgYXNcbiAgICAgKiBpdCBjaGFuZ2VzIG92ZXIgdGltZS4gIElmIHRoZSB1c2VyIHVwZGF0ZXMgdGhlIG9iamVjdCB3ZSBrZWVwIHRoZSBzYW1lXG4gICAgICogZ3VpZCBzbyB3ZSBoYXZlIGEgdW5pcXVlIGhhbmRsZSBvbiB0aGUgYW5ub3RhdGlvbiBhcyBpdCdzIGVkaXRlZCBhbmQgdGhlXG4gICAgICogaW5pdGlhbCBndWlkIG5ldmVyIGNoYW5nZXMgYnV0IHRoZSBpZCBpcyBzdGlsbCBlc3NlbnRpYWxseSB0aGUgcGsuXG4gICAgICovXG5cbiAgICBwdWJsaWMgZ3VpZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRpbWUgdGhpcyBvYmplY3Qgd2FzIGNyZWF0ZWRcbiAgICAgKlxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGVkOiBJU09EYXRlVGltZVN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYXN0IHRpbWUgdGhpcyBhbm5vdGF0aW9uIHdhcyB1cGRhdGVkIChub3RlIGNoYW5nZWQsIG1vdmVkLCBldGMpLlxuICAgICAqL1xuICAgIHB1YmxpYyBsYXN0VXBkYXRlZDogSVNPRGF0ZVRpbWVTdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYXV0aG9yIHdobyBjcmVhdGVkIHRoaXMgb2JqZWN0LlxuICAgICAqL1xuICAgIHB1YmxpYyBhdXRob3I/OiBBdXRob3I7XG5cbiAgICBwdWJsaWMgcmVmPzogUmVmO1xuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHRlbXBsYXRlOiBWZXJzaW9uZWRPYmplY3QpIHtcblxuICAgICAgICBzdXBlcih0ZW1wbGF0ZSk7XG5cbiAgICAgICAgdGhpcy5pZCA9IHRlbXBsYXRlLmlkO1xuICAgICAgICB0aGlzLmd1aWQgPSB0ZW1wbGF0ZS5ndWlkO1xuICAgICAgICB0aGlzLmNyZWF0ZWQgPSB0ZW1wbGF0ZS5jcmVhdGVkO1xuICAgICAgICB0aGlzLmxhc3RVcGRhdGVkID0gdGVtcGxhdGUubGFzdFVwZGF0ZWQ7XG4gICAgICAgIHRoaXMuYXV0aG9yID0gdGVtcGxhdGUuYXV0aG9yO1xuXG4gICAgICAgIHRoaXMuaW5pdCh0ZW1wbGF0ZSk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0dXAoKSB7XG5cbiAgICAgICAgc3VwZXIuc2V0dXAoKTtcblxuICAgICAgICBpZighdGhpcy5sYXN0VXBkYXRlZCAmJiB0aGlzLmNyZWF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdFVwZGF0ZWQgPSB0aGlzLmNyZWF0ZWQ7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHB1YmxpYyB2YWxpZGF0ZSgpIHtcblxuICAgICAgICBzdXBlci52YWxpZGF0ZSgpO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlZCA9IFByZWNvbmRpdGlvbnMuYXNzZXJ0Tm90TnVsbCh0aGlzLmNyZWF0ZWQpO1xuICAgICAgICB0aGlzLmxhc3RVcGRhdGVkID0gUHJlY29uZGl0aW9ucy5hc3NlcnROb3ROdWxsKHRoaXMubGFzdFVwZGF0ZWQpO1xuXG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0Tm90TnVsbCh0aGlzLmlkLCBcImlkXCIpO1xuICAgICAgICBQcmVjb25kaXRpb25zLmFzc2VydE5vdE51bGwodGhpcy5jcmVhdGVkLCBcImNyZWF0ZWRcIik7XG5cbiAgICB9XG5cbn1cblxuIl19