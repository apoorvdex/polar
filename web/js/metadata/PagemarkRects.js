"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PagemarkType_1 = require("./PagemarkType");
const PagemarkRect_1 = require("./PagemarkRect");
const Preconditions_1 = require("../Preconditions");
const Rect_1 = require("../Rect");
const Rects_1 = require("../Rects");
class PagemarkRects {
    static createDefault(pagemark) {
        if (pagemark.type === PagemarkType_1.PagemarkType.SINGLE_COLUMN && "percentage" in pagemark) {
            return new PagemarkRect_1.PagemarkRect({
                left: 0,
                top: 0,
                width: 100,
                height: pagemark.percentage
            });
        }
        throw new Error("Can not create default");
    }
    static createFromPercentage(percentage) {
        return new PagemarkRect_1.PagemarkRect({
            left: 0,
            top: 0,
            width: 100,
            height: percentage
        });
    }
    static createFromRect(rect) {
        return new PagemarkRect_1.PagemarkRect({
            left: rect.left,
            top: rect.top,
            width: rect.width,
            height: rect.height
        });
    }
    static createFromLines(xAxis, yAxis) {
        return PagemarkRects.createFromRect(Rects_1.Rects.createFromLines(xAxis, yAxis));
    }
    static createFromPositionedRect(boxRect, containerRect) {
        Preconditions_1.Preconditions.assertInstanceOf(boxRect, Rect_1.Rect, "boxRect");
        let xAxis = boxRect.toLine("x").multiply(100 / containerRect.width).floor();
        let yAxis = boxRect.toLine("y").multiply(100 / containerRect.height).floor();
        return this.createFromLines(xAxis, yAxis);
    }
}
exports.PagemarkRects = PagemarkRects;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFnZW1hcmtSZWN0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlBhZ2VtYXJrUmVjdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxpREFBNEM7QUFDNUMsaURBQTRDO0FBQzVDLG9EQUErQztBQUMvQyxrQ0FBNkI7QUFDN0Isb0NBQStCO0FBRS9CLE1BQWEsYUFBYTtJQU90QixNQUFNLENBQUMsYUFBYSxDQUFDLFFBQWtCO1FBRW5DLElBQUcsUUFBUSxDQUFDLElBQUksS0FBSywyQkFBWSxDQUFDLGFBQWEsSUFBSSxZQUFZLElBQUksUUFBUSxFQUFFO1lBRXpFLE9BQU8sSUFBSSwyQkFBWSxDQUFDO2dCQUNwQixJQUFJLEVBQUUsQ0FBQztnQkFDUCxHQUFHLEVBQUUsQ0FBQztnQkFDTixLQUFLLEVBQUUsR0FBRztnQkFDVixNQUFNLEVBQUUsUUFBUSxDQUFDLFVBQVU7YUFDOUIsQ0FBQyxDQUFDO1NBRU47UUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFFOUMsQ0FBQztJQU9ELE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxVQUFrQjtRQUUxQyxPQUFPLElBQUksMkJBQVksQ0FBQztZQUNwQixJQUFJLEVBQUUsQ0FBQztZQUNQLEdBQUcsRUFBRSxDQUFDO1lBQ04sS0FBSyxFQUFFLEdBQUc7WUFDVixNQUFNLEVBQUUsVUFBVTtTQUNyQixDQUFDLENBQUM7SUFDUCxDQUFDO0lBU00sTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFTO1FBRWxDLE9BQU8sSUFBSSwyQkFBWSxDQUFDO1lBQ3BCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztZQUNiLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07U0FDdEIsQ0FBQyxDQUFDO0lBRVAsQ0FBQztJQVNELE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBVSxFQUFFLEtBQVU7UUFDekMsT0FBTyxhQUFhLENBQUMsY0FBYyxDQUFDLGFBQUssQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQVlELE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxPQUFZLEVBQUUsYUFBa0I7UUFFNUQsNkJBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsV0FBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRXpELElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDNUUsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUU3RSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRTlDLENBQUM7Q0FFSjtBQXpGRCxzQ0F5RkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BhZ2VtYXJrfSBmcm9tICcuL1BhZ2VtYXJrJztcbmltcG9ydCB7UGFnZW1hcmtUeXBlfSBmcm9tICcuL1BhZ2VtYXJrVHlwZSc7XG5pbXBvcnQge1BhZ2VtYXJrUmVjdH0gZnJvbSAnLi9QYWdlbWFya1JlY3QnO1xuaW1wb3J0IHtQcmVjb25kaXRpb25zfSBmcm9tICcuLi9QcmVjb25kaXRpb25zJztcbmltcG9ydCB7UmVjdH0gZnJvbSAnLi4vUmVjdCc7XG5pbXBvcnQge1JlY3RzfSBmcm9tICcuLi9SZWN0cyc7XG5cbmV4cG9ydCBjbGFzcyBQYWdlbWFya1JlY3RzIHtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQ3JlYXRlIGEgZGVmYXVsdCBQYWdlbWFya1JlY3QgZnJvbSBhIFBhZ2VtYXJrIHRoYXQgbWlnaHQgYmUgbGVnYWN5LlxuICAgICAqXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZURlZmF1bHQocGFnZW1hcms6IFBhZ2VtYXJrKSB7XG5cbiAgICAgICAgaWYocGFnZW1hcmsudHlwZSA9PT0gUGFnZW1hcmtUeXBlLlNJTkdMRV9DT0xVTU4gJiYgXCJwZXJjZW50YWdlXCIgaW4gcGFnZW1hcmspIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQYWdlbWFya1JlY3Qoe1xuICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBwYWdlbWFyay5wZXJjZW50YWdlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuIG5vdCBjcmVhdGUgZGVmYXVsdFwiKTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHBlcmNlbnRhZ2Uge251bWJlcn1cbiAgICAgKiBAcmV0dXJuIHtQYWdlbWFya1JlY3R9XG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUZyb21QZXJjZW50YWdlKHBlcmNlbnRhZ2U6IG51bWJlcikge1xuXG4gICAgICAgIHJldHVybiBuZXcgUGFnZW1hcmtSZWN0KHtcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICB3aWR0aDogMTAwLFxuICAgICAgICAgICAgaGVpZ2h0OiBwZXJjZW50YWdlXG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWN0IHtSZWN0fVxuICAgICAqIEByZXR1cm4ge1BhZ2VtYXJrUmVjdH1cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21SZWN0KHJlY3Q6IGFueSkge1xuXG4gICAgICAgIHJldHVybiBuZXcgUGFnZW1hcmtSZWN0KHtcbiAgICAgICAgICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICAgICAgICAgIHRvcDogcmVjdC50b3AsXG4gICAgICAgICAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogcmVjdC5oZWlnaHRcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIE1vdmluZyB0byBBbm5vdGF0aW9uUmVjdHNcbiAgICAgKiBAcGFyYW0geEF4aXMge0xpbmV9XG4gICAgICogQHBhcmFtIHlBeGlzIHtMaW5lfVxuICAgICAqIEByZXR1cm4ge1BhZ2VtYXJrUmVjdH1cbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlRnJvbUxpbmVzKHhBeGlzOiBhbnksIHlBeGlzOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIFBhZ2VtYXJrUmVjdHMuY3JlYXRlRnJvbVJlY3QoUmVjdHMuY3JlYXRlRnJvbUxpbmVzKHhBeGlzLCB5QXhpcykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBQYWdlbWFya1JlY3QgZnJvbSBhIHBvc2l0aW9uZWQgcmVjdC4gIFdlIHVzZSB0aGlzIHRvIHRha2VcbiAgICAgKiBhIGRyYWdnZWQgb3IgcmVzaXplZCByZWN0IC8gYm94IG9uIHRoZSBzY3JlZW4gdGhlbiBjb252ZXJ0IGl0IHRvIGFcbiAgICAgKiBQYWdlbWFya1JlY3Qgd2l0aCB0aGUgY29ycmVjdCBjb29yZGluYXRlcy5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIE1vdmluZyB0byBBbm5vdGF0aW9uUmVjdHNcbiAgICAgKiBAcGFyYW0gYm94UmVjdCB7UmVjdH1cbiAgICAgKiBAcGFyYW0gY29udGFpbmVyUmVjdCB7UmVjdH1cbiAgICAgKiBAcmV0dXJuIHtQYWdlbWFya1JlY3R9XG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUZyb21Qb3NpdGlvbmVkUmVjdChib3hSZWN0OiBhbnksIGNvbnRhaW5lclJlY3Q6IGFueSkge1xuXG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0SW5zdGFuY2VPZihib3hSZWN0LCBSZWN0LCBcImJveFJlY3RcIik7XG5cbiAgICAgICAgbGV0IHhBeGlzID0gYm94UmVjdC50b0xpbmUoXCJ4XCIpLm11bHRpcGx5KDEwMCAvIGNvbnRhaW5lclJlY3Qud2lkdGgpLmZsb29yKCk7XG4gICAgICAgIGxldCB5QXhpcyA9IGJveFJlY3QudG9MaW5lKFwieVwiKS5tdWx0aXBseSgxMDAgLyBjb250YWluZXJSZWN0LmhlaWdodCkuZmxvb3IoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVGcm9tTGluZXMoeEF4aXMsIHlBeGlzKTtcblxuICAgIH1cblxufVxuIl19