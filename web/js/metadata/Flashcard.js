"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const VersionedObject_1 = require("./VersionedObject");
const Preconditions_1 = require("../Preconditions");
class Flashcard extends VersionedObject_1.VersionedObject {
    constructor(template) {
        super(template);
        this.type = template.type;
        this.fields = template.fields;
        this.archetype = template.archetype;
        this.guid = template.guid;
        this.init(template);
    }
    validate() {
        super.validate();
        Preconditions_1.Preconditions.assertNotNull(this.id, "id");
        Preconditions_1.Preconditions.assertNotNull(this.type, "type");
        Preconditions_1.Preconditions.assertNotNull(this.guid, "guid");
        Preconditions_1.Preconditions.assertNotNull(this.fields, "fields");
        Preconditions_1.Preconditions.assertNotNull(this.archetype, "archetype");
    }
    static newInstance(id, guid, created, lastUpdated, type, fields, archetype, ref) {
        const result = new Flashcard({
            id, guid, created, lastUpdated, type, fields, archetype, ref
        });
        return Object.freeze(result);
    }
}
exports.Flashcard = Flashcard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmxhc2hjYXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRmxhc2hjYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsdURBQWtEO0FBRWxELG9EQUErQztBQUkvQyxNQUFhLFNBQVUsU0FBUSxpQ0FBZTtJQW9CMUMsWUFBbUIsUUFBbUI7UUFFbEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRWhCLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztRQUUxQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRXhCLENBQUM7SUFFTSxRQUFRO1FBRVgsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRWpCLDZCQUFhLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDM0MsNkJBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMvQyw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLDZCQUFhLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbkQsNkJBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUk3RCxDQUFDO0lBRU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFVLEVBQ1YsSUFBWSxFQUNaLE9BQTBCLEVBQzFCLFdBQThCLEVBQzlCLElBQW1CLEVBQ25CLE1BQTZCLEVBQzdCLFNBQWlCLEVBQ2pCLEdBQVE7UUFFOUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxTQUFTLENBQWE7WUFDckMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUc7U0FDL0QsQ0FBQyxDQUFDO1FBRUgsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpDLENBQUM7Q0FFSjtBQWhFRCw4QkFnRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0ZsYXNoY2FyZFR5cGV9IGZyb20gJy4vRmxhc2hjYXJkVHlwZSc7XG5pbXBvcnQge1ZlcnNpb25lZE9iamVjdH0gZnJvbSAnLi9WZXJzaW9uZWRPYmplY3QnO1xuaW1wb3J0IHtUZXh0fSBmcm9tICcuL1RleHQnO1xuaW1wb3J0IHtQcmVjb25kaXRpb25zfSBmcm9tICcuLi9QcmVjb25kaXRpb25zJztcbmltcG9ydCB7SVNPRGF0ZVRpbWVTdHJpbmd9IGZyb20gJy4vSVNPRGF0ZVRpbWVTdHJpbmdzJztcbmltcG9ydCB7UmVmfSBmcm9tICcuL1JlZnMnO1xuXG5leHBvcnQgY2xhc3MgRmxhc2hjYXJkIGV4dGVuZHMgVmVyc2lvbmVkT2JqZWN0IHtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoaXMgZmxhc2hjYXJkLlxuICAgICAqL1xuICAgIHB1YmxpYyB0eXBlOiBGbGFzaGNhcmRUeXBlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRlbnQgb2YgdGhpcyBmbGFzaGNhcmQgY3JlYXRlZCBieSB0aGUgdXNlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgZmllbGRzOiB7W2tleTogc3RyaW5nXTogVGV4dH0gO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFyY2hldHlwZSBJRCB1c2VkIHRvIGNyZWF0ZSB0aGlzIGZsYXNoY2FyZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgYXJjaGV0eXBlOiBzdHJpbmc7XG5cbiAgICAvLyBUT0RPOiB3ZSBkb24ndCBoYXZlIGEgd2F5IHJpZ2h0IG5vdyB0byBhdHRhY2ggdGhlc2UgdG8gc3BlY2lmaWNcbiAgICAvLyBhbm5vdGF0aW9uc1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHRlbXBsYXRlOiBGbGFzaGNhcmQpIHtcblxuICAgICAgICBzdXBlcih0ZW1wbGF0ZSk7XG5cbiAgICAgICAgdGhpcy50eXBlID0gdGVtcGxhdGUudHlwZTtcbiAgICAgICAgdGhpcy5maWVsZHMgPSB0ZW1wbGF0ZS5maWVsZHM7XG4gICAgICAgIHRoaXMuYXJjaGV0eXBlID0gdGVtcGxhdGUuYXJjaGV0eXBlO1xuICAgICAgICB0aGlzLmd1aWQgPSB0ZW1wbGF0ZS5ndWlkO1xuXG4gICAgICAgIHRoaXMuaW5pdCh0ZW1wbGF0ZSk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgdmFsaWRhdGUoKTogdm9pZCB7XG5cbiAgICAgICAgc3VwZXIudmFsaWRhdGUoKTtcblxuICAgICAgICBQcmVjb25kaXRpb25zLmFzc2VydE5vdE51bGwodGhpcy5pZCwgXCJpZFwiKTtcbiAgICAgICAgUHJlY29uZGl0aW9ucy5hc3NlcnROb3ROdWxsKHRoaXMudHlwZSwgXCJ0eXBlXCIpO1xuICAgICAgICBQcmVjb25kaXRpb25zLmFzc2VydE5vdE51bGwodGhpcy5ndWlkLCBcImd1aWRcIik7XG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0Tm90TnVsbCh0aGlzLmZpZWxkcywgXCJmaWVsZHNcIik7XG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0Tm90TnVsbCh0aGlzLmFyY2hldHlwZSwgXCJhcmNoZXR5cGVcIik7XG5cbiAgICAgICAgLy8gVE9ETzogYXNzZXJ0IHRoYXQgdGhlIGd1aWQgaXMgbm90IG51bGwuXG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIG5ld0luc3RhbmNlKGlkOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndWlkOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkOiBJU09EYXRlVGltZVN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RVcGRhdGVkOiBJU09EYXRlVGltZVN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEZsYXNoY2FyZFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZHM6IHtba2V5OiBzdHJpbmddOiBUZXh0fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyY2hldHlwZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiBSZWYpOiBSZWFkb25seTxGbGFzaGNhcmQ+IHtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgRmxhc2hjYXJkKDxGbGFzaGNhcmQ+IHtcbiAgICAgICAgICAgIGlkLCBndWlkLCBjcmVhdGVkLCBsYXN0VXBkYXRlZCwgdHlwZSwgZmllbGRzLCBhcmNoZXR5cGUsIHJlZlxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZShyZXN1bHQpO1xuXG4gICAgfVxuXG59XG4iXX0=