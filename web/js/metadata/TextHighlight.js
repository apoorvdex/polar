"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Texts_1 = require("./Texts");
const TextType_1 = require("./TextType");
const BaseHighlight_1 = require("./BaseHighlight");
const Preconditions_1 = require("../Preconditions");
class TextHighlight extends BaseHighlight_1.BaseHighlight {
    constructor(val) {
        super(val);
        this.textSelections = {};
        this.text = Texts_1.Texts.create("", TextType_1.TextType.HTML);
        this.init(val);
    }
    validate() {
        super.validate();
        Preconditions_1.Preconditions.assertNotInstanceOf(this.textSelections, "textSelections", Array);
    }
}
exports.TextHighlight = TextHighlight;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dEhpZ2hsaWdodC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlRleHRIaWdobGlnaHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxtQ0FBOEI7QUFDOUIseUNBQW9DO0FBQ3BDLG1EQUE4RDtBQUM5RCxvREFBK0M7QUFTL0MsTUFBYSxhQUFjLFNBQVEsNkJBQWE7SUFvQjVDLFlBQVksR0FBbUI7UUFFM0IsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBYlIsbUJBQWMsR0FBNkIsRUFBRSxDQUFDO1FBUzlDLFNBQUksR0FBa0IsYUFBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsbUJBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQW1DekQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVuQixDQUFDO0lBRU0sUUFBUTtRQUNYLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNqQiw2QkFBYSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDcEYsQ0FBQztDQUVKO0FBOURELHNDQThEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VGV4dFJlY3R9IGZyb20gJy4vVGV4dFJlY3QnO1xuaW1wb3J0IHtUZXh0fSBmcm9tICcuL1RleHQnO1xuaW1wb3J0IHtUZXh0c30gZnJvbSAnLi9UZXh0cyc7XG5pbXBvcnQge1RleHRUeXBlfSBmcm9tICcuL1RleHRUeXBlJztcbmltcG9ydCB7QmFzZUhpZ2hsaWdodCwgSGlnaGxpZ2h0Q29sb3J9IGZyb20gJy4vQmFzZUhpZ2hsaWdodCc7XG5pbXBvcnQge1ByZWNvbmRpdGlvbnN9IGZyb20gJy4uL1ByZWNvbmRpdGlvbnMnO1xuaW1wb3J0IHtSZWN0fSBmcm9tICcuLi9SZWN0JztcbmltcG9ydCB7SW1hZ2V9IGZyb20gJy4vSW1hZ2UnO1xuaW1wb3J0IHtOb3RlfSBmcm9tICcuL05vdGUnO1xuaW1wb3J0IHtRdWVzdGlvbn0gZnJvbSAnLi9RdWVzdGlvbic7XG5pbXBvcnQge0ZsYXNoY2FyZH0gZnJvbSAnLi9GbGFzaGNhcmQnO1xuaW1wb3J0IHtBdXRob3J9IGZyb20gJy4vQXV0aG9yJztcbmltcG9ydCB7SVNPRGF0ZVRpbWVTdHJpbmd9IGZyb20gJy4vSVNPRGF0ZVRpbWVTdHJpbmdzJztcblxuZXhwb3J0IGNsYXNzIFRleHRIaWdobGlnaHQgZXh0ZW5kcyBCYXNlSGlnaGxpZ2h0IHtcblxuICAgIC8qKlxuICAgICAqIEEgcmF3IGFycmF5LWxpa2Ugb2JqZWN0IG9mIHRleHQgZnJvbSB0aGUgcmVnaW9ucyB0aGF0IHRoZSB1c2VyXG4gICAgICogaGFzIGhpZ2hsaWdodGVkIGluIHRoZSBVSS4gSW4gUERGIGFuZCBwZGYuanMgdGhlcmUgaXNuJ3QgcmVhbGx5XG4gICAgICogdGhlIGNvbmNlcHQgb2YgZmxvd2luZyB0ZXh0IHNvIHdlIHRyeSB0byBzaG93IHRoZSB1c2VyIHRoZSB0ZXh0XG4gICAgICogaW4gdGhlIHNwZWNpZmljIHJlZ2lvbnMgdGhleSBzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqL1xuICAgIHB1YmxpYyB0ZXh0U2VsZWN0aW9uczoge1tpZDogbnVtYmVyXTogVGV4dFJlY3R9ID0ge307XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGV4dCBzZWxlY3Rpb25zIGNvbnZlcnRlZCB0byBhIHRleHQgc3RyaW5nIHdoaWNoIG1heSBvciBtYXkgbm90IGJlXG4gICAgICogaHVtYW4gcmVhZGFibGUuICBTb21lIG9mIHRoZSBQREYgdGV4dCBhcmUgYWN0dWFsbHkgbGlzdHMgb2YgZmlndXJlcyB3aXRoXG4gICAgICogc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgbWlnaHQgYmUgcGxhY2VkIGFic29sdXRlbHkgYXJvdW5kIHRoZSBzY3JlZW4uXG4gICAgICpcbiAgICAgKiBXaGVuIHRoaXMgaXMganVzdCBhIHBsYWluIHN0cmluZyB3ZSBhc3N1bWUgaXQncyB0ZXh0IGFuZCBub3QgSFRNTC5cbiAgICAgKi9cbiAgICBwdWJsaWMgdGV4dDogVGV4dCB8IHN0cmluZyA9IFRleHRzLmNyZWF0ZShcIlwiLCBUZXh0VHlwZS5IVE1MKTtcblxuICAgIGNvbnN0cnVjdG9yKHZhbDogSVRleHRIaWdobGlnaHQpIHtcblxuICAgICAgICBzdXBlcih2YWwpO1xuXG5cbiAgICAgICAgLy8gRklYTUU6IGFsbCB0aGVzZSBleHRyYWN0aW9ucyAodGV4dCwgaHRtbCwgZXRjKSBzaG91bGQgYmUgJ3NuaXBwZXQnXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgYWxzbyBoYXZlIHRvIGluY2x1ZGUgdGhlIGNvbnRleHQgd2l0aCB0aGVtIGFuZCB3aXRoIHRoZVxuICAgICAgICAvLyBjb250ZXh0IHdlIGFsc28gbmVlZCB0byBpbmNsdWRlIGltYWdlcyBhcyB3ZWxsIGFzIHRoZSBmb3JtYXQgKG1hcmtkb3duLFxuICAgICAgICAvLyBodG1sLCBldGMpLiAgSXQgc2hvdWxkIHByb2JhYmx5IGJlIGEgbWFwIG9mIGVhY2ggc25pcHBldCB0eXBlLi4uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoZXJlIHNob3VsZCBiZSBvbmUgd2l0aCBubyBjb250ZXh0LCBvbmUgd2l0aCBjb250ZXh0LlxuICAgICAgICAvL1xuICAgICAgICAvLyBGSVhNRTogdGV4dCBzZWxlY3Rpb25zIHNob3VsZCBhbHNvIC8gcHJvYmFibHkgYmUgYSBzbmlwcGV0LiAgRWFjaFxuICAgICAgICAvLyBzbmlwcGV0IHNob3VsZCBhbHNvIGhhdmUgYSByZWN0IGFzc29jaWF0ZWQgd2l0aCBpdC4gIFRoZSAndGV4dCdcbiAgICAgICAgLy8gc25pcHBldCBzaG91bGQgaGF2ZSBhIHJlY3QgZm9yIHRoZSBib3VuZGFyeSBvZiB0aGUgdGV4dC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gRklYTUU6IHdlIGNvdWxkIHByb2JhYmx5IHJldGFpbiB0aGUgaHRtbCBhbmQgdGV4dCB2YWx1ZXMgYXMgbGVnYWN5XG4gICAgICAgIC8vIGZvciBub3cgYW5kIGFkZCBzbmlwcGV0cyBsYXRlci5cblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIEhUTUwgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBjb250ZW50LiAgVGhpcyB0aGlzIGlzIGNsZWFuc2VkIHZpYVxuICAgICAgICAgKiBhIHdoaXRlbGlzdCBzbyBvbmx5IDxiPiwgPGVtPiwgPGE+IGV0YyBhdHRyaWJ1dGVcbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICovXG5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3B1bmthdmUvc2FuaXRpemUtaHRtbCBmb3IgdGhpcyB3aXRoIHRoZSBkZWZhdWx0XG4gICAgICAgIC8vIG9wdGlvbnMgbG9va3MgcHJldHR5IGRlY2VudC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gZG8gdGhpcyB3aXRoIHRoZSByZXN1bHRpbmcgZG9jdW1lbnQgZnJhZ21lbnQuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIHRoaXMuaHRtbCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5pbml0KHZhbCk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgdmFsaWRhdGUoKSB7XG4gICAgICAgIHN1cGVyLnZhbGlkYXRlKCk7XG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0Tm90SW5zdGFuY2VPZih0aGlzLnRleHRTZWxlY3Rpb25zLCBcInRleHRTZWxlY3Rpb25zXCIsIEFycmF5KTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJVGV4dEhpZ2hsaWdodCB7XG5cbiAgICByZWFkb25seSB0ZXh0U2VsZWN0aW9uczoge1tpZDogbnVtYmVyXTogVGV4dFJlY3R9O1xuICAgIHJlYWRvbmx5IHRleHQ6IFRleHQgfCBzdHJpbmc7XG4gICAgcmVhZG9ubHkgcmVjdHM6IHtba2V5OiBudW1iZXJdOiBSZWN0fTtcbiAgICByZWFkb25seSBpbWFnZT86IEltYWdlO1xuICAgIHJlYWRvbmx5IGltYWdlczoge1trZXk6IHN0cmluZ106IEltYWdlfTtcbiAgICByZWFkb25seSBub3Rlczoge1trZXk6IHN0cmluZ106IE5vdGV9O1xuICAgIHJlYWRvbmx5IHF1ZXN0aW9uczoge1trZXk6IHN0cmluZ106IFF1ZXN0aW9ufTtcbiAgICByZWFkb25seSBmbGFzaGNhcmRzOiB7W2tleTogc3RyaW5nXTogRmxhc2hjYXJkfTtcbiAgICByZWFkb25seSBpZDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGd1aWQ6IHN0cmluZztcbiAgICByZWFkb25seSBjcmVhdGVkOiBJU09EYXRlVGltZVN0cmluZztcbiAgICByZWFkb25seSBsYXN0VXBkYXRlZDogSVNPRGF0ZVRpbWVTdHJpbmc7XG4gICAgcmVhZG9ubHkgYXV0aG9yPzogQXV0aG9yO1xuICAgIHJlYWRvbmx5IGNvbG9yPzogSGlnaGxpZ2h0Q29sb3I7XG59XG4iXX0=