"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Preconditions_1 = require("../Preconditions");
const Interval_1 = require("../math/Interval");
const Rects_1 = require("../Rects");
const ENTIRE_PAGE = Rects_1.Rects.createFromBasicRect({ left: 0, top: 0, width: 100, height: 100 });
class AnnotationRect {
    constructor(obj) {
        this.left = obj.left;
        this.top = obj.top;
        this.width = obj.width;
        this.height = obj.height;
        Object.assign(this, obj);
        this._validate();
    }
    _validate() {
        const interval = new Interval_1.Interval(0, 100);
        const assertInterval = (value) => interval.containsPoint(value);
        Preconditions_1.Preconditions.assert(this.top, assertInterval, "top");
        Preconditions_1.Preconditions.assert(this.left, assertInterval, "left");
        Preconditions_1.Preconditions.assert(this.width, assertInterval, "width");
        Preconditions_1.Preconditions.assert(this.height, assertInterval, "height");
    }
    toPercentage() {
        return 100 * (Rects_1.Rects.createFromBasicRect(this).area / ENTIRE_PAGE.area);
    }
    toFractionalRect() {
        let result = {
            left: this.left / 100,
            top: this.top / 100,
            width: this.width / 100,
            height: this.height / 100,
        };
        return Rects_1.Rects.createFromBasicRect(result);
    }
    toDimensions(dimensions) {
        Preconditions_1.Preconditions.assertNotNull(dimensions, "dimensions");
        let fractionalRect = this.toFractionalRect();
        return Rects_1.Rects.createFromBasicRect({
            left: fractionalRect.left * dimensions.width,
            width: fractionalRect.width * dimensions.width,
            top: fractionalRect.top * dimensions.height,
            height: fractionalRect.height * dimensions.height,
        });
    }
}
exports.AnnotationRect = AnnotationRect;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQW5ub3RhdGlvblJlY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBbm5vdGF0aW9uUmVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9EQUErQztBQUUvQywrQ0FBMEM7QUFDMUMsb0NBQStCO0FBRS9CLE1BQU0sV0FBVyxHQUFHLGFBQUssQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUMsQ0FBQyxDQUFDO0FBcUMzRixNQUFhLGNBQWM7SUFzQnZCLFlBQVksR0FBUTtRQUVoQixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFFekIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFekIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBRXJCLENBQUM7SUFPTyxTQUFTO1FBRWIsTUFBTSxRQUFRLEdBQUcsSUFBSSxtQkFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUV0QyxNQUFNLGNBQWMsR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV4RSw2QkFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN0RCw2QkFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN4RCw2QkFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMxRCw2QkFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUVoRSxDQUFDO0lBS00sWUFBWTtRQUNmLE9BQU8sR0FBRyxHQUFHLENBQUMsYUFBSyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQVFELGdCQUFnQjtRQUVaLElBQUksTUFBTSxHQUFHO1lBQ1QsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRztZQUNyQixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHO1lBQ25CLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUc7WUFDdkIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRztTQUM1QixDQUFDO1FBRUYsT0FBTyxhQUFLLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFN0MsQ0FBQztJQU9ELFlBQVksQ0FBQyxVQUFzQjtRQUUvQiw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFFdEQsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFFN0MsT0FBTyxhQUFLLENBQUMsbUJBQW1CLENBQUM7WUFDN0IsSUFBSSxFQUFFLGNBQWMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLEtBQUs7WUFDNUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUs7WUFDOUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxHQUFHLEdBQUcsVUFBVSxDQUFDLE1BQU07WUFDM0MsTUFBTSxFQUFFLGNBQWMsQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU07U0FDcEQsQ0FBQyxDQUFBO0lBRU4sQ0FBQztDQUVKO0FBbkdELHdDQW1HQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UHJlY29uZGl0aW9uc30gZnJvbSAnLi4vUHJlY29uZGl0aW9ucyc7XG5pbXBvcnQge0RpbWVuc2lvbnN9IGZyb20gJy4uL3V0aWwvRGltZW5zaW9ucyc7XG5pbXBvcnQge0ludGVydmFsfSBmcm9tICcuLi9tYXRoL0ludGVydmFsJztcbmltcG9ydCB7UmVjdHN9IGZyb20gJy4uL1JlY3RzJztcblxuY29uc3QgRU5USVJFX1BBR0UgPSBSZWN0cy5jcmVhdGVGcm9tQmFzaWNSZWN0KHsgbGVmdDogMCwgdG9wOiAwLCB3aWR0aDogMTAwLCBoZWlnaHQ6IDEwMH0pO1xuXG4vKipcbiAqIEEgQW5ub3RhdGlvblJlY3QgaXMgYSBiYXNpYyBSZWN0IGZvciByZXByZXNlbnRpbmcgYW4gYW5ub3RhdGlvbiBvbiBhIHBhZ2UuXG4gKlxuICogVGhpcyBpcyBhIGJveCBsYXlvdXQgZm9yIGFuIGFubm90YXRpb24uICBXZSB1c2UgdGhlIHR5cGljYWwgRE9NIHBvc2l0aW9uaW5nXG4gKiBzdHlsZSBvZiB0b3AsIGxlZnQsIHdpZHRoIGFuZCBoZWlnaHQgb25seSBpbnN0ZWFkIG9mIHBlcmNlbnRhZ2VzIHdlIHJlcHJlc2VudFxuICogdGhpcyBhcyBwZXJjZW50YWdlIG9mIHRoZSBlbnRpcmUgJ3BhZ2UnLlxuICpcbiAqIFRoaXMgd291bGQgcmVwcmVzZW50IHRoZSByYW5nZSB3aXRoaW4gYSBwYWdlIHRoYXQgYSBib3ggY292ZXJzLiAgVGhpcyBpc1xuICogZXNzZW50aWFsbHkgYSByYW5nZSBoYXMgYSBzdGFydCBhbmQgZW5kIHdoaWNoIGFyZSBwZXJjZW50YWdlcyBvZiB0aGUgcGFnZSB0aGF0XG4gKiBhIHJlY3QgY292ZXJzIGJ1dCBpbiB0d28gZGltZW5zaW9ucyAobm90IGp1c3Qgb25lKS5cbiAqXG4gKiBBIGRlZmF1bHQgcmVjdCAoZm9yIHRoZSBlbnRpcmUgcGFnZSkgd291bGQgaGF2ZSBhIHZhbHVlIG9mOlxuICpcbiAqIHsgdG9wOiAwLCBsZWZ0OiAwLCB3aWR0aDogMTAwLCBoZWlnaHQ6IDEwMCB9XG4gKlxuICogQSByYW5nZSBmb3IgYSBwYWdlIHRoYXQgaXMgaGFsZiB3YXkgY29tcGxldGVkIGlzIFswLDUwXVxuICpcbiAqIHsgdG9wOiAwLCBsZWZ0OiAwLCB3aWR0aDogMTAwLCBoZWlnaHQ6IDUwIH1cbiAqXG4gKiBXZSBhbHNvIHByb3ZpZGUgYWRkaXRpb25hbCBmdW5jdGlvbmFsaXR5IHdoZXJlIHdlIGNhbiBzdGFydCB0aGUgcmVjdFxuICogb3RoZXIgdGhhbiBhdCB0aGUgdG9wIG9mIHRoZSBwYWdlLiBGb3IgZXhhbXBsZSwgaWYgeW91IHdhbnRlZCB0byBtYXJrIHRoZVxuICogYm90dG9tIDUwJSBvZiB0aGUgcGFnZSBhcyByZWFkLCB5b3UgY291bGQgY3JlYXRlIHRoZSByZWN0IGFzOlxuICpcbiAqIHsgdG9wOiA1MCwgbGVmdDogMCwgd2lkdGg6IDEwMCwgaGVpZ2h0OiA1MCB9XG4gKlxuICogVGhlIHVzZXIgY2FuIGNyZWF0ZSByZWN0IGF0IGFueSBwb2ludCBhbmQgdGhlbiB3ZSBjcmVhdGUgYSBzbWFsbCByZWN0XG4gKiBhbmNob3JlZCB0byB0aGF0IHNwb3QsIGFuZCBnaXZlIGl0IGEgYml0IG9mIGhlaWdodCBzbyB0aGF0IHRoZSB1c2VyIGNhblxuICogdmlzdWFsbHkgc2VlIGl0LlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgcGVyY2VudGFnZSBhcmUgb2YgdGhlIGF2YWlsYWJsZSB3aWR0aCBhbmQgaGVpZ2h0LiAgVGhlIG5vcm1hbFxuICogcmF0aW8gd2UgdXNlIGlzIDguNXgxMSBidXQgd2lkdGggYW5kIGhlaWdodCBhcyBwZXJjZW50YWdlcyB3b3VsZCBiZSAxMDB4MTAwLlxuICpcbiAqIFRoaXMgd291bGQgTk9UIGJlIGEgc3F1YXJlIGJ1dCBhIHJlY3RhbmdsZSBhbmQgdGhlIHBlcmNlbnRhZ2VzIGNvbmZ1c2UgdGhhdC5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBBbm5vdGF0aW9uUmVjdCB7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHB1YmxpYyBsZWZ0OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHB1YmxpYyB0b3A6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHVibGljIHdpZHRoOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHB1YmxpYyBoZWlnaHQ6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKG9iajogYW55KSB7XG5cbiAgICAgICAgdGhpcy5sZWZ0ID0gb2JqLmxlZnQ7XG4gICAgICAgIHRoaXMudG9wID0gb2JqLnRvcDtcbiAgICAgICAgdGhpcy53aWR0aCA9IG9iai53aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBvYmouaGVpZ2h0O1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgb2JqKTtcblxuICAgICAgICB0aGlzLl92YWxpZGF0ZSgpO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWFrZSBzdXJlIHdlIGFyZSBpbiBhIHZhbGlkIHN0YXRlIGFuZCB0aGF0IHRoZSBpbnRlcnZhbHMgYXJlIHdpdGhpblxuICAgICAqIHByb3BlciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIF92YWxpZGF0ZSgpIHtcblxuICAgICAgICBjb25zdCBpbnRlcnZhbCA9IG5ldyBJbnRlcnZhbCgwLCAxMDApO1xuXG4gICAgICAgIGNvbnN0IGFzc2VydEludGVydmFsID0gKHZhbHVlOiBudW1iZXIpID0+IGludGVydmFsLmNvbnRhaW5zUG9pbnQodmFsdWUpO1xuXG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0KHRoaXMudG9wLCBhc3NlcnRJbnRlcnZhbCwgXCJ0b3BcIik7XG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0KHRoaXMubGVmdCwgYXNzZXJ0SW50ZXJ2YWwsIFwibGVmdFwiKTtcbiAgICAgICAgUHJlY29uZGl0aW9ucy5hc3NlcnQodGhpcy53aWR0aCwgYXNzZXJ0SW50ZXJ2YWwsIFwid2lkdGhcIik7XG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0KHRoaXMuaGVpZ2h0LCBhc3NlcnRJbnRlcnZhbCwgXCJoZWlnaHRcIik7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIGEgcGVyY2VudGFnZSBvZiB0aGUgcGFnZSB0aGF0IHRoaXMgcmVjdCBob2xkcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgdG9QZXJjZW50YWdlKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAxMDAgKiAoUmVjdHMuY3JlYXRlRnJvbUJhc2ljUmVjdCh0aGlzKS5hcmVhIC8gRU5USVJFX1BBR0UuYXJlYSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCB0aGlzIHRvIGEgZnJhY3Rpb25hbCByZWN0IHdoZXJlIGFsbCB0aGUgdmFsdWVzIGFyZSBpbiB0aGVcbiAgICAgKiBpbnRlcnZhbCBbMC4wLDEuMF1cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1JlY3R9XG4gICAgICovXG4gICAgdG9GcmFjdGlvbmFsUmVjdCgpIHtcblxuICAgICAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgICAgICAgbGVmdDogdGhpcy5sZWZ0IC8gMTAwLFxuICAgICAgICAgICAgdG9wOiB0aGlzLnRvcCAvIDEwMCxcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoIC8gMTAwLFxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCAvIDEwMCxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVjdHMuY3JlYXRlRnJvbUJhc2ljUmVjdChyZXN1bHQpO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCB0byBhIG5ldyBBbm5vdGF0aW9uUmVjdCBvZiB0aGUgc3BlY2lmaWMgZGltZW5zaW9ucy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1JlY3R9XG4gICAgICovXG4gICAgdG9EaW1lbnNpb25zKGRpbWVuc2lvbnM6IERpbWVuc2lvbnMpIHtcblxuICAgICAgICBQcmVjb25kaXRpb25zLmFzc2VydE5vdE51bGwoZGltZW5zaW9ucywgXCJkaW1lbnNpb25zXCIpO1xuXG4gICAgICAgIGxldCBmcmFjdGlvbmFsUmVjdCA9IHRoaXMudG9GcmFjdGlvbmFsUmVjdCgpO1xuXG4gICAgICAgIHJldHVybiBSZWN0cy5jcmVhdGVGcm9tQmFzaWNSZWN0KHtcbiAgICAgICAgICAgIGxlZnQ6IGZyYWN0aW9uYWxSZWN0LmxlZnQgKiBkaW1lbnNpb25zLndpZHRoLFxuICAgICAgICAgICAgd2lkdGg6IGZyYWN0aW9uYWxSZWN0LndpZHRoICogZGltZW5zaW9ucy53aWR0aCxcbiAgICAgICAgICAgIHRvcDogZnJhY3Rpb25hbFJlY3QudG9wICogZGltZW5zaW9ucy5oZWlnaHQsXG4gICAgICAgICAgICBoZWlnaHQ6IGZyYWN0aW9uYWxSZWN0LmhlaWdodCAqIGRpbWVuc2lvbnMuaGVpZ2h0LFxuICAgICAgICB9KVxuXG4gICAgfVxuXG59XG4iXX0=