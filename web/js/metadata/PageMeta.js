"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SerializedObject_1 = require("./SerializedObject");
class PageMeta extends SerializedObject_1.SerializedObject {
    constructor(val) {
        super(val);
        this.pagemarks = {};
        this.notes = {};
        this.comments = {};
        this.questions = {};
        this.flashcards = {};
        this.textHighlights = {};
        this.areaHighlights = {};
        this.screenshots = {};
        this.thumbnails = {};
        this.readingProgress = {};
        this.pageInfo = val.pageInfo;
        this.init(val);
    }
    setup() {
        super.setup();
        if (!this.pagemarks) {
            this.pagemarks = {};
        }
        if (!this.textHighlights) {
            this.textHighlights = {};
        }
        if (!this.areaHighlights) {
            this.areaHighlights = {};
        }
        if (!this.screenshots) {
            this.screenshots = {};
        }
        if (!this.thumbnails) {
            this.thumbnails = {};
        }
    }
    validate() {
        super.validate();
    }
}
exports.PageMeta = PageMeta;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFnZU1ldGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQYWdlTWV0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlEQUFvRDtBQWFwRCxNQUFhLFFBQVMsU0FBUSxtQ0FBZ0I7SUErRDFDLFlBQVksR0FBUTtRQUVoQixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFwREMsY0FBUyxHQUE2QixFQUFFLENBQUM7UUFLekMsVUFBSyxHQUF5QixFQUFFLENBQUM7UUFLakMsYUFBUSxHQUE0QixFQUFFLENBQUM7UUFLdkMsY0FBUyxHQUE2QixFQUFFLENBQUM7UUFNekMsZUFBVSxHQUE4QixFQUFFLENBQUM7UUFNM0MsbUJBQWMsR0FBa0MsRUFBRSxDQUFDO1FBT25ELG1CQUFjLEdBQWtDLEVBQUUsQ0FBQztRQUtuRCxnQkFBVyxHQUErQixFQUFFLENBQUM7UUFPN0MsZUFBVSxHQUE4QixFQUFFLENBQUM7UUFFM0Msb0JBQWUsR0FBb0MsRUFBRSxDQUFDO1FBTWxFLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztRQUU3QixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRW5CLENBQUM7SUFFTSxLQUFLO1FBRVIsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRWQsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFFVixJQUFLLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztTQUMvQjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFO1lBRWYsSUFBSyxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7U0FDcEM7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUVmLElBQUssQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO1NBQ3BDO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFFWixJQUFLLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztTQUNqQztRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBRVgsSUFBSyxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7U0FDaEM7SUFFTCxDQUFDO0lBRU0sUUFBUTtRQUVYLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUdyQixDQUFDO0NBRUo7QUEvR0QsNEJBK0dDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTZXJpYWxpemVkT2JqZWN0fSBmcm9tICcuL1NlcmlhbGl6ZWRPYmplY3QnO1xuaW1wb3J0IHtQYWdlSW5mb30gZnJvbSAnLi9QYWdlSW5mbyc7XG5pbXBvcnQge0ZsYXNoY2FyZH0gZnJvbSAnLi9GbGFzaGNhcmQnO1xuaW1wb3J0IHtDb21tZW50fSBmcm9tICcuL0NvbW1lbnQnO1xuaW1wb3J0IHtOb3RlfSBmcm9tICcuL05vdGUnO1xuaW1wb3J0IHtUZXh0SGlnaGxpZ2h0fSBmcm9tICcuL1RleHRIaWdobGlnaHQnO1xuaW1wb3J0IHtBcmVhSGlnaGxpZ2h0fSBmcm9tICcuL0FyZWFIaWdobGlnaHQnO1xuaW1wb3J0IHtTY3JlZW5zaG90fSBmcm9tICcuL1NjcmVlbnNob3QnO1xuaW1wb3J0IHtUaHVtYm5haWx9IGZyb20gJy4vVGh1bWJuYWlsJztcbmltcG9ydCB7UGFnZW1hcmt9IGZyb20gJy4vUGFnZW1hcmsnO1xuaW1wb3J0IHtRdWVzdGlvbn0gZnJvbSAnLi9RdWVzdGlvbic7XG5pbXBvcnQge1JlYWRpbmdQcm9ncmVzc30gZnJvbSAnLi9SZWFkaW5nUHJvZ3Jlc3MnO1xuXG5leHBvcnQgY2xhc3MgUGFnZU1ldGEgZXh0ZW5kcyBTZXJpYWxpemVkT2JqZWN0IHtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwYWdlSW5mbyBmb3IgdGhpcyBwYWdlLlxuICAgICAqIEB0eXBlIHtQYWdlSW5mb31cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgcGFnZUluZm86IFBhZ2VJbmZvO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGluZGV4IG9mIHBhZ2UgbnVtYmVyIHRvIHBhZ2VtYXJrIHdoaWNoIHN0b3JlcyB0aGUgZGF0YSB3ZSBuZWVkXG4gICAgICogZm9yIGtlZXBpbmcgdHJhY2sgb2YgcGFnZW1hcmtzLiAgVGhlIGluZGV4IGlzIHRoZSBwYWdlbWFyayBjb2x1bW4uXG4gICAgICpcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgcGFnZW1hcmtzOiB7W2lkOiBzdHJpbmddOiBQYWdlbWFya30gPSB7fTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBub3RlIGZvciB0aGlzIGFubm90YXRpb24uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IG5vdGVzOiB7W2lkOiBzdHJpbmddOiBOb3RlfSA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5vdGUgZm9yIHRoaXMgYW5ub3RhdGlvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgY29tbWVudHM6IHtbaWQ6IHN0cmluZ106IENvbW1lbnR9ID0ge307XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBxdWVzdGlvbnM6IHtbaWQ6IHN0cmluZ106IFF1ZXN0aW9ufSA9IHt9O1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxGbGFzaGNhcmQ+fVxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBmbGFzaGNhcmRzOiB7W2lkOiBzdHJpbmddOiBGbGFzaGNhcmR9ID0ge307XG5cbiAgICAvKipcbiAgICAgKiBBbiBpbmRleCBvZiB0ZXN0IGhpZ2hsaWdodHMgZm9yIHRoZSBwYWdlLlxuICAgICAqXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IHRleHRIaWdobGlnaHRzOiB7W2lkOiBzdHJpbmddOiBUZXh0SGlnaGxpZ2h0fSA9IHt9O1xuXG5cbiAgICAvKipcbiAgICAgKiBBbiBpbmRleCBvZiBhcmVhIGhpZ2hsaWdodHMgZm9yIHRoZSBwYWdlLlxuICAgICAqXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGFyZWFIaWdobGlnaHRzOiB7W2lkOiBzdHJpbmddOiBBcmVhSGlnaGxpZ2h0fSA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogU2NyZWVuc2hvdHMgd2UndmUgdGFrZW4gb2YgdGhpcyBwYWdlIHdoaWxlIHBlcmZvcm1pbmcgYW5ub3RhdGlvbnMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IHNjcmVlbnNob3RzOiB7W2lkOiBzdHJpbmddOiBTY3JlZW5zaG90fSA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRodW1ibmFpbHMgZm9yIHRoaXMgcGFnZS4gIFVzdWFsbHksIHRoaXMgaXMganVzdCBvbmUgdGh1bWJuYWlsXG4gICAgICogYnV0IHRoZXJlIG1pZ2h0IGJlIG11bHRpcGxlLiAgSWYgd2Ugd2FudCBhIHNwZWNpZmljIG5vZSB3ZSBjYW4ganVzdFxuICAgICAqIGxvb2sgYXQgdGhlIHdpZHRoIGFuZCBoZWlnaHQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IHRodW1ibmFpbHM6IHtbaWQ6IHN0cmluZ106IFRodW1ibmFpbH0gPSB7fTtcblxuICAgIHB1YmxpYyByZWFkb25seSByZWFkaW5nUHJvZ3Jlc3M6IHtbaWQ6IHN0cmluZ106IFJlYWRpbmdQcm9ncmVzc30gPSB7fTtcblxuICAgIGNvbnN0cnVjdG9yKHZhbDogYW55KSB7XG5cbiAgICAgICAgc3VwZXIodmFsKTtcblxuICAgICAgICB0aGlzLnBhZ2VJbmZvID0gdmFsLnBhZ2VJbmZvO1xuXG4gICAgICAgIHRoaXMuaW5pdCh2YWwpO1xuXG4gICAgfVxuXG4gICAgcHVibGljIHNldHVwKCkge1xuXG4gICAgICAgIHN1cGVyLnNldHVwKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnBhZ2VtYXJrcykge1xuICAgICAgICAgICAgLy8gdGhpcyBjb3VsZCBoYXBwZW4gd2hlbiBzZXJpYWxpemluZyBmcm9tIG9sZCBmaWxlIGZvcm1hdHNcbiAgICAgICAgICAgICg8YW55PiB0aGlzKS5wYWdlbWFya3MgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy50ZXh0SGlnaGxpZ2h0cykge1xuICAgICAgICAgICAgLy8gdGhpcyBjb3VsZCBoYXBwZW4gd2hlbiBzZXJpYWxpemluZyBmcm9tIG9sZCBmaWxlIGZvcm1hdHNcbiAgICAgICAgICAgICg8YW55PiB0aGlzKS50ZXh0SGlnaGxpZ2h0cyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmFyZWFIaWdobGlnaHRzKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGNvdWxkIGhhcHBlbiB3aGVuIHNlcmlhbGl6aW5nIGZyb20gb2xkIGZpbGUgZm9ybWF0c1xuICAgICAgICAgICAgKDxhbnk+IHRoaXMpLmFyZWFIaWdobGlnaHRzID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuc2NyZWVuc2hvdHMpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgY291bGQgaGFwcGVuIHdoZW4gc2VyaWFsaXppbmcgZnJvbSBvbGQgZmlsZSBmb3JtYXRzXG4gICAgICAgICAgICAoPGFueT4gdGhpcykuc2NyZWVuc2hvdHMgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy50aHVtYm5haWxzKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGNvdWxkIGhhcHBlbiB3aGVuIHNlcmlhbGl6aW5nIGZyb20gb2xkIGZpbGUgZm9ybWF0c1xuICAgICAgICAgICAgKDxhbnk+IHRoaXMpLnRodW1ibmFpbHMgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcHVibGljIHZhbGlkYXRlKCkge1xuXG4gICAgICAgIHN1cGVyLnZhbGlkYXRlKCk7XG4gICAgICAgIC8vIFByZWNvbmRpdGlvbnMuYXNzZXJ0SW5zdGFuY2VPZih0aGlzLnBhZ2VJbmZvLCBQYWdlSW5mbywgXCJwYWdlSW5mb1wiKTtcblxuICAgIH1cblxufVxuXG4vKipcbiAqIEEgZGVkaWNhdGVkIHR5cGUgZm9yIGEgcGFnZSBudW1iZXIuICBGcm9tIHJhbmdlIFsxLGluZmluaXR5KVxuICovXG5leHBvcnQgdHlwZSBQYWdlTnVtYmVyID0gbnVtYmVyO1xuXG4iXX0=