"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ISODateTimeStrings_1 = require("./ISODateTimeStrings");
const Dictionaries_1 = require("../util/Dictionaries");
const HitMap_1 = require("../util/HitMap");
const Arrays_1 = require("../util/Arrays");
class Statistics {
    static computeDocumentsAddedRate(docInfos) {
        const result = {};
        for (const docInfo of docInfos) {
            if (docInfo.added) {
                const addedDate = ISODateTimeStrings_1.ISODateTimeStrings.parse(docInfo.added);
                const key = ISODateTimeStrings_1.ISODateTimeStrings.toISODateString(addedDate);
                if (key) {
                    const entry = Dictionaries_1.Dictionaries.computeIfAbsent(result, key, () => {
                        return { date: key, value: 0 };
                    });
                    ++entry.value;
                }
            }
        }
        return Object.values(result)
            .sort((a, b) => a.date.localeCompare(b.date));
    }
    static computeTopTags(docInfos, topN = 25) {
        const hitMap = new HitMap_1.HitMap();
        for (const docInfo of docInfos) {
            const tags = Object.values(docInfo.tags || {});
            for (const tag of tags) {
                hitMap.registerHit(tag.label);
            }
        }
        return Arrays_1.Arrays.head(hitMap.toRanked(), topN);
    }
}
exports.Statistics = Statistics;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhdGlzdGljcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlN0YXRpc3RpY3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFJQSw2REFBdUU7QUFDdkUsdURBQWtEO0FBQ2xELDJDQUFzQztBQUN0QywyQ0FBc0M7QUFFdEMsTUFBYSxVQUFVO0lBRVosTUFBTSxDQUFDLHlCQUF5QixDQUFDLFFBQTRCO1FBRWhFLE1BQU0sTUFBTSxHQUFnQixFQUFFLENBQUM7UUFFL0IsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUU7WUFLNUIsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO2dCQUNoQixNQUFNLFNBQVMsR0FBRyx1Q0FBa0IsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQU0sQ0FBQyxDQUFDO2dCQUMzRCxNQUFNLEdBQUcsR0FBRyx1Q0FBa0IsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBRTFELElBQUksR0FBRyxFQUFFO29CQUVMLE1BQU0sS0FBSyxHQUFHLDJCQUFZLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFO3dCQUN6RCxPQUFPLEVBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFDLENBQUM7b0JBQ2pDLENBQUMsQ0FBQyxDQUFDO29CQUVILEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQztpQkFFakI7YUFFSDtTQUVKO1FBRUQsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQzthQUN2QixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUV0RCxDQUFDO0lBRU0sTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUE0QixFQUFFLE9BQWUsRUFBRTtRQUV4RSxNQUFNLE1BQU0sR0FBRyxJQUFJLGVBQU0sRUFBRSxDQUFDO1FBRTVCLEtBQUssTUFBTSxPQUFPLElBQUksUUFBUSxFQUFFO1lBRTVCLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztZQUUvQyxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtnQkFDcEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDakM7U0FFSjtRQUVELE9BQU8sZUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFaEQsQ0FBQztDQUVKO0FBcERELGdDQW9EQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTWFpbiBlbnRyeXBvaW50IGZvciBjb21wdXRpbmcgc3RhdHMgb24gdW5kZXJseWluZyBtZXRhZGF0YS4uLlxuICovXG5pbXBvcnQge0RvY0luZm8sIElEb2NJbmZvfSBmcm9tICcuL0RvY0luZm8nO1xuaW1wb3J0IHtJU09EYXRlU3RyaW5nLCBJU09EYXRlVGltZVN0cmluZ3N9IGZyb20gJy4vSVNPRGF0ZVRpbWVTdHJpbmdzJztcbmltcG9ydCB7RGljdGlvbmFyaWVzfSBmcm9tICcuLi91dGlsL0RpY3Rpb25hcmllcyc7XG5pbXBvcnQge0hpdE1hcH0gZnJvbSAnLi4vdXRpbC9IaXRNYXAnO1xuaW1wb3J0IHtBcnJheXN9IGZyb20gJy4uL3V0aWwvQXJyYXlzJztcblxuZXhwb3J0IGNsYXNzIFN0YXRpc3RpY3Mge1xuXG4gICAgcHVibGljIHN0YXRpYyBjb21wdXRlRG9jdW1lbnRzQWRkZWRSYXRlKGRvY0luZm9zOiBJdGVyYWJsZTxJRG9jSW5mbz4pOiBEYXRlU3RhdHMge1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdDogRGF0ZVN0YXRNYXAgPSB7fTtcblxuICAgICAgICBmb3IgKGNvbnN0IGRvY0luZm8gb2YgZG9jSW5mb3MpIHtcblxuICAgICAgICAgICAgLy8gbWVyZ2UgdGhlICdhZGRlZCcgdGltZSB0byBhIERhdGUgbWFwIGFuZCBjb252ZXJ0IGl0IG90IHRoZVxuICAgICAgICAgICAgLy8gZGF0ZS4uLlxuXG4gICAgICAgICAgICBpZiAoZG9jSW5mby5hZGRlZCkge1xuICAgICAgICAgICAgICAgY29uc3QgYWRkZWREYXRlID0gSVNPRGF0ZVRpbWVTdHJpbmdzLnBhcnNlKGRvY0luZm8uYWRkZWQhKTtcbiAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IElTT0RhdGVUaW1lU3RyaW5ncy50b0lTT0RhdGVTdHJpbmcoYWRkZWREYXRlKTtcblxuICAgICAgICAgICAgICAgaWYgKGtleSkge1xuXG4gICAgICAgICAgICAgICAgICAgY29uc3QgZW50cnkgPSBEaWN0aW9uYXJpZXMuY29tcHV0ZUlmQWJzZW50KHJlc3VsdCwga2V5LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7ZGF0ZToga2V5LCB2YWx1ZTogMH07XG4gICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICArK2VudHJ5LnZhbHVlO1xuXG4gICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMocmVzdWx0KVxuICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGEuZGF0ZS5sb2NhbGVDb21wYXJlKGIuZGF0ZSkpO1xuXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBjb21wdXRlVG9wVGFncyhkb2NJbmZvczogSXRlcmFibGU8SURvY0luZm8+LCB0b3BOOiBudW1iZXIgPSAyNSkge1xuXG4gICAgICAgIGNvbnN0IGhpdE1hcCA9IG5ldyBIaXRNYXAoKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGRvY0luZm8gb2YgZG9jSW5mb3MpIHtcblxuICAgICAgICAgICAgY29uc3QgdGFncyA9IE9iamVjdC52YWx1ZXMoZG9jSW5mby50YWdzIHx8IHt9KTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCB0YWcgb2YgdGFncykge1xuICAgICAgICAgICAgICAgIGhpdE1hcC5yZWdpc3RlckhpdCh0YWcubGFiZWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gQXJyYXlzLmhlYWQoaGl0TWFwLnRvUmFua2VkKCksIHRvcE4pO1xuXG4gICAgfVxuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0ZVN0YXRNYXAge1xuICAgIFtkYXRlOiBzdHJpbmddOiBEYXRlU3RhdDtcbn1cblxuZXhwb3J0IHR5cGUgRGF0ZVN0YXRzID0gUmVhZG9ubHlBcnJheTxEYXRlU3RhdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0ZVN0YXQge1xuICAgIHJlYWRvbmx5IGRhdGU6IElTT0RhdGVTdHJpbmc7XG4gICAgcmVhZG9ubHkgdmFsdWU6IG51bWJlcjtcbn1cbiJdfQ==