"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../logger/Logger");
const Functions_1 = require("../util/Functions");
const Hashcodes_1 = require("../Hashcodes");
const Pagemarks_1 = require("./Pagemarks");
const Preconditions_1 = require("../Preconditions");
const AnnotationEvent_1 = require("../annotations/components/AnnotationEvent");
const log = Logger_1.Logger.create();
class PageMetas {
    static upgrade(pageMetas) {
        pageMetas = Object.assign({}, pageMetas);
        Functions_1.forDict(pageMetas, (key, pageMeta) => {
            if (!Preconditions_1.isPresent(pageMeta.textHighlights)) {
                pageMeta.textHighlights = {};
            }
            Functions_1.forDict(pageMeta.textHighlights, (_, textHighlight) => {
                if (!textHighlight.id) {
                    textHighlight.id = Hashcodes_1.Hashcodes.createID(textHighlight.rects);
                }
            });
            if (!Preconditions_1.isPresent(pageMeta.areaHighlights)) {
                pageMeta.areaHighlights = {};
            }
            if (!pageMeta.pagemarks) {
                pageMeta.pagemarks = {};
            }
            if (!pageMeta.screenshots) {
                pageMeta.screenshots = {};
            }
            if (!pageMeta.notes) {
                pageMeta.notes = {};
            }
            if (!pageMeta.comments) {
                pageMeta.comments = {};
            }
            if (!pageMeta.questions) {
                pageMeta.questions = {};
            }
            if (!pageMeta.readingProgress) {
                pageMeta.readingProgress = {};
            }
            pageMeta.pagemarks = Pagemarks_1.Pagemarks.upgrade(pageMeta.pagemarks);
        });
        return pageMetas;
    }
    static createModel(docMeta, memberName, callback) {
        Preconditions_1.Preconditions.assertNotNull(docMeta, "docMeta");
        Preconditions_1.Preconditions.assertNotNull(memberName, "memberName");
        Preconditions_1.Preconditions.assertNotNull(callback, "callback");
        Functions_1.forDict(docMeta.pageMetas, (key, pageMeta) => {
            const member = pageMeta[memberName];
            if (!member) {
                log.warn("No member for key: " + key, memberName);
            }
            member.addTraceListener((traceEvent) => {
                if (!traceEvent.path.endsWith("/" + memberName)) {
                    return;
                }
                const annotationEvent = new AnnotationEvent_1.AnnotationEvent(Object.assign({}, traceEvent, {
                    docMeta,
                    pageMeta,
                    traceEvent,
                }));
                callback(annotationEvent);
                return true;
            }).sync();
        });
    }
}
exports.PageMetas = PageMetas;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFnZU1ldGFzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUGFnZU1ldGFzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXdDO0FBRXhDLGlEQUEwQztBQUMxQyw0Q0FBdUM7QUFDdkMsMkNBQXNDO0FBRXRDLG9EQUEwRDtBQUMxRCwrRUFBMEU7QUFHMUUsTUFBTSxHQUFHLEdBQUcsZUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRTVCLE1BQWEsU0FBUztJQUVYLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBb0M7UUFFdEQsU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRXpDLG1CQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxFQUFFO1lBRWpDLElBQUksQ0FBRSx5QkFBUyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRTtnQkFFdEMsUUFBUSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7YUFDaEM7WUFHRCxtQkFBTyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLEVBQUUsYUFBYSxFQUFFLEVBQUU7Z0JBQ2xELElBQUksQ0FBRSxhQUFhLENBQUMsRUFBRSxFQUFFO29CQUVwQixhQUFhLENBQUMsRUFBRSxHQUFHLHFCQUFTLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDOUQ7WUFDTCxDQUFDLENBQUMsQ0FBQztZQUlILElBQUksQ0FBRSx5QkFBUyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRTtnQkFFdEMsUUFBUSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7YUFDaEM7WUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTtnQkFFckIsUUFBUSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7YUFDM0I7WUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRTtnQkFFdkIsUUFBUSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7YUFDN0I7WUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRTtnQkFFakIsUUFBUSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7YUFDdkI7WUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRTtnQkFFcEIsUUFBUSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7YUFDMUI7WUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTtnQkFFckIsUUFBUSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7YUFDM0I7WUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRTtnQkFFM0IsUUFBUSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUM7YUFDakM7WUFFRCxRQUFRLENBQUMsU0FBUyxHQUFHLHFCQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUUvRCxDQUFDLENBQUUsQ0FBQztRQUVKLE9BQU8sU0FBUyxDQUFDO0lBRXJCLENBQUM7SUFNTSxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQWdCLEVBQ2hCLFVBQWtCLEVBQ2xCLFFBQW9EO1FBTzFFLDZCQUFhLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNoRCw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDdEQsNkJBQWEsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRWxELG1CQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsRUFBRTtZQUV6QyxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7WUFFcEMsSUFBSSxDQUFFLE1BQU0sRUFBRTtnQkFDVixHQUFHLENBQUMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQzthQUNyRDtZQUVELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFVBQXNCLEVBQUUsRUFBRTtnQkFFL0MsSUFBSSxDQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUMsRUFBRTtvQkFDOUMsT0FBTztpQkFDVjtnQkFFRCxNQUFNLGVBQWUsR0FBRyxJQUFJLGlDQUFlLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFO29CQUN0RSxPQUFPO29CQUNQLFFBQVE7b0JBQ1IsVUFBVTtpQkFDYixDQUFDLENBQUMsQ0FBQztnQkFFSixRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBRTFCLE9BQU8sSUFBSSxDQUFDO1lBRWhCLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRWQsQ0FBQyxDQUFDLENBQUM7SUFHUCxDQUFDO0NBRUo7QUFsSEQsOEJBa0hDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtMb2dnZXJ9IGZyb20gJy4uL2xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0IHtQYWdlTWV0YX0gZnJvbSAnLi9QYWdlTWV0YSc7XG5pbXBvcnQge2ZvckRpY3R9IGZyb20gJy4uL3V0aWwvRnVuY3Rpb25zJztcbmltcG9ydCB7SGFzaGNvZGVzfSBmcm9tICcuLi9IYXNoY29kZXMnO1xuaW1wb3J0IHtQYWdlbWFya3N9IGZyb20gJy4vUGFnZW1hcmtzJztcbmltcG9ydCB7RG9jTWV0YX0gZnJvbSAnLi9Eb2NNZXRhJztcbmltcG9ydCB7aXNQcmVzZW50LCBQcmVjb25kaXRpb25zfSBmcm9tICcuLi9QcmVjb25kaXRpb25zJztcbmltcG9ydCB7QW5ub3RhdGlvbkV2ZW50fSBmcm9tICcuLi9hbm5vdGF0aW9ucy9jb21wb25lbnRzL0Fubm90YXRpb25FdmVudCc7XG5pbXBvcnQge1RyYWNlRXZlbnR9IGZyb20gJy4uL3Byb3hpZXMvVHJhY2VFdmVudCc7XG5cbmNvbnN0IGxvZyA9IExvZ2dlci5jcmVhdGUoKTtcblxuZXhwb3J0IGNsYXNzIFBhZ2VNZXRhcyB7XG5cbiAgICBwdWJsaWMgc3RhdGljIHVwZ3JhZGUocGFnZU1ldGFzOiB7W2tleTogbnVtYmVyXTogUGFnZU1ldGF9KSB7XG5cbiAgICAgICAgcGFnZU1ldGFzID0gT2JqZWN0LmFzc2lnbih7fSwgcGFnZU1ldGFzKTtcblxuICAgICAgICBmb3JEaWN0KHBhZ2VNZXRhcywgKGtleSwgcGFnZU1ldGEpID0+IHtcblxuICAgICAgICAgICAgaWYgKCEgaXNQcmVzZW50KHBhZ2VNZXRhLnRleHRIaWdobGlnaHRzKSkge1xuICAgICAgICAgICAgICAgIC8vIGxvZy5kZWJ1ZyhcIk5vIHRleHRIaWdobGlnaHRzLiAgQXNzaWduaW5nIGRlZmF1bHQuXCIpO1xuICAgICAgICAgICAgICAgIHBhZ2VNZXRhLnRleHRIaWdobGlnaHRzID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBsZWdhY3kgLyBvbGQgdGV4dCBoaWdobGlnaHRzIGFyZSBnaXZlbiBJRHMuXG4gICAgICAgICAgICBmb3JEaWN0KHBhZ2VNZXRhLnRleHRIaWdobGlnaHRzLCAoXywgdGV4dEhpZ2hsaWdodCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghIHRleHRIaWdobGlnaHQuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9nLmRlYnVnKFwiVGV4dCBoaWdobGlnaHQgZ2l2ZW4gSURcIik7XG4gICAgICAgICAgICAgICAgICAgIHRleHRIaWdobGlnaHQuaWQgPSBIYXNoY29kZXMuY3JlYXRlSUQodGV4dEhpZ2hsaWdodC5yZWN0cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IHRvbyBtdWNoIGJvaWxlcnBsYXRlIGhlcmUuXG5cbiAgICAgICAgICAgIGlmICghIGlzUHJlc2VudChwYWdlTWV0YS5hcmVhSGlnaGxpZ2h0cykpIHtcbiAgICAgICAgICAgICAgICAvLyBsb2cuZGVidWcoXCJObyBhcmVhSGlnaGxpZ2h0cy4gIEFzc2lnbmluZyBkZWZhdWx0LlwiKTtcbiAgICAgICAgICAgICAgICBwYWdlTWV0YS5hcmVhSGlnaGxpZ2h0cyA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXBhZ2VNZXRhLnBhZ2VtYXJrcykge1xuICAgICAgICAgICAgICAgIC8vIGxvZy5kZWJ1ZyhcIk5vIHBhZ2VtYXJrcy4gIEFzc2lnbmluZyBkZWZhdWx0IChlbXB0eSBtYXApXCIpO1xuICAgICAgICAgICAgICAgIHBhZ2VNZXRhLnBhZ2VtYXJrcyA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXBhZ2VNZXRhLnNjcmVlbnNob3RzKSB7XG4gICAgICAgICAgICAgICAgLy8gbG9nLmRlYnVnKFwiTm8gc2NyZWVuc2hvdHMuICBBc3NpZ25pbmcgZGVmYXVsdCAoZW1wdHkgbWFwKVwiKTtcbiAgICAgICAgICAgICAgICBwYWdlTWV0YS5zY3JlZW5zaG90cyA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXBhZ2VNZXRhLm5vdGVzKSB7XG4gICAgICAgICAgICAgICAgLy8gbG9nLmRlYnVnKFwiTm8gbm90ZXMuICBBc3NpZ25pbmcgZGVmYXVsdCAoZW1wdHkgbWFwKVwiKTtcbiAgICAgICAgICAgICAgICBwYWdlTWV0YS5ub3RlcyA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXBhZ2VNZXRhLmNvbW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgLy8gbG9nLmRlYnVnKFwiTm8gY29tbWVudHMuICBBc3NpZ25pbmcgZGVmYXVsdCAoZW1wdHkgbWFwKVwiKTtcbiAgICAgICAgICAgICAgICBwYWdlTWV0YS5jb21tZW50cyA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXBhZ2VNZXRhLnF1ZXN0aW9ucykge1xuICAgICAgICAgICAgICAgIC8vIGxvZy5kZWJ1ZyhcIk5vIHF1ZXN0aW9ucy4gIEFzc2lnbmluZyBkZWZhdWx0IChlbXB0eSBtYXApXCIpO1xuICAgICAgICAgICAgICAgIHBhZ2VNZXRhLnF1ZXN0aW9ucyA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXBhZ2VNZXRhLnJlYWRpbmdQcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIC8vIGxvZy5kZWJ1ZyhcIk5vIHJlYWRpbmdQcm9ncmVzc0xvZy4gIEFzc2lnbmluZyBkZWZhdWx0IChlbXB0eSBtYXApXCIpO1xuICAgICAgICAgICAgICAgIHBhZ2VNZXRhLnJlYWRpbmdQcm9ncmVzcyA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYWdlTWV0YS5wYWdlbWFya3MgPSBQYWdlbWFya3MudXBncmFkZShwYWdlTWV0YS5wYWdlbWFya3MpO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICByZXR1cm4gcGFnZU1ldGFzO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbW9kZWwgZm9yIGEgc3BlY2lmaWMga2V5IHdpdGhpbiBQYWdlTWV0YXMuXG4gICAgICpcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZU1vZGVsKGRvY01ldGE6IERvY01ldGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW1iZXJOYW1lOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogKGFubm90YXRpb25FdmVudDogQW5ub3RhdGlvbkV2ZW50KSA9PiB2b2lkKSB7XG5cbiAgICAgICAgLy8gVE9ETzogaXQgbWlnaHQgYmUgYmV0dGVyIHRvIGhhdmUgdGhpcyByZXR1cm4gYW4gYXJyYXkgb2YgYWxsXG4gICAgICAgIC8vIGN1cnJlbnRseSBrbm93biB2YWx1ZXMgdGhpcyB3YXkgb24gc3RhcnR1cCBJIGNhbiBzZW5kIGV2ZXJ5dGhpbmcgSVxuICAgICAgICAvLyBrbm93IGFib3V0IHdpdGhvdXQgaGF2aW5nIHRvIHJlc29ydCBpbmRleGVzIG9yIHVwZGF0ZSBtYXBzIG11bHRpcGxlXG4gICAgICAgIC8vIHRpbWVzLlxuXG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0Tm90TnVsbChkb2NNZXRhLCBcImRvY01ldGFcIik7XG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0Tm90TnVsbChtZW1iZXJOYW1lLCBcIm1lbWJlck5hbWVcIik7XG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0Tm90TnVsbChjYWxsYmFjaywgXCJjYWxsYmFja1wiKTtcblxuICAgICAgICBmb3JEaWN0KGRvY01ldGEucGFnZU1ldGFzLCAoa2V5LCBwYWdlTWV0YSkgPT4ge1xuXG4gICAgICAgICAgICBjb25zdCBtZW1iZXIgPSBwYWdlTWV0YVttZW1iZXJOYW1lXTtcblxuICAgICAgICAgICAgaWYgKCEgbWVtYmVyKSB7XG4gICAgICAgICAgICAgICAgbG9nLndhcm4oXCJObyBtZW1iZXIgZm9yIGtleTogXCIgKyBrZXksIG1lbWJlck5hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtZW1iZXIuYWRkVHJhY2VMaXN0ZW5lcigodHJhY2VFdmVudDogVHJhY2VFdmVudCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKCEgdHJhY2VFdmVudC5wYXRoLmVuZHNXaXRoKFwiL1wiICsgbWVtYmVyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGFubm90YXRpb25FdmVudCA9IG5ldyBBbm5vdGF0aW9uRXZlbnQoT2JqZWN0LmFzc2lnbih7fSwgdHJhY2VFdmVudCwge1xuICAgICAgICAgICAgICAgICAgICBkb2NNZXRhLFxuICAgICAgICAgICAgICAgICAgICBwYWdlTWV0YSxcbiAgICAgICAgICAgICAgICAgICAgdHJhY2VFdmVudCxcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhhbm5vdGF0aW9uRXZlbnQpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgICAgIH0pLnN5bmMoKTtcblxuICAgICAgICB9KTtcblxuXG4gICAgfVxuXG59XG4iXX0=