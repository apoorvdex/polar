"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Annotation_1 = require("./Annotation");
const PagemarkType_1 = require("./PagemarkType");
const MetadataSerializer_1 = require("./MetadataSerializer");
const PagemarkMode_1 = require("./PagemarkMode");
class Pagemark extends Annotation_1.Annotation {
    constructor(val) {
        super(val);
        this.notes = val.notes;
        this.type = val.type;
        this.percentage = val.percentage;
        this.column = val.percentage;
        this.rect = val.rect;
        this.mode = val.mode;
        this.init(val);
    }
    setup() {
        super.setup();
        if (!this.notes) {
            this.notes = {};
        }
        if (!this.type) {
            this.type = PagemarkType_1.PagemarkType.SINGLE_COLUMN;
        }
        if (!this.mode) {
            this.mode = PagemarkMode_1.PagemarkMode.READ;
        }
        if (!this.percentage) {
            this.percentage = 100;
        }
        if (!this.column) {
            this.column = 0;
        }
    }
    validate() {
        super.validate();
    }
    toString() {
        return MetadataSerializer_1.MetadataSerializer.serialize(this);
    }
}
exports.Pagemark = Pagemark;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFnZW1hcmsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQYWdlbWFyay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUF3QztBQUV4QyxpREFBNEM7QUFFNUMsNkRBQXdEO0FBQ3hELGlEQUE0QztBQUU1QyxNQUFhLFFBQVMsU0FBUSx1QkFBVTtJQTJEcEMsWUFBWSxHQUFRO1FBRWhCLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQU1YLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBS3JCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFbkIsQ0FBQztJQUVELEtBQUs7UUFFRCxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFZCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1NBQ25CO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDWixJQUFJLENBQUMsSUFBSSxHQUFHLDJCQUFZLENBQUMsYUFBYSxDQUFDO1NBQzFDO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDWixJQUFJLENBQUMsSUFBSSxHQUFHLDJCQUFZLENBQUMsSUFBSSxDQUFDO1NBQ2pDO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7U0FDekI7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNkLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ25CO0lBRUwsQ0FBQztJQUVELFFBQVE7UUFDSixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELFFBQVE7UUFDSixPQUFPLHVDQUFrQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDO0NBRUo7QUFuSEQsNEJBbUhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBbm5vdGF0aW9ufSBmcm9tICcuL0Fubm90YXRpb24nO1xuaW1wb3J0IHtOb3RlfSBmcm9tICcuL05vdGUnO1xuaW1wb3J0IHtQYWdlbWFya1R5cGV9IGZyb20gJy4vUGFnZW1hcmtUeXBlJztcbmltcG9ydCB7UGFnZW1hcmtSZWN0fSBmcm9tICcuL1BhZ2VtYXJrUmVjdCc7XG5pbXBvcnQge01ldGFkYXRhU2VyaWFsaXplcn0gZnJvbSAnLi9NZXRhZGF0YVNlcmlhbGl6ZXInO1xuaW1wb3J0IHtQYWdlbWFya01vZGV9IGZyb20gJy4vUGFnZW1hcmtNb2RlJztcblxuZXhwb3J0IGNsYXNzIFBhZ2VtYXJrIGV4dGVuZHMgQW5ub3RhdGlvbiB7XG5cbiAgICAvLyBUT0RPOiBzaG91bGQgcGFnZW1hcmtzIHN1cHBvcnQgdGhlIGZ1bGwgbmVzdGluZyBtb2RlbCB3aGVyZSB3ZSBjYW5cbiAgICAvLyBoYXZlIGNvbW1lbnRzLCBub3RlcywgZmxhc2hjYXJkcywgZXRjPyAgUHJvYmFibHkgbm90IGJ1dCBub3RlcyBtaWdodFxuICAgIC8vIG1ha2Ugc2Vuc2UuXG5cbiAgICAvKipcbiAgICAgKiBUaGUgbm90ZSBmb3IgdGhpcyBhbm5vdGF0aW9uLlxuICAgICAqL1xuICAgIHB1YmxpYyBub3Rlczoge1tpZDogc3RyaW5nXTogTm90ZX07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBwYWdlbWFyay5cbiAgICAgKlxuICAgICAqL1xuICAgIHB1YmxpYyB0eXBlOiBQYWdlbWFya1R5cGU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdG90YWwgcGVyY2VudGFnZSBvZiB0aGUgcGFnZSB0aGF0IGlzIGNvdmVyZWQgd2l0aCB0aGUgcGFnZSBtYXJrLlxuICAgICAqIEZyb20gMCB0byAxMDAuICBUaGlzIGZhY3RvcnMgaW4gdGhlIHRvdGFsIHJvd3MgYW5kIGNvbHVtbnMgb24gdGhlXG4gICAgICogcGFnZSBhbmQgaXMgdGhlIHJhdyBwZXJjZW50YWdlIHZhbHVlIG9mIHRoZSBwYWdlLlxuICAgICAqXG4gICAgICovXG4gICAgcHVibGljIHBlcmNlbnRhZ2U6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb2x1bW4gbnVtYmVyIG9uIHdoaWNoIHRoaXMgcGFnZW1hcmsgaXMgcmVuZGVyZWQuICBUaGlzIGlzIG1vc3RseVxuICAgICAqIG1ldGFkYXRhIGFuZCB3ZSBzaG91bGQgYmUgbWlncmF0aW5nIHRvIFBhZ2VtYXJrUmVjdCBhbmQgUGFnZW1hcmtSYW5nZVxuICAgICAqIHdoaWNoIHN1cHBvcnRzIHJhdyByZW5kZXJpbmcgb2YgdGhlIHBhZ2VtYXJrcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgY29sdW1uOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgUGFnZW1hcmtSZWN0IGZvciB0aGlzIHBhZ2VtYXJrLiBXaGVuIG5vdCBzcGVjaWZpZWQgd2UgdXNlIGEgYm94IG9mXG4gICAgICpcbiAgICAgKiB7IHRvcDogMCwgbGVmdDogMCwgd2lkdGg6IDEwMCwgaGVpZ2h0OiAxMDAgfVxuICAgICAqXG4gICAgICogb3IgdGhlIHdob2xlIHBhZ2UuXG4gICAgICpcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVjdDogUGFnZW1hcmtSZWN0O1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1vZGUgb2YgdGhpcyBwYWdlbWFyayAocmVhZCwgaWdub3JlZCwgZXRjKS5cbiAgICAgKi9cbiAgICBwdWJsaWMgbW9kZTogUGFnZW1hcmtNb2RlO1xuXG4gICAgLyoqXG4gICAgICogQSBiYXRjaCBpcyB1c2VkIHdoZW4gY3JlYXRpbmcgbXVsdGlwbGUgcGFnZW1hcmtzIG92ZXIgbXVsdGlwbGUgcGFnZXMuXG4gICAgICpcbiAgICAgKiBXZSBjYW4gdGhlbiBjaGFuZ2Ugc2V0dGluZ3Mgb24gdGhlIGVudGlyZSwgYmF0Y2ggYXQgb25jZS4gIFRoZSBiYXRjaFxuICAgICAqIGlzIGNyZWF0ZWQgd2l0aCBvbmUgdW5pcXVlIG9wZXJhdGlvbiBhY3Jvc3Mgc2V2ZXJhbCBwYWdlcy5cbiAgICAgKlxuICAgICAqL1xuICAgIHB1YmxpYyBiYXRjaD86IHN0cmluZztcblxuICAgIC8vIFRPRE86IGFkZCBhbiAnaW5hY3RpdmUnIGZpZWxkIHNvIHRoYXQgdGhlIHVzZXIgY2FuIHRvZ2dsZSB0aGUgcGFnZW1hcmtzXG4gICAgLy8gYWN0aXZlIGFuZCBpbmFjdGl2ZSBlYXNpbHkuXG5cbiAgICBjb25zdHJ1Y3Rvcih2YWw6IGFueSkge1xuXG4gICAgICAgIHN1cGVyKHZhbCk7XG5cbiAgICAgICAgLy8gVE9ETzogc2hvdWxkIHBhZ2VtYXJrcyBzdXBwb3J0IHRoZSBmdWxsIG5lc3RpbmcgbW9kZWwgd2hlcmUgd2UgY2FuXG4gICAgICAgIC8vIGhhdmUgY29tbWVudHMsIG5vdGVzLCBmbGFzaGNhcmRzLCBldGM/ICBQcm9iYWJseSBub3QgYnV0IG5vdGVzIG1pZ2h0XG4gICAgICAgIC8vIG1ha2Ugc2Vuc2UuXG5cbiAgICAgICAgdGhpcy5ub3RlcyA9IHZhbC5ub3RlcztcbiAgICAgICAgdGhpcy50eXBlID0gdmFsLnR5cGU7XG4gICAgICAgIHRoaXMucGVyY2VudGFnZSA9IHZhbC5wZXJjZW50YWdlO1xuICAgICAgICB0aGlzLmNvbHVtbiA9IHZhbC5wZXJjZW50YWdlO1xuICAgICAgICB0aGlzLnJlY3QgPSB2YWwucmVjdDtcbiAgICAgICAgdGhpcy5tb2RlID0gdmFsLm1vZGU7XG5cbiAgICAgICAgLy8gVE9ETzogc3VwcG9ydCAncmFuZ2UnIGluIHRoZSBmdXR1cmUgd2hpY2ggaXMgYSBQYWdlbWFya1JhbmdlIHNvIHRoYXRcbiAgICAgICAgLy8gd2UgY2FuIHN0YXJ0IG9mZiByZWFkaW5nIHdpdGhpbiBhIHNtYWxsZXIgcGFnZS5cblxuICAgICAgICB0aGlzLmluaXQodmFsKTtcblxuICAgIH1cblxuICAgIHNldHVwKCkge1xuXG4gICAgICAgIHN1cGVyLnNldHVwKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLm5vdGVzKSB7XG4gICAgICAgICAgICB0aGlzLm5vdGVzID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMudHlwZSkge1xuICAgICAgICAgICAgdGhpcy50eXBlID0gUGFnZW1hcmtUeXBlLlNJTkdMRV9DT0xVTU47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMubW9kZSkge1xuICAgICAgICAgICAgdGhpcy5tb2RlID0gUGFnZW1hcmtNb2RlLlJFQUQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMucGVyY2VudGFnZSkge1xuICAgICAgICAgICAgdGhpcy5wZXJjZW50YWdlID0gMTAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmNvbHVtbikge1xuICAgICAgICAgICAgdGhpcy5jb2x1bW4gPSAwO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICB2YWxpZGF0ZSgpIHtcbiAgICAgICAgc3VwZXIudmFsaWRhdGUoKTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIE1ldGFkYXRhU2VyaWFsaXplci5zZXJpYWxpemUodGhpcyk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFnZW1hcmtSZWYge1xuXG4gICAgcmVhZG9ubHkgcGFnZU51bTogbnVtYmVyO1xuXG4gICAgcmVhZG9ubHkgcGFnZW1hcms6IFBhZ2VtYXJrO1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFnZW1hcmtJRFJlZiB7XG5cbiAgICByZWFkb25seSBwYWdlTnVtOiBudW1iZXI7XG5cbiAgICByZWFkb25seSBpZDogc3RyaW5nO1xuXG59XG4iXX0=