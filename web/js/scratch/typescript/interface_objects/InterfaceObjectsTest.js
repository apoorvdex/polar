"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Assertions_1 = require("../../../test/Assertions");
const chai_1 = require("chai");
describe('Custom objects from JSON', function () {
    it("No custom constructor", function () {
        class Address {
        }
        let address = Object.assign(new Address(), {
            city: "San Francisco",
            state: "California",
            zip: 94107
        });
        chai_1.assert.equal(address.constructor.name, "Address");
        let expected = {
            "city": "San Francisco",
            "state": "California",
            "zip": 94107
        };
        Assertions_1.assertJSON(address, expected);
    });
    it("Test of single interface object from JSON", function () {
        let address = {
            city: "San Francisco",
            state: "California",
            zip: 94107
        };
        let expected = {
            "city": "San Francisco",
            "state": "California",
            "zip": 94107
        };
        Assertions_1.assertJSON(address, expected);
    });
    it("Test of single interface object from JSON", function () {
        let address = [{
                city: "San Francisco",
                state: "California",
                zip: 94107
            }];
        let expected = [{
                "city": "San Francisco",
                "state": "California",
                "zip": 94107
            }];
        Assertions_1.assertJSON(address, expected);
    });
    it("type promotion and methods", function () {
        class Address {
            constructor(city, state, zip) {
                this.city = city;
                this.state = state;
                this.zip = zip;
            }
            format() {
                return `${this.city}, ${this.state} ${this.zip}`;
            }
        }
        let address;
        address = new Address("San Francisco", "CA", 94107);
        chai_1.assert.equal(address.constructor.name, "Address");
        chai_1.assert.notEqual(address.format, null);
        address = {};
        console.log(address.city);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW50ZXJmYWNlT2JqZWN0c1Rlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJJbnRlcmZhY2VPYmplY3RzVGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlEQUFvRDtBQUNwRCwrQkFBNEI7QUFFNUIsUUFBUSxDQUFDLDBCQUEwQixFQUFFO0lBRWpDLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRTtRQUV4QixNQUFNLE9BQU87U0FNWjtRQUVELElBQUksT0FBTyxHQUFZLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxPQUFPLEVBQUUsRUFBRztZQUNqRCxJQUFJLEVBQUUsZUFBZTtZQUNyQixLQUFLLEVBQUUsWUFBWTtZQUNuQixHQUFHLEVBQUUsS0FBSztTQUNiLENBQUMsQ0FBQztRQUVILGFBQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbEQsSUFBSSxRQUFRLEdBQUc7WUFDWCxNQUFNLEVBQUUsZUFBZTtZQUN2QixPQUFPLEVBQUUsWUFBWTtZQUNyQixLQUFLLEVBQUUsS0FBSztTQUNmLENBQUM7UUFFRix1QkFBVSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUVsQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywyQ0FBMkMsRUFBRTtRQVE1QyxJQUFJLE9BQU8sR0FBWTtZQUNuQixJQUFJLEVBQUUsZUFBZTtZQUNyQixLQUFLLEVBQUUsWUFBWTtZQUNuQixHQUFHLEVBQUUsS0FBSztTQUNiLENBQUM7UUFFRixJQUFJLFFBQVEsR0FBRztZQUNYLE1BQU0sRUFBRSxlQUFlO1lBQ3ZCLE9BQU8sRUFBRSxZQUFZO1lBQ3JCLEtBQUssRUFBRSxLQUFLO1NBQ2YsQ0FBQztRQUVGLHVCQUFVLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRWxDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLDJDQUEyQyxFQUFFO1FBUTVDLElBQUksT0FBTyxHQUFjLENBQUM7Z0JBQ3RCLElBQUksRUFBRSxlQUFlO2dCQUNyQixLQUFLLEVBQUUsWUFBWTtnQkFDbkIsR0FBRyxFQUFFLEtBQUs7YUFDYixDQUFDLENBQUM7UUFFSCxJQUFJLFFBQVEsR0FBRyxDQUFDO2dCQUNaLE1BQU0sRUFBRSxlQUFlO2dCQUN2QixPQUFPLEVBQUUsWUFBWTtnQkFDckIsS0FBSyxFQUFFLEtBQUs7YUFDZixDQUFDLENBQUM7UUFFSCx1QkFBVSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUVsQyxDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyw0QkFBNEIsRUFBRTtRQUU3QixNQUFNLE9BQU87WUFNVCxZQUFZLElBQVksRUFBRSxLQUFhLEVBQUUsR0FBVztnQkFDaEQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO2dCQUNuQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUNuQixDQUFDO1lBRUQsTUFBTTtnQkFDRixPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNyRCxDQUFDO1NBRUo7UUFHRCxJQUFJLE9BQWdCLENBQUM7UUFHckIsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFcEQsYUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVsRCxhQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFdEMsT0FBTyxHQUFhLEVBSW5CLENBQUM7UUFFRixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUs5QixDQUFDLENBQUMsQ0FBQztBQUdQLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHthc3NlcnRKU09OfSBmcm9tICcuLi8uLi8uLi90ZXN0L0Fzc2VydGlvbnMnO1xuaW1wb3J0IHthc3NlcnR9IGZyb20gJ2NoYWknO1xuXG5kZXNjcmliZSgnQ3VzdG9tIG9iamVjdHMgZnJvbSBKU09OJywgZnVuY3Rpb24oKSB7XG5cbiAgICBpdChcIk5vIGN1c3RvbSBjb25zdHJ1Y3RvclwiLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgY2xhc3MgQWRkcmVzcyB7XG5cbiAgICAgICAgICAgIHB1YmxpYyByZWFkb25seSBjaXR5Pzogc3RyaW5nO1xuICAgICAgICAgICAgcHVibGljIHJlYWRvbmx5IHN0YXRlPzogc3RyaW5nO1xuICAgICAgICAgICAgcHVibGljIHJlYWRvbmx5IHppcD86IHN0cmluZztcblxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGFkZHJlc3M6IEFkZHJlc3MgPSBPYmplY3QuYXNzaWduKG5ldyBBZGRyZXNzKCksICB7XG4gICAgICAgICAgICBjaXR5OiBcIlNhbiBGcmFuY2lzY29cIixcbiAgICAgICAgICAgIHN0YXRlOiBcIkNhbGlmb3JuaWFcIixcbiAgICAgICAgICAgIHppcDogOTQxMDdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXNzZXJ0LmVxdWFsKGFkZHJlc3MuY29uc3RydWN0b3IubmFtZSwgXCJBZGRyZXNzXCIpO1xuXG4gICAgICAgIGxldCBleHBlY3RlZCA9IHtcbiAgICAgICAgICAgIFwiY2l0eVwiOiBcIlNhbiBGcmFuY2lzY29cIixcbiAgICAgICAgICAgIFwic3RhdGVcIjogXCJDYWxpZm9ybmlhXCIsXG4gICAgICAgICAgICBcInppcFwiOiA5NDEwN1xuICAgICAgICB9O1xuXG4gICAgICAgIGFzc2VydEpTT04oYWRkcmVzcywgZXhwZWN0ZWQpO1xuXG4gICAgfSk7XG5cbiAgICBpdChcIlRlc3Qgb2Ygc2luZ2xlIGludGVyZmFjZSBvYmplY3QgZnJvbSBKU09OXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGludGVyZmFjZSBBZGRyZXNzIHtcbiAgICAgICAgICAgIHJlYWRvbmx5IGNpdHk6IHN0cmluZztcbiAgICAgICAgICAgIHJlYWRvbmx5IHN0YXRlOiBzdHJpbmc7XG4gICAgICAgICAgICByZWFkb25seSB6aXA6IG51bWJlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBhZGRyZXNzOiBBZGRyZXNzID0ge1xuICAgICAgICAgICAgY2l0eTogXCJTYW4gRnJhbmNpc2NvXCIsXG4gICAgICAgICAgICBzdGF0ZTogXCJDYWxpZm9ybmlhXCIsXG4gICAgICAgICAgICB6aXA6IDk0MTA3XG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IGV4cGVjdGVkID0ge1xuICAgICAgICAgICAgXCJjaXR5XCI6IFwiU2FuIEZyYW5jaXNjb1wiLFxuICAgICAgICAgICAgXCJzdGF0ZVwiOiBcIkNhbGlmb3JuaWFcIixcbiAgICAgICAgICAgIFwiemlwXCI6IDk0MTA3XG4gICAgICAgIH07XG5cbiAgICAgICAgYXNzZXJ0SlNPTihhZGRyZXNzLCBleHBlY3RlZCk7XG5cbiAgICB9KVxuXG4gICAgaXQoXCJUZXN0IG9mIHNpbmdsZSBpbnRlcmZhY2Ugb2JqZWN0IGZyb20gSlNPTlwiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICBpbnRlcmZhY2UgQWRkcmVzcyB7XG4gICAgICAgICAgICByZWFkb25seSBjaXR5OiBzdHJpbmc7XG4gICAgICAgICAgICByZWFkb25seSBzdGF0ZTogc3RyaW5nO1xuICAgICAgICAgICAgcmVhZG9ubHkgemlwOiBudW1iZXI7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYWRkcmVzczogQWRkcmVzc1tdID0gW3tcbiAgICAgICAgICAgIGNpdHk6IFwiU2FuIEZyYW5jaXNjb1wiLFxuICAgICAgICAgICAgc3RhdGU6IFwiQ2FsaWZvcm5pYVwiLFxuICAgICAgICAgICAgemlwOiA5NDEwN1xuICAgICAgICB9XTtcblxuICAgICAgICBsZXQgZXhwZWN0ZWQgPSBbe1xuICAgICAgICAgICAgXCJjaXR5XCI6IFwiU2FuIEZyYW5jaXNjb1wiLFxuICAgICAgICAgICAgXCJzdGF0ZVwiOiBcIkNhbGlmb3JuaWFcIixcbiAgICAgICAgICAgIFwiemlwXCI6IDk0MTA3XG4gICAgICAgIH1dO1xuXG4gICAgICAgIGFzc2VydEpTT04oYWRkcmVzcywgZXhwZWN0ZWQpO1xuXG4gICAgfSlcblxuICAgIGl0KFwidHlwZSBwcm9tb3Rpb24gYW5kIG1ldGhvZHNcIiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgY2xhc3MgQWRkcmVzcyB7XG5cbiAgICAgICAgICAgIHJlYWRvbmx5IGNpdHk6IHN0cmluZztcbiAgICAgICAgICAgIHJlYWRvbmx5IHN0YXRlOiBzdHJpbmc7XG4gICAgICAgICAgICByZWFkb25seSB6aXA6IG51bWJlcjtcblxuICAgICAgICAgICAgY29uc3RydWN0b3IoY2l0eTogc3RyaW5nLCBzdGF0ZTogc3RyaW5nLCB6aXA6IG51bWJlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuY2l0eSA9IGNpdHk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICAgICAgICAgIHRoaXMuemlwID0gemlwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3JtYXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuY2l0eX0sICR7dGhpcy5zdGF0ZX0gJHt0aGlzLnppcH1gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCBhZGRyZXNzOiBBZGRyZXNzO1xuXG5cbiAgICAgICAgYWRkcmVzcyA9IG5ldyBBZGRyZXNzKFwiU2FuIEZyYW5jaXNjb1wiLCBcIkNBXCIsIDk0MTA3KTtcblxuICAgICAgICBhc3NlcnQuZXF1YWwoYWRkcmVzcy5jb25zdHJ1Y3Rvci5uYW1lLCBcIkFkZHJlc3NcIik7XG5cbiAgICAgICAgYXNzZXJ0Lm5vdEVxdWFsKGFkZHJlc3MuZm9ybWF0LCBudWxsKTtcblxuICAgICAgICBhZGRyZXNzID0gPEFkZHJlc3M+IHtcbiAgICAgICAgICAgIC8vIGNpdHk6IFwiU2FuIEZyYW5jaXNjb1wiLFxuICAgICAgICAgICAgLy8gc3RhdGU6IFwiQ0FcIixcbiAgICAgICAgICAgIC8vIHppcDogOTQxMDdcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zb2xlLmxvZyhhZGRyZXNzLmNpdHkpO1xuXG4gICAgICAgIC8vIEl0IElTIG51bGwgc28gdGhpcyBpcyBhIGZsYXcgb2YgdGhlIGxhbmd1YWdlIHVuZm9ydHVuYXRlbHkuXG4gICAgICAgIC8vYXNzZXJ0Lm5vdEVxdWFsKGFkZHJlc3MuZm9ybWF0LCBudWxsKTtcblxuICAgIH0pO1xuXG5cbn0pO1xuIl19