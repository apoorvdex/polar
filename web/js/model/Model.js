"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const DocMetas_1 = require("../metadata/DocMetas");
const Reactor_1 = require("../reactor/Reactor");
const PagemarkType_1 = require("../metadata/PagemarkType");
const Preconditions_1 = require("../Preconditions");
const Pagemarks_1 = require("../metadata/Pagemarks");
const DocMetaDescriber_1 = require("../metadata/DocMetaDescriber");
const Logger_1 = require("../logger/Logger");
const ModelPersisterFactory_1 = require("./ModelPersisterFactory");
const Optional_1 = require("../util/ts/Optional");
const DocFormatFactory_1 = require("../docformat/DocFormatFactory");
const log = Logger_1.Logger.create();
const NULL_DOC_META = DocMetas_1.DocMetas.create('0x0001', 0);
class Model {
    constructor(persistenceLayer) {
        this.docMeta = NULL_DOC_META;
        this.docMetaPromise = Promise.resolve(NULL_DOC_META);
        this.persistenceLayer = persistenceLayer;
        this.modelPersisterFactory = new ModelPersisterFactory_1.ModelPersisterFactory(persistenceLayer);
        this.reactor = new Reactor_1.Reactor();
        this.reactor.registerEvent('documentLoaded');
        this.reactor.registerEvent('createPagemark');
        this.reactor.registerEvent('erasePagemark');
    }
    documentLoaded(fingerprint, nrPages, currentPageNumber, docDetail) {
        return __awaiter(this, void 0, void 0, function* () {
            log.notice("Document loaded with fingerprint: " + fingerprint);
            let docMeta = yield this.persistenceLayer.getDocMeta(fingerprint);
            if (!docMeta) {
                console.warn("New document found. Creating initial DocMeta");
                docMeta = DocMetas_1.DocMetas.create(fingerprint, nrPages, Optional_1.Optional.of(docDetail).map(current => current.filename)
                    .getOrUndefined());
                yield this.persistenceLayer.write(fingerprint, docMeta);
            }
            if (docMeta === undefined) {
                throw new Error("Unable to load DocMeta: " + fingerprint);
            }
            this.docMeta = docMeta;
            log.info("Description of doc loaded: " + DocMetaDescriber_1.DocMetaDescriber.describe(this.docMeta));
            log.info("Document loaded: ", fingerprint);
            const modelPersister = this.modelPersisterFactory.create(docMeta);
            this.docMeta = modelPersister.docMeta;
            this.docMetaPromise = Promise.resolve(docMeta);
            this.handleExtendedMetadataExtraction();
            this.reactor.dispatchEvent('documentLoaded', {
                fingerprint,
                nrPages,
                currentPageNumber,
                docMeta: this.docMeta
            });
            return this.docMeta;
        });
    }
    handleExtendedMetadataExtraction() {
        const docFormat = DocFormatFactory_1.DocFormatFactory.getInstance();
        const currentPageElement = docFormat.getCurrentPageElement();
        if (!currentPageElement) {
            log.warn("No current page element");
            return;
        }
        const pageNum = docFormat.getPageNumFromPageElement(currentPageElement);
        if (pageNum !== 1) {
            log.warn("Working with wrong page number: " + pageNum);
            return;
        }
        DocMetas_1.DocMetas.withBatchedMutations(this.docMeta, () => {
            const pageMeta = this.docMeta.getPageMeta(pageNum);
            if (!pageMeta.pageInfo.dimensions) {
                const currentPageDetail = docFormat.getCurrentPageDetail();
                if (currentPageDetail.dimensions) {
                    pageMeta.pageInfo.dimensions = currentPageDetail.dimensions;
                }
            }
        });
    }
    registerListenerForDocumentLoaded(eventListener) {
        this.reactor.addEventListener('documentLoaded', eventListener);
    }
    createPagemark(pageNum, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!options.percentage) {
                options.percentage = 100;
            }
            log.info("Model sees createPagemark");
            this.assertPageNum(pageNum);
            const pagemark = Pagemarks_1.Pagemarks.create({
                type: PagemarkType_1.PagemarkType.SINGLE_COLUMN,
                percentage: options.percentage,
                column: 0
            });
            const docMeta = yield this.docMetaPromise;
            Pagemarks_1.Pagemarks.updatePagemark(docMeta, pageNum, pagemark);
            this.reactor.dispatchEvent('createPagemark', { pageNum, pagemark });
        });
    }
    createPagemarksForRange(end, percentage) {
        return __awaiter(this, void 0, void 0, function* () {
            const docMeta = yield this.docMetaPromise;
            const pagemarkRefs = Pagemarks_1.Pagemarks.updatePagemarksForRange(docMeta, end, percentage);
            for (const pagemarkRef of pagemarkRefs) {
                this.reactor.dispatchEvent('createPagemark', pagemarkRef);
            }
        });
    }
    erasePagemark(pageNum) {
        Preconditions_1.Preconditions.assertNumber(pageNum, "pageNum");
        log.info("Model sees erasePagemark");
        this.assertPageNum(pageNum);
        if (this.docMeta) {
            Pagemarks_1.Pagemarks.deletePagemark(this.docMeta, pageNum);
            this.reactor.dispatchEvent('erasePagemark', { pageNum });
        }
    }
    assertPageNum(pageNum) {
        if (pageNum == null) {
            throw new Error("Must specify page pageNum");
        }
        if (pageNum <= 0) {
            throw new Error("Page numbers begin at 1");
        }
    }
}
exports.Model = Model;
//# sourceMappingURL=data:application/json;base64,