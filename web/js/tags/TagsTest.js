"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Tags_1 = require("./Tags");
const chai_1 = require("chai");
describe('RegExp', function () {
    it("test unicode literal", function () {
        Tags_1.Tags.assertValid("#deck:microsoft");
        Tags_1.Tags.assertValid("#hashtag");
        Tags_1.Tags.assertValid("#Azərbaycanca");
        Tags_1.Tags.assertValid("#mûǁae");
        Tags_1.Tags.assertValid("#Čeština");
        Tags_1.Tags.assertValid("#Ċaoiṁín");
        Tags_1.Tags.assertValid("#Caoiṁín");
        Tags_1.Tags.assertValid("#ta\u0301im");
        Tags_1.Tags.assertValid("#hag\u0303ua");
        Tags_1.Tags.assertValid("#caf\u00E9");
        Tags_1.Tags.assertValid("#\u05e2\u05d1\u05e8\u05d9\u05ea");
        Tags_1.Tags.assertValid("#\u05d5\u05db\u05d5\u05f3");
        Tags_1.Tags.assertValid("#\u05de\u05f4\u05db");
        Tags_1.Tags.assertValid("#ประเทศไทย");
        Tags_1.Tags.assertValid("#ฟรี");
        Tags_1.Tags.assertValid("#日本語ハッシュタグ");
        chai_1.assert.throws(() => Tags_1.Tags.assertValid("#deck::microsoft"));
        chai_1.assert.throws(() => Tags_1.Tags.assertValid("#deck:foo:bar"));
        chai_1.assert.throws(() => Tags_1.Tags.assertValid("#deck::foo"));
    });
    it("tags with two colons", function () {
        chai_1.assert.throws(() => Tags_1.Tags.assertValid("#bar:cat:dog"));
    });
});
describe('type tags', function () {
    it("basic functionality", function () {
        chai_1.assert.equal(Tags_1.Tags.stripTypedLabel("#foo:bar").get(), "#foobar");
        chai_1.assert.equal(Tags_1.Tags.stripTypedLabel("#:bar").get(), "#:bar");
        chai_1.assert.equal(Tags_1.Tags.stripTypedLabel("#bar:").get(), "#bar:");
        chai_1.assert.ok(!Tags_1.Tags.stripTypedLabel("#bar:cat:dog").isPresent());
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFnc1Rlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJUYWdzVGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUE0QjtBQUM1QiwrQkFBNEI7QUFFNUIsUUFBUSxDQUFDLFFBQVEsRUFBRTtJQUVmLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRTtRQUV2QixXQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFFcEMsV0FBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3QixXQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ2xDLFdBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0IsV0FBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3QixXQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdCLFdBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDN0IsV0FBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNoQyxXQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2pDLFdBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDL0IsV0FBSSxDQUFDLFdBQVcsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1FBS3BELFdBQUksQ0FBQyxXQUFXLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUM5QyxXQUFJLENBQUMsV0FBVyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFPeEMsV0FBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMvQixXQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pCLFdBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7UUFNL0IsYUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztRQUUxRCxhQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUN2RCxhQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUV4RCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxzQkFBc0IsRUFBRTtRQUN2QixhQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDLENBQUMsQ0FBQztBQUVQLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLFdBQVcsRUFBRTtJQUVsQixFQUFFLENBQUMscUJBQXFCLEVBQUU7UUFFdEIsYUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2hFLGFBQU0sQ0FBQyxLQUFLLENBQUMsV0FBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMzRCxhQUFNLENBQUMsS0FBSyxDQUFDLFdBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFM0QsYUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFFLFdBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUVsRSxDQUFDLENBQUMsQ0FBQztBQUVQLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUYWdzfSBmcm9tICcuL1RhZ3MnO1xuaW1wb3J0IHthc3NlcnR9IGZyb20gJ2NoYWknO1xuXG5kZXNjcmliZSgnUmVnRXhwJywgZnVuY3Rpb24oKSB7XG5cbiAgICBpdChcInRlc3QgdW5pY29kZSBsaXRlcmFsXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIFRhZ3MuYXNzZXJ0VmFsaWQoXCIjZGVjazptaWNyb3NvZnRcIik7XG5cbiAgICAgICAgVGFncy5hc3NlcnRWYWxpZChcIiNoYXNodGFnXCIpO1xuICAgICAgICBUYWdzLmFzc2VydFZhbGlkKFwiI0F6yZlyYmF5Y2FuY2FcIik7XG4gICAgICAgIFRhZ3MuYXNzZXJ0VmFsaWQoXCIjbcO7x4FhZVwiKTtcbiAgICAgICAgVGFncy5hc3NlcnRWYWxpZChcIiPEjGXFoXRpbmFcIik7XG4gICAgICAgIFRhZ3MuYXNzZXJ0VmFsaWQoXCIjxIphb2nhuYHDrW5cIik7XG4gICAgICAgIFRhZ3MuYXNzZXJ0VmFsaWQoXCIjQ2FvaeG5gcOtblwiKTtcbiAgICAgICAgVGFncy5hc3NlcnRWYWxpZChcIiN0YVxcdTAzMDFpbVwiKTtcbiAgICAgICAgVGFncy5hc3NlcnRWYWxpZChcIiNoYWdcXHUwMzAzdWFcIik7XG4gICAgICAgIFRhZ3MuYXNzZXJ0VmFsaWQoXCIjY2FmXFx1MDBFOVwiKTtcbiAgICAgICAgVGFncy5hc3NlcnRWYWxpZChcIiNcXHUwNWUyXFx1MDVkMVxcdTA1ZThcXHUwNWQ5XFx1MDVlYVwiKTsgLy8gXCIjSGVicmV3XCJcbiAgICAgICAgLy8gYXNzZXJ0Q2FwdHVyZUNvdW50KDMsIFJlZ2V4LlZBTElEX0hBU0hUQUcsXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICBcIiNcXHUwNWQwXFx1MDViMlxcdTA1ZTlcXHUwNWI2XFx1MDVjMVxcdTA1ZThcIik7IC8vIHdpdGggbWFya3NcbiAgICAgICAgLy8gYXNzZXJ0Q2FwdHVyZUNvdW50KDMsIFJlZ2V4LlZBTElEX0hBU0hUQUcsXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICBcIiNcXHUwNWUyXFx1MDViN1xcdTA1ZGNcXHUwNWJlXFx1MDVkOVxcdTA1YjBcXHUwNWQzXFx1MDViNVxcdTA1ZDlcIik7IC8vIHdpdGggbWFxYWYgMDViZVxuICAgICAgICBUYWdzLmFzc2VydFZhbGlkKFwiI1xcdTA1ZDVcXHUwNWRiXFx1MDVkNVxcdTA1ZjNcIik7IC8vIHdpdGggZ2VyZXNoIDA1ZjNcbiAgICAgICAgVGFncy5hc3NlcnRWYWxpZChcIiNcXHUwNWRlXFx1MDVmNFxcdTA1ZGJcIik7IC8vIHdpdGggZ2Vyc2hheWltIDA1ZjRcbiAgICAgICAgLy8gYXNzZXJ0Q2FwdHVyZUNvdW50KDMsIFJlZ2V4LlZBTElEX0hBU0hUQUcsXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICBcIiNcXHUwNjI3XFx1MDY0NFxcdTA2MzlcXHUwNjMxXFx1MDYyOFxcdTA2NGFcXHUwNjI5XCIpOyAvLyBcIiNBcmFiaWNcIlxuICAgICAgICAvLyBhc3NlcnRDYXB0dXJlQ291bnQoMywgUmVnZXguVkFMSURfSEFTSFRBRyxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgIFwiI1xcdTA2MmRcXHUwNjI3XFx1MDY0NFxcdTA2NGFcXHUwNjI3XFx1MDY0YlwiKTsgLy8gd2l0aCBtYXJrXG4gICAgICAgIC8vIGFzc2VydENhcHR1cmVDb3VudCgzLCBSZWdleC5WQUxJRF9IQVNIVEFHLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgXCIjXFx1MDY0YVxcdTA2NDBcXHVmYmIxXFx1MDY0MFxcdTA2NGVcXHUwNjcxXCIpOyAvLyB3aXRoIHByZXMuIGZvcm1cbiAgICAgICAgVGFncy5hc3NlcnRWYWxpZChcIiPguJvguKPguLDguYDguJfguKjguYTguJfguKJcIik7XG4gICAgICAgIFRhZ3MuYXNzZXJ0VmFsaWQoXCIj4Lif4Lij4Li1XCIpOyAvLyB3aXRoIG1hcmtcbiAgICAgICAgVGFncy5hc3NlcnRWYWxpZChcIiPml6XmnKzoqp7jg4/jg4Pjgrfjg6Xjgr/jgrBcIik7XG5cbiAgICAgICAgLy8gVE9ETzogdGhlIHR3aXR0ZXItdGV4dCBKQXZhIGxpYnJhcnkgc2F5cyB0aGlzIGlzIHZhbGlkIGJ1dCBub3QgdGhlXG4gICAgICAgIC8vIEpTIGxpYnJhcnkuXG4gICAgICAgIC8vIFRhZ3MuYXNzZXJ0VmFsaWQoXCLvvIPml6XmnKzoqp7jg4/jg4Pjgrfjg6Xjgr/jgrBcIik7XG5cbiAgICAgICAgYXNzZXJ0LnRocm93cygoKSA9PiBUYWdzLmFzc2VydFZhbGlkKFwiI2RlY2s6Om1pY3Jvc29mdFwiKSk7XG5cbiAgICAgICAgYXNzZXJ0LnRocm93cygoKSA9PiBUYWdzLmFzc2VydFZhbGlkKFwiI2RlY2s6Zm9vOmJhclwiKSk7XG4gICAgICAgIGFzc2VydC50aHJvd3MoKCkgPT4gVGFncy5hc3NlcnRWYWxpZChcIiNkZWNrOjpmb29cIikpO1xuXG4gICAgfSk7XG5cbiAgICBpdChcInRhZ3Mgd2l0aCB0d28gY29sb25zXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICBhc3NlcnQudGhyb3dzKCgpID0+IFRhZ3MuYXNzZXJ0VmFsaWQoXCIjYmFyOmNhdDpkb2dcIikpO1xuICAgIH0pO1xuXG59KTtcblxuZGVzY3JpYmUoJ3R5cGUgdGFncycsIGZ1bmN0aW9uKCkge1xuXG4gICAgaXQoXCJiYXNpYyBmdW5jdGlvbmFsaXR5XCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGFzc2VydC5lcXVhbChUYWdzLnN0cmlwVHlwZWRMYWJlbChcIiNmb286YmFyXCIpLmdldCgpLCBcIiNmb29iYXJcIik7XG4gICAgICAgIGFzc2VydC5lcXVhbChUYWdzLnN0cmlwVHlwZWRMYWJlbChcIiM6YmFyXCIpLmdldCgpLCBcIiM6YmFyXCIpO1xuICAgICAgICBhc3NlcnQuZXF1YWwoVGFncy5zdHJpcFR5cGVkTGFiZWwoXCIjYmFyOlwiKS5nZXQoKSwgXCIjYmFyOlwiKTtcblxuICAgICAgICBhc3NlcnQub2soISBUYWdzLnN0cmlwVHlwZWRMYWJlbChcIiNiYXI6Y2F0OmRvZ1wiKS5pc1ByZXNlbnQoKSk7XG5cbiAgICB9KTtcblxufSk7XG5cbiJdfQ==