"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const twitter_text_1 = __importDefault(require("twitter-text"));
const Preconditions_1 = require("../Preconditions");
const Optional_1 = require("../util/ts/Optional");
const Dictionaries_1 = require("../util/Dictionaries");
class Tags {
    static assertValid(label) {
        if (!this.validate(label).isPresent()) {
            throw new Error("Invalid tag: " + label);
        }
    }
    static validate(label) {
        if (!Preconditions_1.isPresent(label)) {
            return Optional_1.Optional.empty();
        }
        if (!label.startsWith('#')) {
            label = '#' + label;
        }
        const strippedLabel = this.stripTypedLabel(label);
        if (!strippedLabel.isPresent()) {
            return Optional_1.Optional.empty();
        }
        if (twitter_text_1.default.isValidHashtag(strippedLabel.get())) {
            return Optional_1.Optional.of(label);
        }
        return Optional_1.Optional.empty();
    }
    static validateTag(tag) {
        if (this.validate(tag.label).isPresent()) {
            return Optional_1.Optional.of(tag);
        }
        return Optional_1.Optional.empty();
    }
    static tagsAreValid(...tags) {
        return tags.map(tag => this.validateTag(tag).isPresent())
            .reduce((acc, curr) => !acc ? false : curr, true);
    }
    static findInvalidTags(...tags) {
        return tags.filter(tag => !this.validateTag(tag).isPresent());
    }
    static findValidTags(...tags) {
        return tags.filter(tag => this.validateTag(tag).isPresent());
    }
    static toMap(tags) {
        const result = {};
        for (const tag of tags) {
            result[tag.id] = tag;
        }
        return result;
    }
    static union(a, b) {
        const result = {};
        Dictionaries_1.Dictionaries.putAll(Tags.toMap(a), result);
        Dictionaries_1.Dictionaries.putAll(Tags.toMap(b), result);
        return Object.values(result);
    }
    static toIDs(tags) {
        return tags.map(current => current.id);
    }
    static stripTypedLabel(label) {
        const match = label.match(/:/g);
        if (match && match.length > 1) {
            return Optional_1.Optional.empty();
        }
        return Optional_1.Optional.of(label.replace(/^#([^:/]+):([^:]+)$/g, '#$1$2'));
    }
    static parseTypedTag(value) {
        value = value.replace("#", "");
        const split = value.split(":");
        return Optional_1.Optional.of({
            name: split[0],
            value: split[1]
        });
    }
}
exports.Tags = Tags;
//# sourceMappingURL=data:application/json;base64,