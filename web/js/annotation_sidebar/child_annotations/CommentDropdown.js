"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const reactstrap_1 = require("reactstrap");
const Logger_1 = require("../../logger/Logger");
const ConfirmPopover_1 = require("../../ui/confirm/ConfirmPopover");
const log = Logger_1.Logger.create();
const Styles = {
    DropdownMenu: {
        zIndex: 999,
        fontSize: '14px'
    },
};
class CommentDropdown extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.open = false;
        this.selected = 'none';
        this.toggle = this.toggle.bind(this);
        this.select = this.select.bind(this);
        this.onDelete = this.onDelete.bind(this);
        this.onDeleteSelected = this.onDeleteSelected.bind(this);
        this.state = {
            open: this.open,
            selected: this.selected,
        };
    }
    render() {
        const toggleID = this.props.id + '-dropdown-toggle';
        return (React.createElement("div", { className: "text-right" },
            React.createElement(reactstrap_1.Dropdown, { id: this.props.id, isOpen: this.state.open, toggle: this.toggle },
                React.createElement(reactstrap_1.DropdownToggle, { color: "light", className: "doc-dropdown-button btn text-muted pl-1 pr-1", id: toggleID },
                    React.createElement("i", { className: "fas fa-ellipsis-h" })),
                React.createElement(reactstrap_1.DropdownMenu, { right: true },
                    React.createElement(reactstrap_1.DropdownItem, { className: "text-danger", onClick: () => this.onDeleteSelected() }, "Delete"))),
            React.createElement(ConfirmPopover_1.ConfirmPopover, { open: this.state.selected === 'delete', target: toggleID, title: "Are you sure you want to delete this comment? ", onCancel: () => this.select('none'), onConfirm: () => this.onDelete() })));
    }
    onDeleteSelected() {
        this.select('delete');
    }
    onDelete() {
        this.props.onDelete(this.props.comment);
        this.select('none');
    }
    toggle() {
        this.open = !this.state.open;
        this.refresh();
    }
    select(selected) {
        this.selected = selected;
        this.refresh();
    }
    refresh() {
        this.setState({
            open: this.open,
            selected: this.selected
        });
    }
}
exports.CommentDropdown = CommentDropdown;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWVudERyb3Bkb3duLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQ29tbWVudERyb3Bkb3duLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSw2Q0FBK0I7QUFDL0IsMkNBQXlGO0FBQ3pGLGdEQUEyQztBQUczQyxvRUFBK0Q7QUFFL0QsTUFBTSxHQUFHLEdBQUcsZUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRTVCLE1BQU0sTUFBTSxHQUFjO0lBRXRCLFlBQVksRUFBRTtRQUNWLE1BQU0sRUFBRSxHQUFHO1FBQ1gsUUFBUSxFQUFFLE1BQU07S0FDbkI7Q0FFSixDQUFDO0FBRUYsTUFBYSxlQUFnQixTQUFRLEtBQUssQ0FBQyxTQUF5QjtJQUtoRSxZQUFZLEtBQWEsRUFBRSxPQUFZO1FBQ25DLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFKbEIsU0FBSSxHQUFZLEtBQUssQ0FBQztRQUN0QixhQUFRLEdBQW1CLE1BQU0sQ0FBQztRQUt0QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV6RCxJQUFJLENBQUMsS0FBSyxHQUFHO1lBQ1QsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQzFCLENBQUM7SUFFTixDQUFDO0lBRU0sTUFBTTtRQUVULE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLGtCQUFrQixDQUFDO1FBRXBELE9BQU8sQ0FFSCw2QkFBSyxTQUFTLEVBQUMsWUFBWTtZQUV2QixvQkFBQyxxQkFBUSxJQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFDakIsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUN2QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07Z0JBRXpCLG9CQUFDLDJCQUFjLElBQUMsS0FBSyxFQUFDLE9BQU8sRUFDYixTQUFTLEVBQUMsOENBQThDLEVBQ3hELEVBQUUsRUFBRSxRQUFRO29CQUV4QiwyQkFBRyxTQUFTLEVBQUMsbUJBQW1CLEdBQUssQ0FFeEI7Z0JBRWpCLG9CQUFDLHlCQUFZLElBQUMsS0FBSztvQkFFZixvQkFBQyx5QkFBWSxJQUFDLFNBQVMsRUFBQyxhQUFhLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxhQUU3RCxDQUVKLENBR1I7WUFFWCxvQkFBQywrQkFBYyxJQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQ3RDLE1BQU0sRUFBRSxRQUFRLEVBQ2hCLEtBQUssRUFBQyxnREFBZ0QsRUFDdEQsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQ25DLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FFakQsQ0FFVCxDQUFDO0lBRU4sQ0FBQztJQUVPLGdCQUFnQjtRQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFTyxRQUFRO1FBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFTyxNQUFNO1FBRVYsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBRTlCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUVuQixDQUFDO0lBRU8sTUFBTSxDQUFDLFFBQXdCO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRU8sT0FBTztRQUVYLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDVixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7U0FDMUIsQ0FBQyxDQUFDO0lBRVAsQ0FBQztDQUVKO0FBOUZELDBDQThGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7RHJvcGRvd24sIERyb3Bkb3duSXRlbSwgRHJvcGRvd25NZW51LCBEcm9wZG93blRvZ2dsZSwgVG9vbHRpcH0gZnJvbSAncmVhY3RzdHJhcCc7XG5pbXBvcnQge0xvZ2dlcn0gZnJvbSAnLi4vLi4vbG9nZ2VyL0xvZ2dlcic7XG5pbXBvcnQge0lTdHlsZU1hcH0gZnJvbSAnLi4vLi4vcmVhY3QvSVN0eWxlTWFwJztcbmltcG9ydCB7RG9jQW5ub3RhdGlvbn0gZnJvbSAnLi4vRG9jQW5ub3RhdGlvbic7XG5pbXBvcnQge0NvbmZpcm1Qb3BvdmVyfSBmcm9tICcuLi8uLi91aS9jb25maXJtL0NvbmZpcm1Qb3BvdmVyJztcblxuY29uc3QgbG9nID0gTG9nZ2VyLmNyZWF0ZSgpO1xuXG5jb25zdCBTdHlsZXM6IElTdHlsZU1hcCA9IHtcblxuICAgIERyb3Bkb3duTWVudToge1xuICAgICAgICB6SW5kZXg6IDk5OSxcbiAgICAgICAgZm9udFNpemU6ICcxNHB4J1xuICAgIH0sXG5cbn07XG5cbmV4cG9ydCBjbGFzcyBDb21tZW50RHJvcGRvd24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcblxuICAgIHByaXZhdGUgb3BlbjogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgc2VsZWN0ZWQ6IFNlbGVjdGVkT3B0aW9uID0gJ25vbmUnO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IElQcm9wcywgY29udGV4dDogYW55KSB7XG4gICAgICAgIHN1cGVyKHByb3BzLCBjb250ZXh0KTtcblxuICAgICAgICB0aGlzLnRvZ2dsZSA9IHRoaXMudG9nZ2xlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc2VsZWN0ID0gdGhpcy5zZWxlY3QuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vbkRlbGV0ZSA9IHRoaXMub25EZWxldGUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vbkRlbGV0ZVNlbGVjdGVkID0gdGhpcy5vbkRlbGV0ZVNlbGVjdGVkLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG9wZW46IHRoaXMub3BlbixcbiAgICAgICAgICAgIHNlbGVjdGVkOiB0aGlzLnNlbGVjdGVkLFxuICAgICAgICB9O1xuXG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcigpIHtcblxuICAgICAgICBjb25zdCB0b2dnbGVJRCA9IHRoaXMucHJvcHMuaWQgKyAnLWRyb3Bkb3duLXRvZ2dsZSc7XG5cbiAgICAgICAgcmV0dXJuIChcblxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LXJpZ2h0XCI+XG5cbiAgICAgICAgICAgICAgICA8RHJvcGRvd24gaWQ9e3RoaXMucHJvcHMuaWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlzT3Blbj17dGhpcy5zdGF0ZS5vcGVufVxuICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGU9e3RoaXMudG9nZ2xlfT5cblxuICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd25Ub2dnbGUgY29sb3I9XCJsaWdodFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkb2MtZHJvcGRvd24tYnV0dG9uIGJ0biB0ZXh0LW11dGVkIHBsLTEgcHItMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD17dG9nZ2xlSUR9PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYXMgZmEtZWxsaXBzaXMtaFwiPjwvaT5cblxuICAgICAgICAgICAgICAgICAgICA8L0Ryb3Bkb3duVG9nZ2xlPlxuXG4gICAgICAgICAgICAgICAgICAgIDxEcm9wZG93bk1lbnUgcmlnaHQ+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW0gY2xhc3NOYW1lPVwidGV4dC1kYW5nZXJcIiBvbkNsaWNrPXsoKSA9PiB0aGlzLm9uRGVsZXRlU2VsZWN0ZWQoKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVsZXRlXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0Ryb3Bkb3duSXRlbT5cblxuICAgICAgICAgICAgICAgICAgICA8L0Ryb3Bkb3duTWVudT5cblxuXG4gICAgICAgICAgICAgICAgPC9Ecm9wZG93bj5cblxuICAgICAgICAgICAgICAgIDxDb25maXJtUG9wb3ZlciBvcGVuPXt0aGlzLnN0YXRlLnNlbGVjdGVkID09PSAnZGVsZXRlJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PXt0b2dnbGVJRH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgY29tbWVudD8gXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DYW5jZWw9eygpID0+IHRoaXMuc2VsZWN0KCdub25lJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ29uZmlybT17KCkgPT4gdGhpcy5vbkRlbGV0ZSgpfS8+XG5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICk7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIG9uRGVsZXRlU2VsZWN0ZWQoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0KCdkZWxldGUnKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uRGVsZXRlKCkge1xuICAgICAgICB0aGlzLnByb3BzLm9uRGVsZXRlKHRoaXMucHJvcHMuY29tbWVudCk7XG4gICAgICAgIHRoaXMuc2VsZWN0KCdub25lJyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0b2dnbGUoKSB7XG5cbiAgICAgICAgdGhpcy5vcGVuID0gISB0aGlzLnN0YXRlLm9wZW47XG5cbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIHNlbGVjdChzZWxlY3RlZDogU2VsZWN0ZWRPcHRpb24pIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlZnJlc2goKSB7XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBvcGVuOiB0aGlzLm9wZW4sXG4gICAgICAgICAgICBzZWxlY3RlZDogdGhpcy5zZWxlY3RlZFxuICAgICAgICB9KTtcblxuICAgIH1cblxufVxuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIGNvbW1lbnQ6IERvY0Fubm90YXRpb247XG4gICAgb25EZWxldGU6IChjb21tZW50OiBEb2NBbm5vdGF0aW9uKSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcblxuICAgIG9wZW46IGJvb2xlYW47XG4gICAgc2VsZWN0ZWQ6IFNlbGVjdGVkT3B0aW9uO1xuXG59XG5cbnR5cGUgU2VsZWN0ZWRPcHRpb24gPSAnZGVsZXRlJyB8ICdub25lJztcblxuIl19