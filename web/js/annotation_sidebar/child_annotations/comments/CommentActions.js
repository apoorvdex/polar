"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../../../logger/Logger");
const Refs_1 = require("../../../metadata/Refs");
const Comments_1 = require("../../../metadata/Comments");
const ISODateTimeStrings_1 = require("../../../metadata/ISODateTimeStrings");
const DocMetas_1 = require("../../../metadata/DocMetas");
const log = Logger_1.Logger.create();
class CommentActions {
    static delete(comment) {
        log.info("Comment deleted: ", comment);
        delete comment.pageMeta.comments[comment.id];
    }
    static create(annotation, html) {
        const ref = Refs_1.Refs.createFromAnnotationType(annotation.id, annotation.annotationType);
        const comment = Comments_1.Comments.createHTMLComment(html, ref);
        annotation.pageMeta.comments[comment.id] = comment;
    }
    static update(docMeta, annotation, html, existingComment) {
        const ref = Refs_1.Refs.createFromAnnotationType(annotation.id, annotation.annotationType);
        const comment = Comments_1.Comments.createHTMLComment(html, ref, existingComment.created, ISODateTimeStrings_1.ISODateTimeStrings.create());
        DocMetas_1.DocMetas.withBatchedMutations(docMeta, () => {
            delete annotation.pageMeta.comments[existingComment.id];
            annotation.pageMeta.comments[comment.id] = comment;
        });
    }
}
exports.CommentActions = CommentActions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWVudEFjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDb21tZW50QWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUE4QztBQUU5QyxpREFBNEM7QUFFNUMseURBQW9EO0FBQ3BELDZFQUF3RTtBQUN4RSx5REFBb0Q7QUFHcEQsTUFBTSxHQUFHLEdBQUcsZUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBSzVCLE1BQWEsY0FBYztJQUVoQixNQUFNLENBQUMsTUFBTSxDQUFDLE9BQXNCO1FBQ3ZDLEdBQUcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkMsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBeUIsRUFBRSxJQUFZO1FBRXhELE1BQU0sR0FBRyxHQUFHLFdBQUksQ0FBQyx3QkFBd0IsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUNiLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVyRSxNQUFNLE9BQU8sR0FBRyxtQkFBUSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN0RCxVQUFVLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDO0lBRXZELENBQUM7SUFFTSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQWdCLEVBQ2hCLFVBQXlCLEVBQ3pCLElBQVksRUFDWixlQUF3QjtRQUV6QyxNQUFNLEdBQUcsR0FBRyxXQUFJLENBQUMsd0JBQXdCLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFDYixVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFckUsTUFBTSxPQUFPLEdBQUcsbUJBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQ0osR0FBRyxFQUNILGVBQWUsQ0FBQyxPQUFPLEVBQ3ZCLHVDQUFrQixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFFeEUsbUJBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1lBRXhDLE9BQU8sVUFBVSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3hELFVBQVUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUM7UUFFdkQsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDO0NBRUo7QUF2Q0Qsd0NBdUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtMb2dnZXJ9IGZyb20gXCIuLi8uLi8uLi9sb2dnZXIvTG9nZ2VyXCI7XG5pbXBvcnQge0RvY0Fubm90YXRpb259IGZyb20gXCIuLi8uLi9Eb2NBbm5vdGF0aW9uXCI7XG5pbXBvcnQge1JlZnN9IGZyb20gXCIuLi8uLi8uLi9tZXRhZGF0YS9SZWZzXCI7XG5pbXBvcnQge0NvbW1lbnR9IGZyb20gXCIuLi8uLi8uLi9tZXRhZGF0YS9Db21tZW50XCI7XG5pbXBvcnQge0NvbW1lbnRzfSBmcm9tIFwiLi4vLi4vLi4vbWV0YWRhdGEvQ29tbWVudHNcIjtcbmltcG9ydCB7SVNPRGF0ZVRpbWVTdHJpbmdzfSBmcm9tIFwiLi4vLi4vLi4vbWV0YWRhdGEvSVNPRGF0ZVRpbWVTdHJpbmdzXCI7XG5pbXBvcnQge0RvY01ldGFzfSBmcm9tIFwiLi4vLi4vLi4vbWV0YWRhdGEvRG9jTWV0YXNcIjtcbmltcG9ydCB7RG9jTWV0YX0gZnJvbSBcIi4uLy4uLy4uL21ldGFkYXRhL0RvY01ldGFcIjtcblxuY29uc3QgbG9nID0gTG9nZ2VyLmNyZWF0ZSgpO1xuXG4vKipcbiAqIEFjdGlvbnMgdGhhdCBjYW4gYmUgcGVyZm9ybWVkIG9uIGNvbW1lbnRzIGluIHRoZSBVSVxuICovXG5leHBvcnQgY2xhc3MgQ29tbWVudEFjdGlvbnMge1xuXG4gICAgcHVibGljIHN0YXRpYyBkZWxldGUoY29tbWVudDogRG9jQW5ub3RhdGlvbikge1xuICAgICAgICBsb2cuaW5mbyhcIkNvbW1lbnQgZGVsZXRlZDogXCIsIGNvbW1lbnQpO1xuICAgICAgICBkZWxldGUgY29tbWVudC5wYWdlTWV0YS5jb21tZW50c1tjb21tZW50LmlkXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShhbm5vdGF0aW9uOiBEb2NBbm5vdGF0aW9uLCBodG1sOiBzdHJpbmcpIHtcblxuICAgICAgICBjb25zdCByZWYgPSBSZWZzLmNyZWF0ZUZyb21Bbm5vdGF0aW9uVHlwZShhbm5vdGF0aW9uLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uLmFubm90YXRpb25UeXBlKTtcblxuICAgICAgICBjb25zdCBjb21tZW50ID0gQ29tbWVudHMuY3JlYXRlSFRNTENvbW1lbnQoaHRtbCwgcmVmKTtcbiAgICAgICAgYW5ub3RhdGlvbi5wYWdlTWV0YS5jb21tZW50c1tjb21tZW50LmlkXSA9IGNvbW1lbnQ7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHVwZGF0ZShkb2NNZXRhOiBEb2NNZXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGFubm90YXRpb246IERvY0Fubm90YXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nQ29tbWVudDogQ29tbWVudCkge1xuXG4gICAgICAgIGNvbnN0IHJlZiA9IFJlZnMuY3JlYXRlRnJvbUFubm90YXRpb25UeXBlKGFubm90YXRpb24uaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFubm90YXRpb24uYW5ub3RhdGlvblR5cGUpO1xuXG4gICAgICAgIGNvbnN0IGNvbW1lbnQgPSBDb21tZW50cy5jcmVhdGVIVE1MQ29tbWVudChodG1sLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdDb21tZW50LmNyZWF0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJU09EYXRlVGltZVN0cmluZ3MuY3JlYXRlKCkpO1xuXG4gICAgICAgIERvY01ldGFzLndpdGhCYXRjaGVkTXV0YXRpb25zKGRvY01ldGEsICgpID0+IHtcblxuICAgICAgICAgICAgZGVsZXRlIGFubm90YXRpb24ucGFnZU1ldGEuY29tbWVudHNbZXhpc3RpbmdDb21tZW50LmlkXTtcbiAgICAgICAgICAgIGFubm90YXRpb24ucGFnZU1ldGEuY29tbWVudHNbY29tbWVudC5pZF0gPSBjb21tZW50O1xuXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG59XG4iXX0=