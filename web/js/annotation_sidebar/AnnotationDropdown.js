"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const reactstrap_1 = require("reactstrap");
const ConfirmPopover_1 = require("../../../web/js/ui/confirm/ConfirmPopover");
const Logger_1 = require("../../../web/js/logger/Logger");
const log = Logger_1.Logger.create();
const Styles = {
    DropdownMenu: {
        zIndex: 999,
        fontSize: '14px'
    },
};
class AnnotationDropdown extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.open = false;
        this.selected = 'none';
        this.toggle = this.toggle.bind(this);
        this.select = this.select.bind(this);
        this.onDelete = this.onDelete.bind(this);
        this.onCreateComment = this.onCreateComment.bind(this);
        this.onCreateFlashcard = this.onCreateFlashcard.bind(this);
        this.onJumpToContext = this.onJumpToContext.bind(this);
        this.state = {
            open: this.open,
            selected: this.selected,
        };
    }
    render() {
        const toggleID = this.props.id + '-dropdown-toggle';
        return (React.createElement("div", { className: "text-right" },
            React.createElement(reactstrap_1.Dropdown, { id: this.props.id, isOpen: this.state.open, toggle: this.toggle },
                React.createElement(reactstrap_1.DropdownToggle, { color: "light", className: "doc-dropdown-button btn text-muted pl-1 pr-1", id: toggleID },
                    React.createElement("i", { className: "fas fa-ellipsis-h" })),
                React.createElement(reactstrap_1.DropdownMenu, { right: true },
                    React.createElement(reactstrap_1.DropdownItem, { onClick: () => this.onCreateComment() }, "Create comment"),
                    React.createElement(reactstrap_1.DropdownItem, { onClick: () => this.onCreateFlashcard() }, "Create flashcard"),
                    React.createElement(reactstrap_1.DropdownItem, { onClick: () => this.onJumpToContext() }, "Jump to context"),
                    React.createElement(reactstrap_1.DropdownItem, { divider: true }),
                    React.createElement(reactstrap_1.DropdownItem, { className: "text-danger", onClick: () => this.onDeleteSelected() }, "Delete"))),
            React.createElement(ConfirmPopover_1.ConfirmPopover, { open: this.state.selected === 'delete', target: toggleID, title: "Are you sure you want to delete this annotation? ", subtitle: "This will also delete all associated comments and flashcards.", onCancel: () => this.select('none'), onConfirm: () => this.onDelete() })));
    }
    onDeleteSelected() {
        this.select('delete');
    }
    onCreateComment() {
        this.select('none');
        this.props.onCreateComment(this.props.annotation);
    }
    onCreateFlashcard() {
        this.select('none');
        this.props.onCreateFlashcard(this.props.annotation);
    }
    onJumpToContext() {
        this.select('none');
        this.props.onJumpToContext(this.props.annotation);
    }
    onDelete() {
        this.select('none');
        this.props.onDelete(this.props.annotation);
    }
    toggle() {
        this.open = !this.state.open;
        this.refresh();
    }
    select(selected) {
        this.selected = selected;
        this.refresh();
    }
    refresh() {
        this.setState({
            open: this.open,
            selected: this.selected
        });
    }
}
exports.AnnotationDropdown = AnnotationDropdown;
//# sourceMappingURL=data:application/json;base64,