"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const DocAnnotationIndex_1 = require("./DocAnnotationIndex");
class DocAnnotationIndexes {
    static delete(docAnnotationIndex, ...ids) {
        const docAnnotationMap = Object.assign({}, docAnnotationIndex.docAnnotationMap);
        for (const id of ids) {
            delete docAnnotationMap[id];
        }
        const tmpIndex = new DocAnnotationIndex_1.DocAnnotationIndex(docAnnotationMap, Object.values(docAnnotationMap));
        return this.rebuild(tmpIndex);
    }
    static rebuild(docAnnotationIndex, ...docAnnotations) {
        const docAnnotationMap = Object.assign({}, docAnnotationIndex.docAnnotationMap);
        let sortedDocAnnotations = [];
        for (const docAnnotation of docAnnotations) {
            docAnnotationMap[docAnnotation.id] = docAnnotation;
        }
        sortedDocAnnotations.push(...Object.values(docAnnotationMap));
        function sortScore(item) {
            return (item.pageNum * 100000) + (item.position.y * 100) + item.position.x;
        }
        sortedDocAnnotations = sortedDocAnnotations.sort((a, b) => {
            const diff = sortScore(a) - sortScore(b);
            if (diff === 0) {
                return a.id.localeCompare(b.id);
            }
            return diff;
        });
        return new DocAnnotationIndex_1.DocAnnotationIndex(docAnnotationMap, sortedDocAnnotations);
    }
}
exports.DocAnnotationIndexes = DocAnnotationIndexes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9jQW5ub3RhdGlvbkluZGV4ZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEb2NBbm5vdGF0aW9uSW5kZXhlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZEQUF3RDtBQUd4RCxNQUFhLG9CQUFvQjtJQUV0QixNQUFNLENBQUMsTUFBTSxDQUFDLGtCQUFzQyxFQUN0QyxHQUFHLEdBQWE7UUFFakMsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRWhGLEtBQUssTUFBTSxFQUFFLElBQUksR0FBRyxFQUFFO1lBQ2xCLE9BQU8sZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDL0I7UUFFRCxNQUFNLFFBQVEsR0FBRyxJQUFJLHVDQUFrQixDQUFDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBQzNGLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVsQyxDQUFDO0lBRU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxrQkFBc0MsRUFDdEMsR0FBRyxjQUErQjtRQUVwRCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDaEYsSUFBSSxvQkFBb0IsR0FBeUIsRUFBRSxDQUFDO1FBR3BELEtBQUssTUFBTSxhQUFhLElBQUksY0FBYyxFQUFFO1lBQ3hDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsR0FBRyxhQUFhLENBQUM7U0FDdEQ7UUFFRCxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztRQUU5RCxTQUFTLFNBQVMsQ0FBQyxJQUFtQjtZQUNsQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQy9FLENBQUM7UUFHRCxvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFFdEQsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUV6QyxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7Z0JBQ1osT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDbkM7WUFFRCxPQUFPLElBQUksQ0FBQztRQUVoQixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSx1Q0FBa0IsQ0FBQyxnQkFBZ0IsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0lBRTFFLENBQUM7Q0FFSjtBQWxERCxvREFrREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RvY0Fubm90YXRpb25JbmRleH0gZnJvbSAnLi9Eb2NBbm5vdGF0aW9uSW5kZXgnO1xuaW1wb3J0IHtEb2NBbm5vdGF0aW9uLCBTb3J0ZWREb2NBbm5vdGF0aW9uc30gZnJvbSAnLi9Eb2NBbm5vdGF0aW9uJztcblxuZXhwb3J0IGNsYXNzIERvY0Fubm90YXRpb25JbmRleGVzIHtcblxuICAgIHB1YmxpYyBzdGF0aWMgZGVsZXRlKGRvY0Fubm90YXRpb25JbmRleDogRG9jQW5ub3RhdGlvbkluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmlkczogc3RyaW5nW10pOiBEb2NBbm5vdGF0aW9uSW5kZXgge1xuXG4gICAgICAgIGNvbnN0IGRvY0Fubm90YXRpb25NYXAgPSBPYmplY3QuYXNzaWduKHt9LCBkb2NBbm5vdGF0aW9uSW5kZXguZG9jQW5ub3RhdGlvbk1hcCk7XG5cbiAgICAgICAgZm9yIChjb25zdCBpZCBvZiBpZHMpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBkb2NBbm5vdGF0aW9uTWFwW2lkXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRtcEluZGV4ID0gbmV3IERvY0Fubm90YXRpb25JbmRleChkb2NBbm5vdGF0aW9uTWFwLCBPYmplY3QudmFsdWVzKGRvY0Fubm90YXRpb25NYXApKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVidWlsZCh0bXBJbmRleCk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlYnVpbGQoZG9jQW5ub3RhdGlvbkluZGV4OiBEb2NBbm5vdGF0aW9uSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRvY0Fubm90YXRpb25zOiBEb2NBbm5vdGF0aW9uW10pOiBEb2NBbm5vdGF0aW9uSW5kZXgge1xuXG4gICAgICAgIGNvbnN0IGRvY0Fubm90YXRpb25NYXAgPSBPYmplY3QuYXNzaWduKHt9LCBkb2NBbm5vdGF0aW9uSW5kZXguZG9jQW5ub3RhdGlvbk1hcCk7XG4gICAgICAgIGxldCBzb3J0ZWREb2NBbm5vdGF0aW9uczogU29ydGVkRG9jQW5ub3RhdGlvbnMgPSBbXTtcblxuXG4gICAgICAgIGZvciAoY29uc3QgZG9jQW5ub3RhdGlvbiBvZiBkb2NBbm5vdGF0aW9ucykge1xuICAgICAgICAgICAgZG9jQW5ub3RhdGlvbk1hcFtkb2NBbm5vdGF0aW9uLmlkXSA9IGRvY0Fubm90YXRpb247XG4gICAgICAgIH1cblxuICAgICAgICBzb3J0ZWREb2NBbm5vdGF0aW9ucy5wdXNoKC4uLk9iamVjdC52YWx1ZXMoZG9jQW5ub3RhdGlvbk1hcCkpO1xuXG4gICAgICAgIGZ1bmN0aW9uIHNvcnRTY29yZShpdGVtOiBEb2NBbm5vdGF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gKGl0ZW0ucGFnZU51bSAqIDEwMDAwMCkgKyAoaXRlbS5wb3NpdGlvbi55ICogMTAwKSArIGl0ZW0ucG9zaXRpb24ueDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5vdyBzb3J0IHRoZSBkb2MgYW5ub3RhdGlvbnMgc28gdGhhdCB0aGV5J3JlIGluIHRoZSBvcmRlciB3ZSBuZWVkIHRoZW0uXG4gICAgICAgIHNvcnRlZERvY0Fubm90YXRpb25zID0gc29ydGVkRG9jQW5ub3RhdGlvbnMuc29ydCgoYSwgYikgPT4ge1xuXG4gICAgICAgICAgICBjb25zdCBkaWZmID0gc29ydFNjb3JlKGEpIC0gc29ydFNjb3JlKGIpO1xuXG4gICAgICAgICAgICBpZiAoZGlmZiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhLmlkLmxvY2FsZUNvbXBhcmUoYi5pZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBkaWZmO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBuZXcgRG9jQW5ub3RhdGlvbkluZGV4KGRvY0Fubm90YXRpb25NYXAsIHNvcnRlZERvY0Fubm90YXRpb25zKTtcblxuICAgIH1cblxufVxuIl19