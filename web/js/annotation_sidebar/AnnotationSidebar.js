"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Logger_1 = require("../logger/Logger");
const DocAnnotations_1 = require("./DocAnnotations");
const DocAnnotationIndex_1 = require("./DocAnnotationIndex");
const DocAnnotationIndexes_1 = require("./DocAnnotationIndexes");
const AreaHighlightModel_1 = require("../highlights/area/model/AreaHighlightModel");
const MutationType_1 = require("../proxies/MutationType");
const TextHighlightModel_1 = require("../highlights/text/model/TextHighlightModel");
const Preconditions_1 = require("../Preconditions");
const DocAnnotationComponent_1 = require("./annotations/DocAnnotationComponent");
const CommentModel_1 = require("./CommentModel");
const Refs_1 = require("../metadata/Refs");
const FlashcardModel_1 = require("./FlashcardModel");
const ExportButton_1 = require("../ui/export/ExportButton");
const Exporters_1 = require("../metadata/exporter/Exporters");
const SplitBar_1 = require("../../../apps/repository/js/SplitBar");
const log = Logger_1.Logger.create();
class AnnotationSidebar extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.docAnnotationIndex = new DocAnnotationIndex_1.DocAnnotationIndex();
        this.scrollToAnnotation = this.scrollToAnnotation.bind(this);
        this.onExport = this.onExport.bind(this);
        const annotations = DocAnnotations_1.DocAnnotations.getAnnotationsForPage(props.docMeta);
        this.docAnnotationIndex
            = DocAnnotationIndexes_1.DocAnnotationIndexes.rebuild(this.docAnnotationIndex, ...annotations);
        this.state = {
            annotations: this.docAnnotationIndex.sortedDocAnnotation
        };
    }
    componentDidMount() {
        new AreaHighlightModel_1.AreaHighlightModel().registerListener(this.props.docMeta, annotationEvent => {
            const docAnnotation = this.convertAnnotation(annotationEvent.value, annotationValue => DocAnnotations_1.DocAnnotations.createFromAreaHighlight(annotationValue, annotationEvent.pageMeta));
            this.handleAnnotationEvent(annotationEvent.id, annotationEvent.traceEvent.mutationType, docAnnotation);
        });
        new TextHighlightModel_1.TextHighlightModel().registerListener(this.props.docMeta, annotationEvent => {
            const docAnnotation = this.convertAnnotation(annotationEvent.value, annotationValue => DocAnnotations_1.DocAnnotations.createFromTextHighlight(annotationValue, annotationEvent.pageMeta));
            this.handleAnnotationEvent(annotationEvent.id, annotationEvent.traceEvent.mutationType, docAnnotation);
        });
        new CommentModel_1.CommentModel().registerListener(this.props.docMeta, annotationEvent => {
            const comment = annotationEvent.value || annotationEvent.previousValue;
            const childDocAnnotation = DocAnnotations_1.DocAnnotations.createFromComment(comment, annotationEvent.pageMeta);
            this.handleChildAnnotationEvent(annotationEvent.id, annotationEvent.traceEvent.mutationType, childDocAnnotation);
        });
        new FlashcardModel_1.FlashcardModel().registerListener(this.props.docMeta, annotationEvent => {
            const flashcard = annotationEvent.value || annotationEvent.previousValue;
            const childDocAnnotation = DocAnnotations_1.DocAnnotations.createFromFlashcard(flashcard, annotationEvent.pageMeta);
            this.handleChildAnnotationEvent(annotationEvent.id, annotationEvent.traceEvent.mutationType, childDocAnnotation);
        });
    }
    convertAnnotation(value, converter) {
        if (!Preconditions_1.isPresent(value)) {
            return undefined;
        }
        return converter(value);
    }
    handleChildAnnotationEvent(id, mutationType, childDocAnnotation) {
        if (!childDocAnnotation.ref) {
            log.warn("Annotation hidden from sidebar: ", childDocAnnotation);
            return;
        }
        const ref = Refs_1.Refs.parse(childDocAnnotation.ref);
        const annotation = this.docAnnotationIndex.docAnnotationMap[ref.value];
        if (!annotation) {
            log.warn("No annotation for ref:", annotation);
            return;
        }
        if (!annotation.children) {
            annotation.children = [];
        }
        if (mutationType !== MutationType_1.MutationType.DELETE) {
            annotation.children.push(childDocAnnotation);
            annotation.children.sort((c0, c1) => -c0.created.localeCompare(c1.created));
        }
        else {
            annotation.children =
                annotation.children.filter(current => current.id !== id);
        }
        this.reload();
    }
    handleAnnotationEvent(id, mutationType, docAnnotation) {
        if (mutationType === MutationType_1.MutationType.INITIAL) {
            return;
        }
        else if (mutationType === MutationType_1.MutationType.DELETE) {
            this.docAnnotationIndex
                = DocAnnotationIndexes_1.DocAnnotationIndexes.delete(this.docAnnotationIndex, id);
            this.reload();
        }
        else {
            this.refresh(docAnnotation);
        }
    }
    refresh(docAnnotation) {
        this.docAnnotationIndex
            = DocAnnotationIndexes_1.DocAnnotationIndexes.rebuild(this.docAnnotationIndex, docAnnotation);
        this.reload();
    }
    reload() {
        this.setState({
            annotations: this.docAnnotationIndex.sortedDocAnnotation
        });
    }
    scrollToAnnotation(id, pageNum) {
        const selector = `.page div[data-annotation-id='${id}']`;
        const pageElements = Array.from(document.querySelectorAll(".page"));
        const pageElement = pageElements[pageNum - 1];
        if (!pageElement) {
            log.error(`Could not find page ${pageNum} of N pages: ${pageElements.length}`);
            return;
        }
        this.scrollToElement(pageElement);
        const annotationElement = document.querySelector(selector);
        this.scrollToElement(annotationElement);
    }
    scrollToElement(element) {
        element.scrollIntoView({
            behavior: 'auto',
            block: 'center',
            inline: 'center'
        });
    }
    createItems(annotations) {
        const result = [];
        annotations.map(annotation => {
            result.push(React.createElement(DocAnnotationComponent_1.DocAnnotationComponent, { key: annotation.id, annotation: annotation, docMeta: this.props.docMeta }));
        });
        return result;
    }
    onExport(path, format) {
        Exporters_1.Exporters.doExport(path, format, this.props.docMeta)
            .catch(err => log.error(err));
    }
    render() {
        const { annotations } = this.state;
        const AnnotationHeader = () => {
            if (annotations.length === 0) {
                return (React.createElement("div", null));
            }
            return (React.createElement("div", { className: "p-1 pb-2 mb-3 border-bottom pl-1 pr-1" },
                React.createElement(SplitBar_1.SplitBar, null,
                    React.createElement(SplitBar_1.SplitBarLeft, null,
                        React.createElement("div", { style: { fontWeight: 'bold', fontSize: '14px' } }, "Annotations")),
                    React.createElement(SplitBar_1.SplitBarRight, null,
                        React.createElement(ExportButton_1.ExportButton, { onExport: (path, format) => this.onExport(path, format) })))));
        };
        return (React.createElement("div", { id: "annotation-manager", className: "annotation-sidebar" },
            React.createElement(AnnotationHeader, null),
            React.createElement("div", { className: "annotations" }, this.createItems(annotations))));
    }
}
exports.AnnotationSidebar = AnnotationSidebar;
//# sourceMappingURL=data:application/json;base64,