"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Logger_1 = require("../../logger/Logger");
const FlashcardType_1 = require("../../metadata/FlashcardType");
const FlashcardButtons_1 = require("./FlashcardButtons");
const FlashcardTypeSelector_1 = require("./FlashcardTypeSelector");
const RichTextArea_1 = require("../RichTextArea");
const FlashcardInput_1 = require("./FlashcardInput");
const log = Logger_1.Logger.create();
class FlashcardInputForFrontAndBack extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.flashcardType = FlashcardType_1.FlashcardType.BASIC_FRONT_BACK;
        this.fields = { front: "", back: "" };
        this.onCreate = this.onCreate.bind(this);
        this.onCancel = this.onCancel.bind(this);
        this.state = {
            iter: 0,
        };
    }
    render() {
        const { id } = this.props;
        return (React.createElement("div", { id: "annotation-flashcard-box", className: "" },
            React.createElement(RichTextArea_1.RichTextArea, { label: "front", id: `front-${this.props.id}`, autofocus: true, onKeyDown: event => this.onKeyDown(event), onChange: (html) => this.fields.front = html }),
            React.createElement(RichTextArea_1.RichTextArea, { label: "back", id: `back-${this.props.id}`, onKeyDown: event => this.onKeyDown(event), onChange: (html) => this.fields.back = html }),
            React.createElement("div", { style: FlashcardInput_1.Styles.BottomBar },
                React.createElement("div", { style: FlashcardInput_1.Styles.BottomBarItem },
                    React.createElement(FlashcardTypeSelector_1.FlashcardTypeSelector, { flashcardType: this.flashcardType, onChangeFlashcardType: flashcardType => this.props.onFlashcardChangeType(flashcardType) })),
                React.createElement("div", { style: FlashcardInput_1.Styles.BottomBarItemRight, className: "text-right" },
                    React.createElement(FlashcardButtons_1.FlashcardButtons, { onCancel: () => this.onCancel(), onCreate: () => this.onCreate() })))));
    }
    onKeyDown(event) {
        if (event.getModifierState("Control") && event.key === "Enter") {
            this.onCreate();
        }
    }
    onCreate() {
        if (this.props.onFlashcardCreated) {
            this.props.onFlashcardCreated(this.flashcardType, this.fields);
        }
        this.reset();
        this.setState({
            iter: this.state.iter + 1
        });
    }
    onCancel() {
        if (this.props.onCancel) {
            this.props.onCancel();
        }
        this.reset();
    }
    reset() {
        this.fields = { front: "", back: "" };
    }
}
exports.FlashcardInputForFrontAndBack = FlashcardInputForFrontAndBack;
//# sourceMappingURL=data:application/json;base64,