"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Logger_1 = require("../../logger/Logger");
const Button_1 = __importDefault(require("reactstrap/lib/Button"));
const FlashcardType_1 = require("../../metadata/FlashcardType");
const FlashcardButtons_1 = require("./FlashcardButtons");
const FlashcardTypeSelector_1 = require("./FlashcardTypeSelector");
const RichTextArea_1 = require("../RichTextArea");
const FlashcardInput_1 = require("./FlashcardInput");
const reactstrap_1 = require("reactstrap");
const Ranges_1 = require("../..//highlights/text/selection/Ranges");
const log = Logger_1.Logger.create();
class FlashcardInputForCloze extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.flashcardType = FlashcardType_1.FlashcardType.CLOZE;
        this.fields = { text: "" };
        this.counter = 1;
        this.onCreate = this.onCreate.bind(this);
        this.onCancel = this.onCancel.bind(this);
        this.state = {
            iter: 0,
        };
    }
    render() {
        const { id } = this.props;
        return (React.createElement("div", { id: "annotation-flashcard-box", className: "" },
            React.createElement(RichTextArea_1.RichTextArea, { id: `text-${this.props.id}`, autofocus: true, onKeyDown: event => this.onKeyDown(event), onRichTextMutator: richTextMutator => this.richTextMutator = richTextMutator, onChange: (html) => this.fields.text = html }),
            React.createElement("div", { style: FlashcardInput_1.Styles.BottomBar },
                React.createElement("div", { style: FlashcardInput_1.Styles.BottomBarItem },
                    React.createElement(FlashcardTypeSelector_1.FlashcardTypeSelector, { flashcardType: this.flashcardType, onChangeFlashcardType: flashcardType => this.props.onFlashcardChangeType(flashcardType) })),
                React.createElement("div", { style: FlashcardInput_1.Styles.BottomBarItem, className: "ml-1" },
                    React.createElement(Button_1.default, { id: `button-${this.props.id}`, color: "light", size: "sm", onClick: () => this.onClozeDelete(), className: "ml-1 p-1 border" }, "[\u2026]"),
                    React.createElement(reactstrap_1.UncontrolledTooltip, { placement: "auto", delay: { show: 750, hide: 0 }, target: `button-${this.props.id}` },
                        "Create cloze deletion for text ",
                        React.createElement("span", { className: "text-muted" }, "Control+Shift+C"))),
                React.createElement("div", { style: FlashcardInput_1.Styles.BottomBarItemRight, className: "text-right" },
                    React.createElement(FlashcardButtons_1.FlashcardButtons, { onCancel: () => this.onCancel(), onCreate: () => this.onCreate() })))));
    }
    onClozeDelete() {
        const sel = window.getSelection();
        const range = sel.getRangeAt(0);
        const textNodes = Ranges_1.Ranges.getTextNodes(range);
        if (textNodes.length === 0) {
            return;
        }
        const c = this.counter++;
        const prefix = document.createTextNode(`{{c${c}::`);
        const suffix = document.createTextNode('}}');
        const firstNode = textNodes[0];
        const lastNode = textNodes[textNodes.length - 1];
        firstNode.parentNode.insertBefore(prefix, firstNode);
        lastNode.parentNode.insertBefore(suffix, lastNode.nextSibling);
        sel.removeAllRanges();
        this.fields.text = this.richTextMutator.currentValue();
    }
    onKeyDown(event) {
        if (this.isKeyboardControlShiftC(event)) {
            this.onClozeDelete();
        }
        if (event.getModifierState("Control") && event.key === "Enter") {
            this.onCreate();
        }
    }
    isKeyboardControlShiftC(event) {
        return event.getModifierState("Control") &&
            event.getModifierState("Shift") &&
            event.key === "C";
    }
    onCreate() {
        if (this.props.onFlashcardCreated) {
            this.props.onFlashcardCreated(this.flashcardType, this.fields);
        }
        this.reset();
        this.setState({
            iter: this.state.iter + 1
        });
    }
    onCancel() {
        if (this.props.onCancel) {
            this.props.onCancel();
        }
        this.reset();
    }
    reset() {
        this.fields = { text: "" };
    }
}
exports.FlashcardInputForCloze = FlashcardInputForCloze;
//# sourceMappingURL=data:application/json;base64,