"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const AnnotationSidebars_1 = require("./AnnotationSidebars");
const react_moment_1 = __importDefault(require("react-moment"));
const Refs_1 = require("../metadata/Refs");
const AnnotationFlashcardBox_1 = require("./flashcard_input/AnnotationFlashcardBox");
const Flashcards_1 = require("../metadata/Flashcards");
const AnnotationDropdown_1 = require("./AnnotationDropdown");
const AnnotationType_1 = require("../metadata/AnnotationType");
const reactstrap_1 = require("reactstrap");
const RendererAnalytics_1 = require("../ga/RendererAnalytics");
const CommentIcon_1 = require("../ui/standard_icons/CommentIcon");
const FlashcardIcon_1 = require("../ui/standard_icons/FlashcardIcon");
const FlashcardType_1 = require("../metadata/FlashcardType");
const Functions_1 = require("../util/Functions");
const Logger_1 = require("../logger/Logger");
const NullCollapse_1 = require("../ui/null_collapse/NullCollapse");
const CreateComment_1 = require("./child_annotations/comments/CreateComment");
const CommentActions_1 = require("./child_annotations/comments/CommentActions");
const log = Logger_1.Logger.create();
const Styles = {
    button: {
        paddingTop: '4px',
        color: 'red !important',
        fontSize: '15px'
    },
    barBody: {
        display: 'flex'
    },
    barChild: {
        marginTop: 'auto',
        marginBottom: 'auto',
    }
};
class AnnotationControlBar extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.onComment = this.onComment.bind(this);
        this.state = {
            activeInputComponent: 'none'
        };
    }
    render() {
        const { annotation } = this.props;
        return (React.createElement("div", { className: "annotation-control-bar" },
            React.createElement("div", { style: Styles.barBody, className: "flexbar annotation-buttons border-top pt-1 pb-2" },
                React.createElement("div", { style: Styles.barChild, className: "text-muted annotation-context-link" },
                    React.createElement("a", { href: "#", onClick: () => this.onJumpToContext(annotation) },
                        React.createElement(react_moment_1.default, { withTitle: true, titleFormat: "D MMM YYYY hh:MM A", fromNow: true }, annotation.created))),
                React.createElement("div", { style: Styles.barChild, className: "flexbar-right" },
                    React.createElement(reactstrap_1.Button, { className: "text-muted p-1", title: "Create comment", size: "sm", color: "light", style: Styles.button, onClick: () => this.toggleActiveInputComponent('comment') },
                        React.createElement(CommentIcon_1.CommentIcon, null)),
                    React.createElement(reactstrap_1.Button, { className: "ml-1 text-muted p-1", title: "Create flashcard", style: Styles.button, size: "sm", color: "light", onClick: () => this.toggleActiveInputComponent('flashcard') },
                        React.createElement(FlashcardIcon_1.FlashcardIcon, null)),
                    React.createElement("div", { className: "ml-1" },
                        React.createElement(AnnotationDropdown_1.AnnotationDropdown, { id: 'annotation-dropdown-' + annotation.id, annotation: annotation, onDelete: () => this.onDelete(annotation), onCreateComment: () => this.toggleActiveInputComponent('comment'), onCreateFlashcard: () => this.toggleActiveInputComponent('flashcard'), onJumpToContext: () => this.onJumpToContext(annotation) })))),
            React.createElement(CreateComment_1.CreateComment, { id: annotation.id, active: this.state.activeInputComponent === 'comment', onCancel: () => this.toggleActiveInputComponent('none'), onComment: (html) => this.onComment(html) }),
            React.createElement(NullCollapse_1.NullCollapse, { open: this.state.activeInputComponent === 'flashcard' },
                React.createElement(AnnotationFlashcardBox_1.AnnotationFlashcardBox, { id: annotation.id, onCancel: () => this.toggleActiveInputComponent('none'), onFlashcardCreated: (type, fields) => this.onFlashcardCreated(type, fields) }))));
    }
    onDelete(annotation) {
        if (annotation.annotationType === AnnotationType_1.AnnotationType.TEXT_HIGHLIGHT) {
            delete annotation.pageMeta.textHighlights[annotation.id];
        }
        if (annotation.annotationType === AnnotationType_1.AnnotationType.AREA_HIGHLIGHT) {
            delete annotation.pageMeta.areaHighlights[annotation.id];
        }
    }
    onJumpToContext(annotation) {
        AnnotationSidebars_1.AnnotationSidebars.scrollToAnnotation(annotation.id, annotation.pageNum);
    }
    toggleActiveInputComponent(activeInputComponent) {
        this.setState({
            activeInputComponent: this.state.activeInputComponent === activeInputComponent ? 'none' : activeInputComponent
        });
    }
    onComment(html, existingComment) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'annotations', action: 'comment-created' });
        const { annotation } = this.props;
        CommentActions_1.CommentActions.create(annotation, html);
        this.setState({
            activeInputComponent: 'none'
        });
    }
    onFlashcardCreated(type, fields) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'annotations', action: 'flashcard-created' });
        this.setState({
            activeInputComponent: 'none'
        });
        Functions_1.Functions.withTimeout(() => {
            const { annotation } = this.props;
            const ref = Refs_1.Refs.createFromAnnotationType(annotation.id, annotation.annotationType);
            let flashcard;
            if (type === FlashcardType_1.FlashcardType.BASIC_FRONT_BACK) {
                const frontAndBackFields = fields;
                const { front, back } = frontAndBackFields;
                flashcard = Flashcards_1.Flashcards.createFrontBack(front, back, ref);
            }
            if (type === FlashcardType_1.FlashcardType.CLOZE) {
                const clozeFields = fields;
                const { text } = clozeFields;
                flashcard = Flashcards_1.Flashcards.createCloze(text, ref);
            }
            if (flashcard) {
                annotation.pageMeta.flashcards[flashcard.id] = Flashcards_1.Flashcards.createMutable(flashcard);
            }
        }).catch(err => log.error(err));
    }
}
exports.AnnotationControlBar = AnnotationControlBar;
//# sourceMappingURL=data:application/json;base64,