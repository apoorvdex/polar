"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Preconditions_1 = require("../Preconditions");
const AnnotationType_1 = require("../metadata/AnnotationType");
const Screenshots_1 = require("../metadata/Screenshots");
const Optional_1 = require("../util/ts/Optional");
const Flashcards_1 = require("../metadata/Flashcards");
class DocAnnotations {
    static getAnnotationsForPage(docMeta) {
        const result = [];
        Object.values(docMeta.pageMetas).forEach(pageMeta => {
            result.push(...this.getTextHighlights(pageMeta));
            result.push(...this.getAreaHighlights(pageMeta));
        });
        const index = {};
        for (const docAnnotation of result) {
            index[docAnnotation.id] = docAnnotation;
        }
        return result;
    }
    static createFromFlashcard(flashcard, pageMeta) {
        return {
            id: flashcard.id,
            annotationType: AnnotationType_1.AnnotationType.FLASHCARD,
            fields: Flashcards_1.Flashcards.convertFieldsToMap(flashcard.fields),
            pageNum: pageMeta.pageInfo.num,
            position: {
                x: 0,
                y: 0
            },
            created: flashcard.created,
            pageMeta,
            children: [],
            comments: [],
            ref: flashcard.ref,
            original: flashcard
        };
    }
    static createFromComment(comment, pageMeta) {
        return {
            id: comment.id,
            annotationType: AnnotationType_1.AnnotationType.COMMENT,
            html: comment.content.HTML,
            pageNum: pageMeta.pageInfo.num,
            position: {
                x: 0,
                y: 0
            },
            created: comment.created,
            pageMeta,
            children: [],
            comments: [],
            ref: comment.ref,
            original: comment
        };
    }
    static createFromAreaHighlight(areaHighlight, pageMeta) {
        const screenshot = this.getScreenshot(pageMeta, areaHighlight);
        return {
            id: areaHighlight.id,
            annotationType: AnnotationType_1.AnnotationType.AREA_HIGHLIGHT,
            screenshot,
            html: undefined,
            pageNum: pageMeta.pageInfo.num,
            position: {
                x: this.firstRect(areaHighlight).map(current => current.left).getOrElse(0),
                y: this.firstRect(areaHighlight).map(current => current.top).getOrElse(0),
            },
            created: areaHighlight.created,
            pageMeta,
            children: [],
            comments: [],
            original: areaHighlight
        };
    }
    static createFromTextHighlight(textHighlight, pageMeta) {
        let html = "";
        if (typeof textHighlight.text === 'string') {
            html = `<p>${textHighlight.text}</p>`;
        }
        if (Preconditions_1.isPresent(textHighlight.text) && typeof textHighlight.text === 'object') {
            if ('TEXT' in (textHighlight.text) || 'HTML' in (textHighlight.text)) {
                const text = textHighlight.text;
                if (text.TEXT) {
                    html = `${text.TEXT}`;
                }
                if (text.HTML) {
                    html = text.HTML;
                }
            }
        }
        const screenshot = this.getScreenshot(pageMeta, textHighlight);
        return {
            id: textHighlight.id,
            annotationType: AnnotationType_1.AnnotationType.TEXT_HIGHLIGHT,
            screenshot,
            html,
            pageNum: pageMeta.pageInfo.num,
            position: {
                x: this.firstRect(textHighlight).map(current => current.left).getOrElse(0),
                y: this.firstRect(textHighlight).map(current => current.top).getOrElse(0),
            },
            color: textHighlight.color,
            created: textHighlight.created,
            pageMeta,
            children: [],
            comments: [],
            original: textHighlight
        };
    }
    static getTextHighlights(pageMeta) {
        const result = [];
        Object.values(pageMeta.textHighlights).forEach(textHighlight => {
            result.push(this.createFromTextHighlight(textHighlight, pageMeta));
        });
        return result;
    }
    static getAreaHighlights(pageMeta) {
        const result = [];
        Object.values(pageMeta.areaHighlights).forEach(areaHighlight => {
            result.push(this.createFromAreaHighlight(areaHighlight, pageMeta));
        });
        return result;
    }
    static getScreenshot(pageMeta, highlight) {
        let screenshot;
        if (highlight.images) {
            Object.values(highlight.images).forEach(image => {
                if (image.rel && image.rel === 'screenshot') {
                    const screenshotURI = Screenshots_1.Screenshots.parseURI(image.src);
                    if (screenshotURI) {
                        screenshot = pageMeta.screenshots[screenshotURI.id];
                    }
                }
            });
        }
        return screenshot;
    }
    static firstRect(highlight) {
        return Optional_1.Optional.of(highlight)
            .map(current => current.rects)
            .map(current => current[0]);
    }
}
exports.DocAnnotations = DocAnnotations;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9jQW5ub3RhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEb2NBbm5vdGF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLG9EQUEyQztBQUUzQywrREFBMEQ7QUFHMUQseURBQW9EO0FBS3BELGtEQUE2QztBQUc3Qyx1REFBa0Q7QUFFbEQsTUFBYSxjQUFjO0lBRWhCLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxPQUFnQjtRQUVoRCxNQUFNLE1BQU0sR0FBb0IsRUFBRSxDQUFDO1FBRW5DLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNoRCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDakQsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxLQUFLLEdBQWtDLEVBQUUsQ0FBQztRQUVoRCxLQUFLLE1BQU0sYUFBYSxJQUFJLE1BQU0sRUFBRTtZQUNoQyxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsQ0FBQztTQUMzQztRQUlELE9BQU8sTUFBTSxDQUFDO0lBRWxCLENBQUM7SUFFTSxNQUFNLENBQUMsbUJBQW1CLENBQUMsU0FBb0IsRUFBRSxRQUFrQjtRQUV0RSxPQUFPO1lBQ0gsRUFBRSxFQUFFLFNBQVMsQ0FBQyxFQUFFO1lBQ2hCLGNBQWMsRUFBRSwrQkFBYyxDQUFDLFNBQVM7WUFFeEMsTUFBTSxFQUFFLHVCQUFVLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztZQUN2RCxPQUFPLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHO1lBRTlCLFFBQVEsRUFBRTtnQkFDTixDQUFD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QU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FFSjtBQXZNRCx3Q0F1TUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RvY01ldGF9IGZyb20gJy4uL21ldGFkYXRhL0RvY01ldGEnO1xuaW1wb3J0IHtQYWdlTWV0YX0gZnJvbSAnLi4vbWV0YWRhdGEvUGFnZU1ldGEnO1xuaW1wb3J0IHtpc1ByZXNlbnR9IGZyb20gJy4uL1ByZWNvbmRpdGlvbnMnO1xuaW1wb3J0IHtDb21tZW50fSBmcm9tICcuLi9tZXRhZGF0YS9Db21tZW50JztcbmltcG9ydCB7QW5ub3RhdGlvblR5cGV9IGZyb20gJy4uL21ldGFkYXRhL0Fubm90YXRpb25UeXBlJztcbmltcG9ydCB7QmFzZUhpZ2hsaWdodH0gZnJvbSAnLi4vbWV0YWRhdGEvQmFzZUhpZ2hsaWdodCc7XG5pbXBvcnQge1NjcmVlbnNob3R9IGZyb20gJy4uL21ldGFkYXRhL1NjcmVlbnNob3QnO1xuaW1wb3J0IHtTY3JlZW5zaG90c30gZnJvbSAnLi4vbWV0YWRhdGEvU2NyZWVuc2hvdHMnO1xuaW1wb3J0IHtUZXh0fSBmcm9tICcuLi9tZXRhZGF0YS9UZXh0JztcbmltcG9ydCB7RG9jQW5ub3RhdGlvbn0gZnJvbSAnLi9Eb2NBbm5vdGF0aW9uJztcbmltcG9ydCB7QXJlYUhpZ2hsaWdodH0gZnJvbSAnLi4vbWV0YWRhdGEvQXJlYUhpZ2hsaWdodCc7XG5pbXBvcnQge1RleHRIaWdobGlnaHR9IGZyb20gJy4uL21ldGFkYXRhL1RleHRIaWdobGlnaHQnO1xuaW1wb3J0IHtPcHRpb25hbH0gZnJvbSAnLi4vdXRpbC90cy9PcHRpb25hbCc7XG5pbXBvcnQge1JlY3R9IGZyb20gJy4uL1JlY3QnO1xuaW1wb3J0IHtGbGFzaGNhcmR9IGZyb20gJy4uL21ldGFkYXRhL0ZsYXNoY2FyZCc7XG5pbXBvcnQge0ZsYXNoY2FyZHN9IGZyb20gJy4uL21ldGFkYXRhL0ZsYXNoY2FyZHMnO1xuXG5leHBvcnQgY2xhc3MgRG9jQW5ub3RhdGlvbnMge1xuXG4gICAgcHVibGljIHN0YXRpYyBnZXRBbm5vdGF0aW9uc0ZvclBhZ2UoZG9jTWV0YTogRG9jTWV0YSk6IERvY0Fubm90YXRpb25bXSB7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0OiBEb2NBbm5vdGF0aW9uW10gPSBbXTtcblxuICAgICAgICBPYmplY3QudmFsdWVzKGRvY01ldGEucGFnZU1ldGFzKS5mb3JFYWNoKHBhZ2VNZXRhID0+IHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKC4uLnRoaXMuZ2V0VGV4dEhpZ2hsaWdodHMocGFnZU1ldGEpKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKC4uLnRoaXMuZ2V0QXJlYUhpZ2hsaWdodHMocGFnZU1ldGEpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgaW5kZXg6IHtbaWQ6IHN0cmluZ106IERvY0Fubm90YXRpb259ID0ge307XG5cbiAgICAgICAgZm9yIChjb25zdCBkb2NBbm5vdGF0aW9uIG9mIHJlc3VsdCkge1xuICAgICAgICAgICAgaW5kZXhbZG9jQW5ub3RhdGlvbi5pZF0gPSBkb2NBbm5vdGF0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm93IHVwZGF0ZSB0aGUgaW5kZXggb2YgYWxsIG91ciBjb21tZW50cy4uLlxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21GbGFzaGNhcmQoZmxhc2hjYXJkOiBGbGFzaGNhcmQsIHBhZ2VNZXRhOiBQYWdlTWV0YSk6IERvY0Fubm90YXRpb24ge1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogZmxhc2hjYXJkLmlkLFxuICAgICAgICAgICAgYW5ub3RhdGlvblR5cGU6IEFubm90YXRpb25UeXBlLkZMQVNIQ0FSRCxcbiAgICAgICAgICAgIC8vIGh0bWw6IGNvbW1lbnQuY29udGVudC5IVE1MISxcbiAgICAgICAgICAgIGZpZWxkczogRmxhc2hjYXJkcy5jb252ZXJ0RmllbGRzVG9NYXAoZmxhc2hjYXJkLmZpZWxkcyksXG4gICAgICAgICAgICBwYWdlTnVtOiBwYWdlTWV0YS5wYWdlSW5mby5udW0sXG4gICAgICAgICAgICAvLyBpcnJlbGV2YW50IG9uIGNvbW1lbnRzXG4gICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgeTogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNyZWF0ZWQ6IGZsYXNoY2FyZC5jcmVhdGVkLFxuICAgICAgICAgICAgcGFnZU1ldGEsXG4gICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICBjb21tZW50czogW10sXG4gICAgICAgICAgICByZWY6IGZsYXNoY2FyZC5yZWYsXG4gICAgICAgICAgICBvcmlnaW5hbDogZmxhc2hjYXJkXG5cbiAgICAgICAgfTtcblxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlRnJvbUNvbW1lbnQoY29tbWVudDogQ29tbWVudCwgcGFnZU1ldGE6IFBhZ2VNZXRhKTogRG9jQW5ub3RhdGlvbiB7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiBjb21tZW50LmlkLFxuICAgICAgICAgICAgYW5ub3RhdGlvblR5cGU6IEFubm90YXRpb25UeXBlLkNPTU1FTlQsXG4gICAgICAgICAgICBodG1sOiBjb21tZW50LmNvbnRlbnQuSFRNTCEsXG4gICAgICAgICAgICBwYWdlTnVtOiBwYWdlTWV0YS5wYWdlSW5mby5udW0sXG4gICAgICAgICAgICAvLyBpcnJlbGV2YW50IG9uIGNvbW1lbnRzXG4gICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgeTogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNyZWF0ZWQ6IGNvbW1lbnQuY3JlYXRlZCxcbiAgICAgICAgICAgIHBhZ2VNZXRhLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgY29tbWVudHM6IFtdLFxuICAgICAgICAgICAgcmVmOiBjb21tZW50LnJlZixcbiAgICAgICAgICAgIG9yaWdpbmFsOiBjb21tZW50XG5cbiAgICAgICAgfTtcblxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlRnJvbUFyZWFIaWdobGlnaHQoYXJlYUhpZ2hsaWdodDogQXJlYUhpZ2hsaWdodCwgcGFnZU1ldGE6IFBhZ2VNZXRhKTogRG9jQW5ub3RhdGlvbiB7XG5cbiAgICAgICAgY29uc3Qgc2NyZWVuc2hvdCA9IHRoaXMuZ2V0U2NyZWVuc2hvdChwYWdlTWV0YSwgYXJlYUhpZ2hsaWdodCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiBhcmVhSGlnaGxpZ2h0LmlkLFxuICAgICAgICAgICAgYW5ub3RhdGlvblR5cGU6IEFubm90YXRpb25UeXBlLkFSRUFfSElHSExJR0hULFxuICAgICAgICAgICAgc2NyZWVuc2hvdCxcbiAgICAgICAgICAgIGh0bWw6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHBhZ2VOdW06IHBhZ2VNZXRhLnBhZ2VJbmZvLm51bSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgeDogdGhpcy5maXJzdFJlY3QoYXJlYUhpZ2hsaWdodCkubWFwKGN1cnJlbnQgPT4gY3VycmVudC5sZWZ0KS5nZXRPckVsc2UoMCksXG4gICAgICAgICAgICAgICAgeTogdGhpcy5maXJzdFJlY3QoYXJlYUhpZ2hsaWdodCkubWFwKGN1cnJlbnQgPT4gY3VycmVudC50b3ApLmdldE9yRWxzZSgwKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjcmVhdGVkOiBhcmVhSGlnaGxpZ2h0LmNyZWF0ZWQsXG4gICAgICAgICAgICBwYWdlTWV0YSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgIGNvbW1lbnRzOiBbXSxcbiAgICAgICAgICAgIG9yaWdpbmFsOiBhcmVhSGlnaGxpZ2h0XG4gICAgICAgIH07XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21UZXh0SGlnaGxpZ2h0KHRleHRIaWdobGlnaHQ6IFRleHRIaWdobGlnaHQsIHBhZ2VNZXRhOiBQYWdlTWV0YSk6IERvY0Fubm90YXRpb24ge1xuXG4gICAgICAgIGxldCBodG1sOiBzdHJpbmcgPSBcIlwiO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGV4dEhpZ2hsaWdodC50ZXh0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaHRtbCA9IGA8cD4ke3RleHRIaWdobGlnaHQudGV4dH08L3A+YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1ByZXNlbnQodGV4dEhpZ2hsaWdodC50ZXh0KSAmJiB0eXBlb2YgdGV4dEhpZ2hsaWdodC50ZXh0ID09PSAnb2JqZWN0Jykge1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBtb3ZlIHRoaXMgdG8gYW4gaXNJbnN0YW5jZU9mIGluIFRleHRzXG4gICAgICAgICAgICBpZiAoJ1RFWFQnIGluIDxhbnk+ICh0ZXh0SGlnaGxpZ2h0LnRleHQpIHx8ICdIVE1MJyBpbiA8YW55PiAodGV4dEhpZ2hsaWdodC50ZXh0KSkge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IDxUZXh0PiB0ZXh0SGlnaGxpZ2h0LnRleHQ7XG5cbiAgICAgICAgICAgICAgICBpZiAodGV4dC5URVhUKSB7XG4gICAgICAgICAgICAgICAgICAgIGh0bWwgPSBgJHt0ZXh0LlRFWFR9YDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGV4dC5IVE1MKSB7XG4gICAgICAgICAgICAgICAgICAgIGh0bWwgPSB0ZXh0LkhUTUw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNjcmVlbnNob3QgPSB0aGlzLmdldFNjcmVlbnNob3QocGFnZU1ldGEsIHRleHRIaWdobGlnaHQpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogdGV4dEhpZ2hsaWdodC5pZCxcbiAgICAgICAgICAgIGFubm90YXRpb25UeXBlOiBBbm5vdGF0aW9uVHlwZS5URVhUX0hJR0hMSUdIVCxcbiAgICAgICAgICAgIHNjcmVlbnNob3QsXG4gICAgICAgICAgICBodG1sLFxuICAgICAgICAgICAgcGFnZU51bTogcGFnZU1ldGEucGFnZUluZm8ubnVtLFxuICAgICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICB4OiB0aGlzLmZpcnN0UmVjdCh0ZXh0SGlnaGxpZ2h0KS5tYXAoY3VycmVudCA9PiBjdXJyZW50LmxlZnQpLmdldE9yRWxzZSgwKSxcbiAgICAgICAgICAgICAgICB5OiB0aGlzLmZpcnN0UmVjdCh0ZXh0SGlnaGxpZ2h0KS5tYXAoY3VycmVudCA9PiBjdXJyZW50LnRvcCkuZ2V0T3JFbHNlKDApLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yOiB0ZXh0SGlnaGxpZ2h0LmNvbG9yLFxuICAgICAgICAgICAgY3JlYXRlZDogdGV4dEhpZ2hsaWdodC5jcmVhdGVkLFxuICAgICAgICAgICAgcGFnZU1ldGEsXG4gICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICBjb21tZW50czogW10sXG4gICAgICAgICAgICBvcmlnaW5hbDogdGV4dEhpZ2hsaWdodFxuICAgICAgICB9O1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0VGV4dEhpZ2hsaWdodHMocGFnZU1ldGE6IFBhZ2VNZXRhKTogRG9jQW5ub3RhdGlvbltdIHtcblxuICAgICAgICBjb25zdCByZXN1bHQ6IERvY0Fubm90YXRpb25bXSA9IFtdO1xuXG4gICAgICAgIE9iamVjdC52YWx1ZXMocGFnZU1ldGEudGV4dEhpZ2hsaWdodHMpLmZvckVhY2godGV4dEhpZ2hsaWdodCA9PiB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLmNyZWF0ZUZyb21UZXh0SGlnaGxpZ2h0KHRleHRIaWdobGlnaHQsIHBhZ2VNZXRhKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBnZXRBcmVhSGlnaGxpZ2h0cyhwYWdlTWV0YTogUGFnZU1ldGEpOiBEb2NBbm5vdGF0aW9uW10ge1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdDogRG9jQW5ub3RhdGlvbltdID0gW107XG5cbiAgICAgICAgT2JqZWN0LnZhbHVlcyhwYWdlTWV0YS5hcmVhSGlnaGxpZ2h0cykuZm9yRWFjaChhcmVhSGlnaGxpZ2h0ID0+IHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuY3JlYXRlRnJvbUFyZWFIaWdobGlnaHQoYXJlYUhpZ2hsaWdodCwgcGFnZU1ldGEpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIH1cblxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0U2NyZWVuc2hvdChwYWdlTWV0YTogUGFnZU1ldGEsIGhpZ2hsaWdodDogQmFzZUhpZ2hsaWdodCk6IFNjcmVlbnNob3QgfCB1bmRlZmluZWQge1xuXG4gICAgICAgIGxldCBzY3JlZW5zaG90OiBTY3JlZW5zaG90IHwgdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChoaWdobGlnaHQuaW1hZ2VzKSB7XG5cbiAgICAgICAgICAgIE9iamVjdC52YWx1ZXMoaGlnaGxpZ2h0LmltYWdlcykuZm9yRWFjaCggaW1hZ2UgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKGltYWdlLnJlbCAmJiBpbWFnZS5yZWwgPT09ICdzY3JlZW5zaG90Jykge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjcmVlbnNob3RVUkkgPSBTY3JlZW5zaG90cy5wYXJzZVVSSShpbWFnZS5zcmMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzY3JlZW5zaG90VVJJKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW5zaG90ID0gcGFnZU1ldGEuc2NyZWVuc2hvdHNbc2NyZWVuc2hvdFVSSS5pZF07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzY3JlZW5zaG90O1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZmlyc3RSZWN0KGhpZ2hsaWdodDogQmFzZUhpZ2hsaWdodCk6IE9wdGlvbmFsPFJlY3Q+IHtcbiAgICAgICAgcmV0dXJuIE9wdGlvbmFsLm9mKGhpZ2hsaWdodClcbiAgICAgICAgICAgIC5tYXAoY3VycmVudCA9PiBjdXJyZW50LnJlY3RzKVxuICAgICAgICAgICAgLm1hcChjdXJyZW50ID0+IGN1cnJlbnRbMF0pO1xuICAgIH1cblxufVxuIl19