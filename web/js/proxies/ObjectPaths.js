"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ObjectPathEntry_1 = require("./ObjectPathEntry");
const Paths_1 = require("../util/Paths");
class ObjectPaths {
    static recurse(obj) {
        let result = [];
        ObjectPaths._recurse("/", obj, null, null, result);
        result.sort(function (val0, val1) {
            return val0.path.localeCompare(val1.path);
        });
        return result;
    }
    static _recurse(path, obj, parent, parentKey, result) {
        if (typeof obj !== "object") {
            throw new Error("We can only recurse on object types.");
        }
        result.push(new ObjectPathEntry_1.ObjectPathEntry(path, obj, parent, parentKey));
        for (let childKey in obj) {
            if (obj.hasOwnProperty(childKey)) {
                let childVal = obj[childKey];
                if (childVal && typeof childVal === "object") {
                    let childPath = Paths_1.Paths.create(path, childKey);
                    ObjectPaths._recurse(childPath, childVal, obj, childKey, result);
                }
            }
        }
    }
}
exports.ObjectPaths = ObjectPaths;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JqZWN0UGF0aHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJPYmplY3RQYXRocy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVdBLHVEQUFrRDtBQUNsRCx5Q0FBb0M7QUFFcEMsTUFBYSxXQUFXO0lBRXBCLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBUTtRQUVuQixJQUFJLE1BQU0sR0FBc0IsRUFBRSxDQUFDO1FBRW5DLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBS25ELE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLEVBQUUsSUFBSTtZQUM1QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDO0lBRWxCLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQVksRUFDWixHQUFRLEVBQ1IsTUFBVyxFQUNYLFNBQXdCLEVBQ3hCLE1BQXlCO1FBRXJDLElBQUcsT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztTQUMzRDtRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxpQ0FBZSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFFL0QsS0FBSyxJQUFJLFFBQVEsSUFBSSxHQUFHLEVBQUU7WUFFdEIsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUU5QixJQUFJLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBRTdCLElBQUksUUFBUSxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtvQkFDMUMsSUFBSSxTQUFTLEdBQUcsYUFBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7b0JBQzdDLFdBQVcsQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2lCQUNwRTthQUVKO1NBRUo7SUFFTCxDQUFDO0NBRUo7QUFoREQsa0NBZ0RDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIHNpbXBsZSBtYXAgb2YgdGhlIG9iamVjdCBhbmQgdGhlIHBhdGggdG8gZ2V0IHRvIHRoYXQgb2JqZWN0LlxuICpcbiAqIFdlJ3JlIGFibGUgd2FsayBhbiBlbnRpcmUgb2JqZWN0IGRlY29tcG9zaW5nIGl0IGludG8gYSBsaXN0IG9mXG4gKiBPYmplY3RQYXRoRW50cnkgb2JqZWN0cyB3aGljaCBtYWtlIGl0IGVhc2llciB0byB0ZXN0IGFuZCBkZWJ1ZyByYXRoZXIgdGhhblxuICogZGVhbGluZyB3aXRoIHJlY3Vyc2l2ZSBvYmplY3RzLlxuICpcbiAqIFRoZSBvdXRwdXQgd2lsbCBiZSBhIGxpc3Qgb2YgcGF0aCBvYmplY3RzLlxuICpcbiAqXG4gKi9cbmltcG9ydCB7T2JqZWN0UGF0aEVudHJ5fSBmcm9tICcuL09iamVjdFBhdGhFbnRyeSc7XG5pbXBvcnQge1BhdGhzfSBmcm9tICcuLi91dGlsL1BhdGhzJztcblxuZXhwb3J0IGNsYXNzIE9iamVjdFBhdGhzIHtcblxuICAgIHN0YXRpYyByZWN1cnNlKG9iajogYW55KSB7XG5cbiAgICAgICAgbGV0IHJlc3VsdDogT2JqZWN0UGF0aEVudHJ5W10gPSBbXTtcblxuICAgICAgICBPYmplY3RQYXRocy5fcmVjdXJzZShcIi9cIiwgb2JqLCBudWxsLCBudWxsLCByZXN1bHQpO1xuXG4gICAgICAgIC8vIHNvcnQgdGhlIHJlc3VsdCB0byBnaXZlIHRoZSBkYXRhIGJhY2sgc29ydGVkIGJ5IHBhdGguICBJdCdzXG4gICAgICAgIC8vIGRldGVybWluaXN0aWMgZWl0aGVyIHdheSBidXQgaXRzIG5pY2UgZm9yIHRlc3RpbmcgdG8gaGF2ZSB0aGVtIHNvcnRlZFxuICAgICAgICAvLyBieSBwYXRoXG4gICAgICAgIHJlc3VsdC5zb3J0KGZ1bmN0aW9uICh2YWwwLCB2YWwxKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsMC5wYXRoLmxvY2FsZUNvbXBhcmUodmFsMS5wYXRoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIH1cblxuICAgIHN0YXRpYyBfcmVjdXJzZShwYXRoOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIG9iajogYW55LFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGFueSxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50S2V5OiBzdHJpbmcgfCBudWxsLFxuICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IE9iamVjdFBhdGhFbnRyeVtdKSB7XG5cbiAgICAgICAgaWYodHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV2UgY2FuIG9ubHkgcmVjdXJzZSBvbiBvYmplY3QgdHlwZXMuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0LnB1c2gobmV3IE9iamVjdFBhdGhFbnRyeShwYXRoLCBvYmosIHBhcmVudCwgcGFyZW50S2V5KSk7XG5cbiAgICAgICAgZm9yIChsZXQgY2hpbGRLZXkgaW4gb2JqKSB7XG5cbiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoY2hpbGRLZXkpKSB7XG5cbiAgICAgICAgICAgICAgICBsZXQgY2hpbGRWYWwgPSBvYmpbY2hpbGRLZXldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGRQYXRoID0gUGF0aHMuY3JlYXRlKHBhdGgsIGNoaWxkS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0UGF0aHMuX3JlY3Vyc2UoY2hpbGRQYXRoLCBjaGlsZFZhbCwgb2JqLCBjaGlsZEtleSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9XG5cbn1cbiJdfQ==