"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const DocFormatFactory_1 = require("../../docformat/DocFormatFactory");
const AnnotationPointers_1 = require("../../annotations/AnnotationPointers");
const Logger_1 = require("../../logger/Logger");
const Pagemarks_1 = require("../../metadata/Pagemarks");
const PagemarkRects_1 = require("../../metadata/PagemarkRects");
const PagemarkMode_1 = require("../../metadata/PagemarkMode");
const Rects_1 = require("../../Rects");
const Optional_1 = require("../../util/ts/Optional");
const RendererAnalytics_1 = require("../../ga/RendererAnalytics");
const DocMetas_1 = require("../../metadata/DocMetas");
const log = Logger_1.Logger.create();
class PagemarkController {
    constructor(model) {
        this.model = model;
        this.docFormat = DocFormatFactory_1.DocFormatFactory.getInstance();
    }
    start() {
        window.addEventListener("message", event => this.onMessageReceived(event), false);
    }
    onMessageReceived(event) {
        log.info("Received message: ", event);
        const triggerEvent = event.data;
        switch (event.data.type) {
            case "create-pagemark":
                this.onCreatePagemark(triggerEvent);
                break;
            case "delete-pagemark":
                this.onDeletePagemark(triggerEvent);
                break;
            case "set-pagemark-mode-pre-read":
                this.onSetPagemarkMode(triggerEvent, PagemarkMode_1.PagemarkMode.PRE_READ);
                break;
            case "set-pagemark-mode-read":
                this.onSetPagemarkMode(triggerEvent, PagemarkMode_1.PagemarkMode.READ);
                break;
            case "set-pagemark-mode-ignored":
                this.onSetPagemarkMode(triggerEvent, PagemarkMode_1.PagemarkMode.IGNORED);
                break;
            case "set-pagemark-mode-table-of-contents":
                this.onSetPagemarkMode(triggerEvent, PagemarkMode_1.PagemarkMode.TABLE_OF_CONTENTS);
                break;
            case "set-pagemark-mode-table-of-appendix":
                this.onSetPagemarkMode(triggerEvent, PagemarkMode_1.PagemarkMode.APPENDEX);
                break;
            case "set-pagemark-mode-table-of-references":
                this.onSetPagemarkMode(triggerEvent, PagemarkMode_1.PagemarkMode.REFERENCES);
                break;
        }
    }
    onCreatePagemark(triggerEvent) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'user', action: 'created-pagemark' });
        let elements = document.elementsFromPoint(triggerEvent.points.client.x, triggerEvent.points.client.y);
        elements = elements.filter(element => element.matches(".page"));
        if (elements.length === 1) {
            const pageElement = elements[0];
            log.info("Creating box on pageElement: ", pageElement);
            const pageNum = this.docFormat.getPageNumFromPageElement(pageElement);
            const pageElementPoint = triggerEvent.points.pageOffset;
            const boxRect = Rects_1.Rects.createFromBasicRect({
                left: pageElementPoint.x,
                top: pageElementPoint.y,
                width: 300,
                height: 300
            });
            log.info("Placing box at: ", boxRect);
            const containerRect = Rects_1.Rects.createFromBasicRect({
                left: 0,
                top: 0,
                width: pageElement.offsetWidth,
                height: pageElement.offsetHeight
            });
            const pagemarkRect = PagemarkRects_1.PagemarkRects.createFromPositionedRect(boxRect, containerRect);
            const pagemark = Pagemarks_1.Pagemarks.create({ rect: pagemarkRect });
            Pagemarks_1.Pagemarks.updatePagemark(this.model.docMeta, pageNum, pagemark);
            log.info("Using pagemarkRect: ", pagemarkRect);
        }
        else {
            log.warn("Wrong number of elements selected: " + elements.length);
        }
    }
    onDeletePagemark(triggerEvent) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'user', action: 'deleted-pagemark' });
        log.info("Deleting pagemark: ", triggerEvent);
        const pagemarkIDRef = this.toPagemarkID(triggerEvent);
        if (pagemarkIDRef) {
            Pagemarks_1.Pagemarks.deletePagemark(this.model.docMeta, pagemarkIDRef.pageNum, pagemarkIDRef.id);
        }
    }
    onSetPagemarkMode(triggerEvent, mode) {
        log.info("Setting pagemark mode: ", mode);
        const pagemarkIDRef = this.toPagemarkID(triggerEvent);
        if (pagemarkIDRef) {
            const pageNum = pagemarkIDRef.pageNum;
            const pageMeta = DocMetas_1.DocMetas.getPageMeta(this.model.docMeta, pageNum);
            const pagemark = pageMeta.pagemarks[pagemarkIDRef.id];
            if (pagemark) {
                const pagemarkPTR = {
                    ref: {
                        pageNum,
                        pagemark
                    },
                    batch: pagemark.batch,
                };
                Pagemarks_1.Pagemarks.replacePagemark(this.model.docMeta, pagemarkPTR, { mode });
            }
        }
    }
    toPagemarkID(triggerEvent) {
        const annotationPointers = AnnotationPointers_1.AnnotationPointers.toAnnotationPointers(".pagemark", triggerEvent);
        log.info("Working with annotationPointers: ", annotationPointers);
        return Optional_1.Optional.first(...annotationPointers).map(annotationPointer => {
            const pageMeta = this.model.docMeta.getPageMeta(annotationPointer.pageNum);
            return {
                pageNum: annotationPointer.pageNum,
                id: annotationPointer.id
            };
        }).getOrUndefined();
    }
}
exports.PagemarkController = PagemarkController;
//# sourceMappingURL=data:application/json;base64,