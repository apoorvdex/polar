"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Rects_1 = require("../../../../Rects");
const Preconditions_1 = require("../../../../Preconditions");
const Objects_1 = require("../../../../util/Objects");
class LineAdjustment {
    constructor(obj) {
        this.overlapped = obj.overlapped;
        this.start = obj.start;
        this.previous = obj.previous;
        this.snapped = obj.snapped;
        this.delta = obj.delta;
        this.axis = obj.axis;
    }
    adjustRect(primaryRect) {
        const dir = {};
        dir[this.axis] = this.start;
        const absolute = true;
        return Rects_1.Rects.move(primaryRect, dir, absolute);
    }
    static create(opts) {
        Preconditions_1.Preconditions.assertNotNull(opts.start, "start");
        Preconditions_1.Preconditions.assertNotNull(opts.previous, "previous");
        Preconditions_1.Preconditions.assertNotNull(opts.snapped, "snapped");
        Preconditions_1.Preconditions.assertNotNull(opts.axis, "axis");
        opts = Objects_1.Objects.duplicate(opts);
        opts.overlapped = true;
        opts.delta = Math.abs(opts.previous - opts.start);
        return new LineAdjustment(opts);
    }
}
exports.LineAdjustment = LineAdjustment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGluZUFkanVzdG1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJMaW5lQWRqdXN0bWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDZDQUF3QztBQUN4Qyw2REFBd0Q7QUFDeEQsc0RBQWlEO0FBRWpELE1BQWEsY0FBYztJQXlCdkIsWUFBWSxHQUFRO1FBRWhCLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUNqQyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQztRQUMzQixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO0lBRXpCLENBQUM7SUFNTSxVQUFVLENBQUMsV0FBaUI7UUFFL0IsTUFBTSxHQUFHLEdBQVEsRUFBRSxDQUFDO1FBQ3BCLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUU1QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFFdEIsT0FBTyxhQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFbEQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBUztRQUUxQiw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pELDZCQUFhLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDdkQsNkJBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNyRCw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRS9DLElBQUksR0FBRyxpQkFBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFbEQsT0FBTyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVwQyxDQUFDO0NBRUo7QUFsRUQsd0NBa0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSZWN0fSBmcm9tIFwiLi4vLi4vLi4vLi4vUmVjdFwiO1xuaW1wb3J0IHtSZWN0c30gZnJvbSBcIi4uLy4uLy4uLy4uL1JlY3RzXCI7XG5pbXBvcnQge1ByZWNvbmRpdGlvbnN9IGZyb20gXCIuLi8uLi8uLi8uLi9QcmVjb25kaXRpb25zXCI7XG5pbXBvcnQge09iamVjdHN9IGZyb20gXCIuLi8uLi8uLi8uLi91dGlsL09iamVjdHNcIjtcblxuZXhwb3J0IGNsYXNzIExpbmVBZGp1c3RtZW50IHtcblxuICAgIHB1YmxpYyBvdmVybGFwcGVkOiBib29sZWFuO1xuXG4gICAgcHVibGljIHN0YXJ0OiBudW1iZXI7XG5cbiAgICBwdWJsaWMgcHJldmlvdXM6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgd2Ugc25hcHBlZCBiZWZvcmUgb3IgYWZ0ZXIgdGhlIGludGVyc2VjdGlvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgc25hcHBlZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHByb3Bvc2VkIGNoYW5nZSBmb3IgdGhpcyBsaW5lLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZWx0YTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNhcnRlc2lhbiBheGlzIHRoaXMgbGluZSByZXByZXNlbnRzLiAgRWl0aGVyIFwieFwiIG9yIFwieVwiLlxuICAgICAqXG4gICAgICogVGhpcyBpcyB1c2VkIHRvIGFkanVzdCB0aGUgcmVjdCB3aGVuIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIHB1YmxpYyBheGlzOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihvYmo6IGFueSkge1xuXG4gICAgICAgIHRoaXMub3ZlcmxhcHBlZCA9IG9iai5vdmVybGFwcGVkO1xuICAgICAgICB0aGlzLnN0YXJ0ID0gb2JqLnN0YXJ0O1xuICAgICAgICB0aGlzLnByZXZpb3VzID0gb2JqLnByZXZpb3VzO1xuICAgICAgICB0aGlzLnNuYXBwZWQgPSBvYmouc25hcHBlZDtcbiAgICAgICAgdGhpcy5kZWx0YSA9IG9iai5kZWx0YTtcbiAgICAgICAgdGhpcy5heGlzID0gb2JqLmF4aXM7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBcHBseSB0aGUgYWRqdXN0bWVudCB0byB0aGUgZ2l2ZW4gcmVjdCBhbmQgcmV0dXJuIHRoZSBuZXcgcmVjdC5cbiAgICAgKlxuICAgICAqL1xuICAgIHB1YmxpYyBhZGp1c3RSZWN0KHByaW1hcnlSZWN0OiBSZWN0KSB7XG5cbiAgICAgICAgY29uc3QgZGlyOiBhbnkgPSB7fTtcbiAgICAgICAgZGlyW3RoaXMuYXhpc10gPSB0aGlzLnN0YXJ0O1xuXG4gICAgICAgIGNvbnN0IGFic29sdXRlID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gUmVjdHMubW92ZShwcmltYXJ5UmVjdCwgZGlyLCBhYnNvbHV0ZSk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShvcHRzOiBhbnkpIHtcblxuICAgICAgICBQcmVjb25kaXRpb25zLmFzc2VydE5vdE51bGwob3B0cy5zdGFydCwgXCJzdGFydFwiKTtcbiAgICAgICAgUHJlY29uZGl0aW9ucy5hc3NlcnROb3ROdWxsKG9wdHMucHJldmlvdXMsIFwicHJldmlvdXNcIik7XG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0Tm90TnVsbChvcHRzLnNuYXBwZWQsIFwic25hcHBlZFwiKTtcbiAgICAgICAgUHJlY29uZGl0aW9ucy5hc3NlcnROb3ROdWxsKG9wdHMuYXhpcywgXCJheGlzXCIpO1xuXG4gICAgICAgIG9wdHMgPSBPYmplY3RzLmR1cGxpY2F0ZShvcHRzKTtcbiAgICAgICAgb3B0cy5vdmVybGFwcGVkID0gdHJ1ZTtcbiAgICAgICAgb3B0cy5kZWx0YSA9IE1hdGguYWJzKG9wdHMucHJldmlvdXMgLSBvcHRzLnN0YXJ0KTtcblxuICAgICAgICByZXR1cm4gbmV3IExpbmVBZGp1c3RtZW50KG9wdHMpO1xuXG4gICAgfVxuXG59XG4iXX0=