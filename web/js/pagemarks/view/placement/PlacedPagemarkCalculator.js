"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PagemarkRects_1 = require("../../../metadata/PagemarkRects");
const Preconditions_1 = require("../../../Preconditions");
const Rects_1 = require("../../../Rects");
const PlacedPagemark_1 = require("./PlacedPagemark");
const Line_1 = require("../../../util/Line");
class PlacedPagemarkCalculator {
    calculate(parentRect, pagemark) {
        let pagemarkRect = pagemark.rect;
        if (!pagemarkRect) {
            pagemarkRect = PagemarkRects_1.PagemarkRects.createDefault(pagemark);
        }
        Preconditions_1.Preconditions.assertNotNull(parentRect, "parentRect");
        Preconditions_1.Preconditions.assertNotNull(pagemarkRect, "pagemarkRect");
        let fractionalRect = pagemarkRect.toFractionalRect();
        let resultX = this._scaleAxis(parentRect, fractionalRect, "x");
        let resultY = this._scaleAxis(parentRect, fractionalRect, "y");
        let rect = Rects_1.Rects.createFromLines(resultX, resultY);
        return new PlacedPagemark_1.PlacedPagemark({ rect });
    }
    _scaleAxis(parentRect, fractionalRect, axis) {
        return this._scaleLine(parentRect.toLine(axis), fractionalRect.toLine(axis));
    }
    _scaleLine(parentLine, fractionalLine) {
        let start = parentLine.start * fractionalLine.start;
        let end = parentLine.end * fractionalLine.end;
        return new Line_1.Line(start, end, parentLine.axis);
    }
}
exports.PlacedPagemarkCalculator = PlacedPagemarkCalculator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGxhY2VkUGFnZW1hcmtDYWxjdWxhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUGxhY2VkUGFnZW1hcmtDYWxjdWxhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsbUVBQThEO0FBQzlELDBEQUFxRDtBQUNyRCwwQ0FBcUM7QUFDckMscURBQWdEO0FBQ2hELDZDQUF3QztBQUV4QyxNQUFhLHdCQUF3QjtJQU1qQyxTQUFTLENBQUMsVUFBZ0IsRUFBRSxRQUFrQjtRQUUxQyxJQUFJLFlBQVksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBRWpDLElBQUcsQ0FBRSxZQUFZLEVBQUU7WUFDZixZQUFZLEdBQUcsNkJBQWEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDeEQ7UUFFRCw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDdEQsNkJBQWEsQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBRTFELElBQUksY0FBYyxHQUFHLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBRXJELElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMvRCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFL0QsSUFBSSxJQUFJLEdBQUcsYUFBSyxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFbkQsT0FBTyxJQUFJLCtCQUFjLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDO0lBRXRDLENBQUM7SUFLRCxVQUFVLENBQUMsVUFBZ0IsRUFBRSxjQUFvQixFQUFFLElBQVU7UUFDekQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0lBQ2hGLENBQUM7SUFLRCxVQUFVLENBQUMsVUFBZ0IsRUFBRSxjQUFvQjtRQUM3QyxJQUFJLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUM7UUFDcEQsSUFBSSxHQUFHLEdBQUcsVUFBVSxDQUFDLEdBQUcsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDO1FBQzlDLE9BQU8sSUFBSSxXQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakQsQ0FBQztDQUVKO0FBNUNELDREQTRDQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHtBeGlzLCBSZWN0fSBmcm9tICcuLi8uLi8uLi9SZWN0JztcbmltcG9ydCB7UGFnZW1hcmt9IGZyb20gJy4uLy4uLy4uL21ldGFkYXRhL1BhZ2VtYXJrJztcbmltcG9ydCB7UGFnZW1hcmtSZWN0c30gZnJvbSAnLi4vLi4vLi4vbWV0YWRhdGEvUGFnZW1hcmtSZWN0cyc7XG5pbXBvcnQge1ByZWNvbmRpdGlvbnN9IGZyb20gJy4uLy4uLy4uL1ByZWNvbmRpdGlvbnMnO1xuaW1wb3J0IHtSZWN0c30gZnJvbSAnLi4vLi4vLi4vUmVjdHMnO1xuaW1wb3J0IHtQbGFjZWRQYWdlbWFya30gZnJvbSAnLi9QbGFjZWRQYWdlbWFyayc7XG5pbXBvcnQge0xpbmV9IGZyb20gJy4uLy4uLy4uL3V0aWwvTGluZSc7XG5cbmV4cG9ydCBjbGFzcyBQbGFjZWRQYWdlbWFya0NhbGN1bGF0b3Ige1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSBhIFJlY3QgZm9yIHJlbmRlcmluZyB0aGUgcGFnZW1hcmtSZWN0IG9udG8gdGhlIHBhcmVudFJlY3QuXG4gICAgICpcbiAgICAgKi9cbiAgICBjYWxjdWxhdGUocGFyZW50UmVjdDogUmVjdCwgcGFnZW1hcms6IFBhZ2VtYXJrKSB7XG5cbiAgICAgICAgbGV0IHBhZ2VtYXJrUmVjdCA9IHBhZ2VtYXJrLnJlY3Q7XG5cbiAgICAgICAgaWYoISBwYWdlbWFya1JlY3QpIHtcbiAgICAgICAgICAgIHBhZ2VtYXJrUmVjdCA9IFBhZ2VtYXJrUmVjdHMuY3JlYXRlRGVmYXVsdChwYWdlbWFyayk7XG4gICAgICAgIH1cblxuICAgICAgICBQcmVjb25kaXRpb25zLmFzc2VydE5vdE51bGwocGFyZW50UmVjdCwgXCJwYXJlbnRSZWN0XCIpO1xuICAgICAgICBQcmVjb25kaXRpb25zLmFzc2VydE5vdE51bGwocGFnZW1hcmtSZWN0LCBcInBhZ2VtYXJrUmVjdFwiKTtcblxuICAgICAgICBsZXQgZnJhY3Rpb25hbFJlY3QgPSBwYWdlbWFya1JlY3QudG9GcmFjdGlvbmFsUmVjdCgpO1xuXG4gICAgICAgIGxldCByZXN1bHRYID0gdGhpcy5fc2NhbGVBeGlzKHBhcmVudFJlY3QsIGZyYWN0aW9uYWxSZWN0LCBcInhcIik7XG4gICAgICAgIGxldCByZXN1bHRZID0gdGhpcy5fc2NhbGVBeGlzKHBhcmVudFJlY3QsIGZyYWN0aW9uYWxSZWN0LCBcInlcIik7XG5cbiAgICAgICAgbGV0IHJlY3QgPSBSZWN0cy5jcmVhdGVGcm9tTGluZXMocmVzdWx0WCwgcmVzdWx0WSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQbGFjZWRQYWdlbWFyayh7cmVjdH0pO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBfc2NhbGVBeGlzKHBhcmVudFJlY3Q6IFJlY3QsIGZyYWN0aW9uYWxSZWN0OiBSZWN0LCBheGlzOiBBeGlzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zY2FsZUxpbmUocGFyZW50UmVjdC50b0xpbmUoYXhpcyksIGZyYWN0aW9uYWxSZWN0LnRvTGluZShheGlzKSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIF9zY2FsZUxpbmUocGFyZW50TGluZTogTGluZSwgZnJhY3Rpb25hbExpbmU6IExpbmUpIHtcbiAgICAgICAgbGV0IHN0YXJ0ID0gcGFyZW50TGluZS5zdGFydCAqIGZyYWN0aW9uYWxMaW5lLnN0YXJ0O1xuICAgICAgICBsZXQgZW5kID0gcGFyZW50TGluZS5lbmQgKiBmcmFjdGlvbmFsTGluZS5lbmQ7XG4gICAgICAgIHJldHVybiBuZXcgTGluZShzdGFydCwgZW5kLCBwYXJlbnRMaW5lLmF4aXMpO1xuICAgIH1cblxufVxuIl19