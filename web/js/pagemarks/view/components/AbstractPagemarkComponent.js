"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Pagemarks_1 = require("../../../metadata/Pagemarks");
const Logger_1 = require("../../../logger/Logger");
const Component_1 = require("../../../components/Component");
const DocFormatFactory_1 = require("../../../docformat/DocFormatFactory");
const AnnotationRects_1 = require("../../../metadata/AnnotationRects");
const PagemarkRect_1 = require("../../../metadata/PagemarkRect");
const Preconditions_1 = require("../../../Preconditions");
const Styles_1 = require("../../../util/Styles");
const Optional_1 = require("../../../util/ts/Optional");
const Rects_1 = require("../../../Rects");
const BoxController_1 = require("../../../boxes/controller/BoxController");
const PagemarkMode_1 = require("../../../metadata/PagemarkMode");
const DocMetas_1 = require("../../../metadata/DocMetas");
const log = Logger_1.Logger.create();
const ENABLE_BOX_CONTROLLER = true;
class AbstractPagemarkComponent extends Component_1.Component {
    constructor(type) {
        super();
        this.docFormat = DocFormatFactory_1.DocFormatFactory.getInstance();
        this.type = type;
        this.options = {
            templateElement: undefined,
            placementElement: undefined
        };
    }
    init(annotationEvent) {
        this.annotationEvent = annotationEvent;
        this.pagemark = annotationEvent.value;
        this.pagemarkBoxController = new BoxController_1.BoxController((boxMoveEvent) => this.onBoxMoved(boxMoveEvent));
    }
    onBoxMoved(boxMoveEvent) {
        log.info("Box moved to: ", boxMoveEvent);
        const annotationRect = AnnotationRects_1.AnnotationRects.createFromPositionedRect(boxMoveEvent.boxRect, boxMoveEvent.restrictionRect);
        const rect = new PagemarkRect_1.PagemarkRect(annotationRect);
        if (boxMoveEvent.state === "completed") {
            log.info("Box move completed.  Updating to trigger persistence.");
            const annotationEvent = this.annotationEvent;
            const pageNum = annotationEvent.pageMeta.pageInfo.num;
            const docMeta = annotationEvent.docMeta;
            const pageMeta = DocMetas_1.DocMetas.getPageMeta(docMeta, pageNum);
            this.pagemark = pageMeta.pagemarks[this.pagemark.id];
            const newPagemark = Object.assign({}, this.pagemark);
            newPagemark.percentage = rect.toPercentage();
            newPagemark.rect = rect;
            log.info("New pagemark: ", JSON.stringify(this.pagemark, null, "  "));
            Pagemarks_1.Pagemarks.updatePagemark(annotationEvent.docMeta, pageNum, newPagemark);
            this.pagemark = newPagemark;
        }
        else {
            log.info("New pagemark: ", JSON.stringify(this.pagemark, null, "  "));
        }
        log.info("New pagemarkRect: ", this.pagemark.rect);
    }
    render() {
        const container = this.annotationEvent.container;
        Preconditions_1.Preconditions.assertNotNull(container, "container");
        if (!this.pagemark) {
            throw new Error("Pagemark is required");
        }
        if (!this.pagemark.percentage) {
            throw new Error("Pagemark has no percentage");
        }
        let templateElement = this.options.templateElement;
        let placementElement = this.options.placementElement;
        if (!templateElement) {
            templateElement = container.element;
        }
        if (!placementElement) {
            placementElement = container.element.querySelector(".canvasWrapper, .iframeWrapper");
            log.debug("Using a default placementElement from selector: ", placementElement);
        }
        Preconditions_1.Preconditions.assertNotNull(templateElement, "templateElement");
        Preconditions_1.Preconditions.assertNotNull(placementElement, "placementElement");
        log.info("Using templateElement: ", templateElement);
        log.info("Using placementElement: ", placementElement);
        const id = this.createID();
        let pagemarkElement = document.getElementById(id);
        if (pagemarkElement === null) {
            pagemarkElement = document.createElement("div");
            pagemarkElement.setAttribute("id", id);
            placementElement.parentElement.insertBefore(pagemarkElement, placementElement);
            if (ENABLE_BOX_CONTROLLER) {
                log.info("Creating box controller for pagemarkElement: ", pagemarkElement);
                this.pagemarkBoxController.register({
                    target: pagemarkElement,
                    restrictionElement: placementElement,
                    intersectedElementsSelector: ".pagemark"
                });
            }
        }
        const annotationEvent = this.annotationEvent;
        pagemarkElement.setAttribute("data-pagemark-id", this.pagemark.id);
        pagemarkElement.setAttribute("data-annotation-id", this.pagemark.id);
        pagemarkElement.setAttribute("data-annotation-type", "pagemark");
        pagemarkElement.setAttribute("data-annotation-doc-fingerprint", annotationEvent.docMeta.docInfo.fingerprint);
        pagemarkElement.setAttribute("data-annotation-page-num", `${annotationEvent.pageMeta.pageInfo.num}`);
        pagemarkElement.setAttribute("data-type", "pagemark");
        pagemarkElement.setAttribute("data-doc-fingerprint", annotationEvent.docMeta.docInfo.fingerprint);
        pagemarkElement.setAttribute("data-page-num", `${annotationEvent.pageMeta.pageInfo.num}`);
        pagemarkElement.className = "pagemark annotation";
        const pagemarkColor = this.toPagemarkColor();
        pagemarkElement.style.backgroundColor = pagemarkColor.backgroundColor;
        pagemarkElement.style.opacity = "" + pagemarkColor.opacity;
        pagemarkElement.style.position = "absolute";
        const placementRect = this.createPlacementRect(placementElement);
        const pagemarkRect = this.toOverlayRect(placementRect, this.pagemark);
        if (this.type === 'primary') {
            if (pagemarkElement.children.length === 0) {
                this.createInternalDiv(pagemarkElement);
            }
        }
        pagemarkElement.style.left = `${pagemarkRect.left}px`;
        pagemarkElement.style.top = `${pagemarkRect.top}px`;
        pagemarkElement.style.width = `${pagemarkRect.width}px`;
        pagemarkElement.style.height = `${pagemarkRect.height}px`;
        pagemarkElement.style.zIndex = '9';
        pagemarkElement.style.pointerEvents = 'none';
    }
    createInternalDiv(pagemarkElement) {
        const createInternalDiv = () => {
            const internalDiv = document.createElement('div');
            internalDiv.style.pointerEvents = 'auto';
            internalDiv.style.position = 'absolute';
            return internalDiv;
        };
        const createHorizontalInternalDiv = () => {
            const internalDiv = createInternalDiv();
            internalDiv.style.width = '100%';
            internalDiv.style.height = '2mm';
            return internalDiv;
        };
        const createVerticalInternalDiv = () => {
            const internalDiv = createInternalDiv();
            internalDiv.style.width = '2mm';
            internalDiv.style.height = '100%';
            return internalDiv;
        };
        const createInternalDivs = () => {
            const left = createVerticalInternalDiv();
            left.style.left = '0';
            left.style.top = '0';
            const right = createVerticalInternalDiv();
            right.style.right = '0';
            right.style.top = '0';
            const top = createHorizontalInternalDiv();
            top.style.left = '0';
            top.style.top = '0';
            const bottom = createHorizontalInternalDiv();
            bottom.style.bottom = '0';
            bottom.style.left = '0';
            return [left, right, top, bottom];
        };
        const internalDivs = createInternalDivs();
        let pointerEvents = 'auto';
        const doChangePointerEvents = (newValue) => {
            if (pointerEvents !== newValue) {
                pagemarkElement.style.pointerEvents = newValue;
                pointerEvents = newValue;
            }
        };
        for (const internalDiv of internalDivs) {
            internalDiv.addEventListener('mouseenter', (event) => {
                doChangePointerEvents('auto');
                event.preventDefault();
            });
            internalDiv.addEventListener('mouseleave', (event) => {
                doChangePointerEvents('none');
                event.preventDefault();
            });
            pagemarkElement.appendChild(internalDiv);
        }
    }
    toPagemarkColor() {
        class PagemarkColors {
        }
        PagemarkColors.BLUE = {
            backgroundColor: "#00CCFF",
            opacity: 0.3
        };
        PagemarkColors.LIGHTBLUE = {
            backgroundColor: "#00CCFF",
            opacity: 0.15
        };
        PagemarkColors.GREY = {
            backgroundColor: "rgb(125, 125, 125)",
            opacity: 0.3
        };
        if (!this.pagemark) {
            return PagemarkColors.BLUE;
        }
        if (!this.pagemark.mode) {
            return PagemarkColors.BLUE;
        }
        switch (this.pagemark.mode) {
            case PagemarkMode_1.PagemarkMode.IGNORED:
                return PagemarkColors.GREY;
            case PagemarkMode_1.PagemarkMode.TABLE_OF_CONTENTS:
                return PagemarkColors.GREY;
            case PagemarkMode_1.PagemarkMode.APPENDEX:
                return PagemarkColors.GREY;
            case PagemarkMode_1.PagemarkMode.REFERENCES:
                return PagemarkColors.GREY;
            case PagemarkMode_1.PagemarkMode.PRE_READ:
                return PagemarkColors.LIGHTBLUE;
            default:
                return PagemarkColors.BLUE;
        }
    }
    destroy() {
        const pagemarkElement = document.getElementById(this.createID());
        if (pagemarkElement) {
            pagemarkElement.innerHTML = '';
            if (pagemarkElement.parentElement) {
                pagemarkElement.parentElement.removeChild(pagemarkElement);
            }
        }
    }
    createPlacementRect(placementElement) {
        const positioning = Styles_1.Styles.positioning(placementElement);
        const positioningPX = Styles_1.Styles.positioningToPX(positioning);
        const result = {
            left: Optional_1.Optional.of(positioningPX.left).getOrElse(placementElement.offsetLeft),
            top: Optional_1.Optional.of(positioningPX.top).getOrElse(placementElement.offsetTop),
            width: Optional_1.Optional.of(positioningPX.width).getOrElse(placementElement.offsetWidth),
            height: Optional_1.Optional.of(positioningPX.height).getOrElse(placementElement.offsetHeight),
        };
        return Rects_1.Rects.createFromBasicRect(result);
    }
    createID() {
        return `${this.type}-pagemark-${this.pagemark.id}`;
    }
    toOverlayRect(placementRect, pagemark) {
        const pagemarkRect = new PagemarkRect_1.PagemarkRect(pagemark.rect);
        const overlayRect = pagemarkRect.toDimensions(placementRect.dimensions);
        return Rects_1.Rects.createFromBasicRect({
            left: overlayRect.left + placementRect.left,
            top: overlayRect.top + placementRect.top,
            width: overlayRect.width,
            height: overlayRect.height,
        });
    }
}
exports.AbstractPagemarkComponent = AbstractPagemarkComponent;
//# sourceMappingURL=data:application/json;base64,