"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const SyncBar_1 = require("../../js/ui/sync_bar/SyncBar");
const SimpleReactor_1 = require("../../js/reactor/SimpleReactor");
const Logger_1 = require("../../js/logger/Logger");
const LogEventViewer_1 = require("./LogEventViewer");
const log = Logger_1.Logger.create();
class App extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.toggleDropDown = this.toggleDropDown.bind(this);
        this.toggleSplit = this.toggleSplit.bind(this);
        this.state = {
            dropdownOpen: false,
            splitButtonOpen: false
        };
    }
    render() {
        const data = [
            { message: 'hello world' },
            { message: 'hello world 2' },
            { message: 'hello world 3' },
            { message: 'hello world 4' },
            { message: 'hello world 5' },
        ];
        const progress = new SimpleReactor_1.SimpleReactor();
        const stages = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100];
        const remaining = Object.assign([], stages);
        function handleRemaining() {
            if (remaining.length === 0) {
                return;
            }
            setTimeout(() => {
                const percentage = remaining.shift();
                progress.dispatchEvent({
                    message: `Anki sync: ${percentage} of 100 tasks remaining...`,
                    percentage,
                    task: 'anki-sync'
                });
                handleRemaining();
            }, 250);
        }
        handleRemaining();
        progress.addEventListener((syncBarProgress) => {
            data.push({ message: syncBarProgress.message });
        });
        return (React.createElement("div", null,
            React.createElement(LogEventViewer_1.LogEventViewer, { progress: progress }),
            React.createElement(SyncBar_1.SyncBar, { progress: progress })));
    }
    toggleDropDown() {
        this.setState({
            splitButtonOpen: this.state.splitButtonOpen,
            dropdownOpen: !this.state.dropdownOpen
        });
    }
    toggleSplit() {
        this.setState({
            splitButtonOpen: !this.state.splitButtonOpen
        });
    }
}
exports.default = App;
//# sourceMappingURL=data:application/json;base64,