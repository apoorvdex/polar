"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Result_1 = require("../../js/util/Result");
exports.NullOnMessageCallback = (output) => { };
function createWorker(workerFunction, onMessage = exports.NullOnMessageCallback) {
    return new TypedWorker(workerFunction, onMessage);
}
exports.createWorker = createWorker;
class TypedWorker {
    constructor(workerFunction, onMessage = exports.NullOnMessageCallback) {
        this.onMessage = exports.NullOnMessageCallback;
        this.workerFunction = workerFunction;
        this.onMessage = onMessage;
        const script = `


        `;
        const postMessage = `(${workerFunction}).call(this, e.data, postMessage)`;
        const workerFile = `self.onmessage=function(e){${postMessage}}`;
        const blob = new Blob([workerFile], { type: 'application/javascript' });
        this.delegate = new Worker(URL.createObjectURL(blob));
        this.delegate.onmessage = (messageEvent) => {
            this.onMessage(new Result_1.Result(messageEvent.data));
        };
    }
    postMessage(workerMessage, transfer) {
        this.delegate.postMessage(workerMessage, transfer);
    }
    terminate() {
        this.delegate.terminate();
    }
}
class TypedExecutor {
    constructor() {
        this.sequence = 0;
        this.jobQueue = new JobQueue();
    }
    execute(input) {
        return new Promise(((resolve, reject) => {
            const id = this.sequence++;
            this.jobQueue.add({
                id,
                resolve,
                reject
            });
        }));
    }
}
exports.TypedExecutor = TypedExecutor;
class JobQueue {
    constructor() {
        this.jobs = {};
    }
    get(id) {
        return this.jobs[id];
    }
    add(job) {
        this.jobs[job.id] = job;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwZWRXb3JrZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJUeXBlZFdvcmtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLGlEQUE0QztBQWlCL0IsUUFBQSxxQkFBcUIsR0FBRyxDQUFNLE1BQW1CLEVBQUUsRUFBRSxHQUFFLENBQUMsQ0FBQztBQUd0RSxTQUFnQixZQUFZLENBQVUsY0FBdUMsRUFDdkMsWUFBb0MsNkJBQXFCO0lBRTNGLE9BQU8sSUFBSSxXQUFXLENBQUMsY0FBYyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBRXRELENBQUM7QUFMRCxvQ0FLQztBQVVELE1BQU0sV0FBVztJQU9iLFlBQVksY0FBdUMsRUFDdkMsWUFBb0MsNkJBQXFCO1FBTnJELGNBQVMsR0FBMkIsNkJBQXFCLENBQUM7UUFRdEUsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFFM0IsTUFBTSxNQUFNLEdBQUc7OztTQUdkLENBQUM7UUFJRixNQUFNLFdBQVcsR0FBRyxJQUFJLGNBQWMsbUNBQW1DLENBQUM7UUFDMUUsTUFBTSxVQUFVLEdBQUcsOEJBQThCLFdBQVcsR0FBRyxDQUFDO1FBQ2hFLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQyxDQUFDO1FBRXhFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRXRELElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxHQUFHLENBQUMsWUFBMEIsRUFBRSxFQUFFO1lBQ3JELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxlQUFNLENBQU0sWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFDO0lBRU4sQ0FBQztJQU1NLFdBQVcsQ0FBQyxhQUFpQixFQUFFLFFBQW1CO1FBQ3JELElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sU0FBUztRQUNaLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDOUIsQ0FBQztDQUVKO0FBRUQsTUFBYSxhQUFhO0lBQTFCO1FBRVksYUFBUSxHQUFXLENBQUMsQ0FBQztRQUVyQixhQUFRLEdBQUcsSUFBSSxRQUFRLEVBQU8sQ0FBQztJQXNCM0MsQ0FBQztJQWxCVSxPQUFPLENBQUMsS0FBUztRQUVwQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFFcEMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRTNCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO2dCQUNkLEVBQUU7Z0JBQ0YsT0FBTztnQkFDUCxNQUFNO2FBQ1QsQ0FBQyxDQUFDO1FBRVAsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVSLENBQUM7Q0FJSjtBQTFCRCxzQ0EwQkM7QUFFRCxNQUFNLFFBQVE7SUFBZDtRQUVZLFNBQUksR0FBNkIsRUFBRSxDQUFDO0lBVWhELENBQUM7SUFSVSxHQUFHLENBQUMsRUFBVTtRQUNqQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVNLEdBQUcsQ0FBQyxHQUFhO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUM1QixDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIG5vaW5zcGVjdGlvbiBUc0xpbnQ6IGFycmF5LXR5cGVcbmltcG9ydCB7UmVzdWx0fSBmcm9tICcuLi8uLi9qcy91dGlsL1Jlc3VsdCc7XG5cbmV4cG9ydCB0eXBlIFRyYW5zZmVyID0gKEFycmF5QnVmZmVyIHwgTWVzc2FnZVBvcnQgfCBJbWFnZUJpdG1hcClbXTtcblxuZXhwb3J0IGludGVyZmFjZSBJVHlwZWRXb3JrZXI8SW4sIE91dD4ge1xuICAgIHRlcm1pbmF0ZTogKCkgPT4gdm9pZDtcbiAgICBvbk1lc3NhZ2U6IE9uTWVzc2FnZUNhbGxiYWNrPE91dD4gO1xuICAgIHBvc3RNZXNzYWdlOiAod29ya2VyTWVzc2FnZTogSW4sIHRyYW5zZmVyPzogVHJhbnNmZXIpID0+IHZvaWQ7XG59XG5cbnR5cGUgV29ya2VyRnVuY3Rpb248SW4sIE91dD4gPSAoaW5wdXQ6IEluLCBjYjogV29ya2VyQ2FsbGJhY2s8T3V0PikgPT4gdm9pZDtcblxudHlwZSBXb3JrZXJDYWxsYmFjazxPdXQ+ID0gKG91dHB1dDogT3V0LCBlcnI/OiBFcnJvciwgdHJhbnNmZXI/OiBUcmFuc2ZlcikgPT4gdm9pZDtcblxudHlwZSBPbk1lc3NhZ2VDYWxsYmFjazxPdXQ+ID0gKG91dHB1dDogUmVzdWx0PE91dD4pID0+IHZvaWQ7XG5cbi8vIG5vaW5zcGVjdGlvbiBUc0xpbnQ6IG5vLWVtcHR5XG5leHBvcnQgY29uc3QgTnVsbE9uTWVzc2FnZUNhbGxiYWNrID0gPE91dD4ob3V0cHV0OiBSZXN1bHQ8T3V0PikgPT4ge307XG5cbi8vIG5vaW5zcGVjdGlvbiBUc0xpbnQ6IG1heC1saW5lLWxlbmd0aFxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVdvcmtlcjxJbiwgT3V0Pih3b3JrZXJGdW5jdGlvbjogV29ya2VyRnVuY3Rpb248SW4sIE91dD4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uTWVzc2FnZTogT25NZXNzYWdlQ2FsbGJhY2s8T3V0PiA9IE51bGxPbk1lc3NhZ2VDYWxsYmFjayk6IElUeXBlZFdvcmtlcjxJbiwgT3V0PiB7XG5cbiAgICByZXR1cm4gbmV3IFR5cGVkV29ya2VyKHdvcmtlckZ1bmN0aW9uLCBvbk1lc3NhZ2UpO1xuXG59XG5cbi8qKlxuICpcbiAqXG4gKlxuICogSW50ZXJuYWxseSB0aGlzIGluZGlyZWN0bHkgY3JlYXRlcyBhIHdvcmtlciBieSBjcmVhdGluZyBhIGJsb2IgVVJMIGFuZCB0aGVuXG4gKiBhcnRpZmljaWFsbHkgY3JlYXRpbmcgYSBzY3JpcHQgdGhhdCBpcyBldmFsdWF0ZWQgaW50ZXJuYWxseSB0byBjcmVhdGUgdGhlXG4gKiBuZXcgdGhyZWFkLlxuICovXG5jbGFzcyBUeXBlZFdvcmtlcjxJbiwgT3V0PiBpbXBsZW1lbnRzIElUeXBlZFdvcmtlcjxJbiwgT3V0PiB7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgb25NZXNzYWdlOiBPbk1lc3NhZ2VDYWxsYmFjazxPdXQ+ID0gTnVsbE9uTWVzc2FnZUNhbGxiYWNrO1xuXG4gICAgcHJpdmF0ZSBkZWxlZ2F0ZTogV29ya2VyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgd29ya2VyRnVuY3Rpb246IFdvcmtlckZ1bmN0aW9uPEluLCBPdXQ+O1xuXG4gICAgY29uc3RydWN0b3Iod29ya2VyRnVuY3Rpb246IFdvcmtlckZ1bmN0aW9uPEluLCBPdXQ+LFxuICAgICAgICAgICAgICAgIG9uTWVzc2FnZTogT25NZXNzYWdlQ2FsbGJhY2s8T3V0PiA9IE51bGxPbk1lc3NhZ2VDYWxsYmFjaykge1xuXG4gICAgICAgIHRoaXMud29ya2VyRnVuY3Rpb24gPSB3b3JrZXJGdW5jdGlvbjtcbiAgICAgICAgdGhpcy5vbk1lc3NhZ2UgPSBvbk1lc3NhZ2U7XG5cbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gYFxuXG5cbiAgICAgICAgYDtcblxuICAgICAgICAvLyBUT0RPOiBtYWtlIHRoaXMgaW50byBvbmUgbXVsdGktbGluZSBzY3JpcHQgc28gdGhhdCBJIGNhbiBhbHNvIGhhbmRsZSB0cnkvY2F0Y2hcblxuICAgICAgICBjb25zdCBwb3N0TWVzc2FnZSA9IGAoJHt3b3JrZXJGdW5jdGlvbn0pLmNhbGwodGhpcywgZS5kYXRhLCBwb3N0TWVzc2FnZSlgO1xuICAgICAgICBjb25zdCB3b3JrZXJGaWxlID0gYHNlbGYub25tZXNzYWdlPWZ1bmN0aW9uKGUpeyR7cG9zdE1lc3NhZ2V9fWA7XG4gICAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbd29ya2VyRmlsZV0sIHsgdHlwZTogJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnIH0pO1xuXG4gICAgICAgIHRoaXMuZGVsZWdhdGUgPSBuZXcgV29ya2VyKFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYikpO1xuXG4gICAgICAgIHRoaXMuZGVsZWdhdGUub25tZXNzYWdlID0gKG1lc3NhZ2VFdmVudDogTWVzc2FnZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uTWVzc2FnZShuZXcgUmVzdWx0PE91dD4obWVzc2FnZUV2ZW50LmRhdGEpKTtcbiAgICAgICAgfTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBvc3QgbWVzc2FnZSB0byB3b3JrZXIgZm9yIHByb2Nlc3NpbmdcbiAgICAgKiBAcGFyYW0gd29ya2VyTWVzc2FnZSBtZXNzYWdlIHRvIHNlbmQgdG8gd29ya2VyXG4gICAgICovXG4gICAgcHVibGljIHBvc3RNZXNzYWdlKHdvcmtlck1lc3NhZ2U6IEluLCB0cmFuc2Zlcj86IFRyYW5zZmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGUucG9zdE1lc3NhZ2Uod29ya2VyTWVzc2FnZSwgdHJhbnNmZXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyB0ZXJtaW5hdGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGUudGVybWluYXRlKCk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBUeXBlZEV4ZWN1dG9yPEluLCBPdXQ+IHtcblxuICAgIHByaXZhdGUgc2VxdWVuY2U6IG51bWJlciA9IDA7XG5cbiAgICBwcml2YXRlIGpvYlF1ZXVlID0gbmV3IEpvYlF1ZXVlPE91dD4oKTtcblxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJfV29ya2Vyc19BUEkvU3RydWN0dXJlZF9jbG9uZV9hbGdvcml0aG1cblxuICAgIHB1YmxpYyBleGVjdXRlKGlucHV0OiBJbik6IFByb21pc2U8T3V0PiB7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgICAgICAgIGNvbnN0IGlkID0gdGhpcy5zZXF1ZW5jZSsrO1xuXG4gICAgICAgICAgICB0aGlzLmpvYlF1ZXVlLmFkZCh7XG4gICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgICAgICAgICByZWplY3RcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pKTtcblxuICAgIH1cblxuICAgIC8vIHB1YmxpYyBvbk1lc3NhZ2VDYWxsYmFjaygpXG5cbn1cblxuY2xhc3MgSm9iUXVldWU8T3V0PiB7XG5cbiAgICBwcml2YXRlIGpvYnM6IHtbaWQ6IG51bWJlcl06IEpvYjxPdXQ+fSA9IHt9O1xuXG4gICAgcHVibGljIGdldChpZDogbnVtYmVyKTogSm9iPE91dD4gfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5qb2JzW2lkXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkKGpvYjogSm9iPE91dD4pIHtcbiAgICAgICAgdGhpcy5qb2JzW2pvYi5pZF0gPSBqb2I7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSm9iPE91dD4ge1xuXG4gICAgcmVhZG9ubHkgaWQ6IG51bWJlcjtcbiAgICByZWFkb25seSByZXNvbHZlOiAocmVzb2x2ZWQ6IE91dCkgPT4gdm9pZDtcbiAgICByZWFkb25seSByZWplY3Q6IChlcnI6IEVycm9yKSA9PiB2b2lkO1xuXG59XG4iXX0=