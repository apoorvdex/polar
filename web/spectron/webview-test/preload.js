"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const windowDimensions = {
    width: 800,
    height: 1000,
};
function defineProperty(target, key, value) {
    console.log(`Defining ${key} as: ${value}`);
    try {
        Object.defineProperty(target, key, {
            get: function () {
                return value;
            }
        });
    }
    catch (e) {
        console.warn(`Unable to define ${key}`, e);
    }
}
exports.defineProperty = defineProperty;
function cleanupLargeVerticalHeight() {
    for (const element of Array.from(document.querySelectorAll(".Cover"))) {
        if (element instanceof HTMLElement) {
            console.log("FIXME: here", element);
            const style = window.getComputedStyle(element);
            console.log("FIXME: style: ", style);
            console.log("FIXME: style.parentRule: ", style.parentRule);
            console.log("FIXME: style.height: " + style.height);
            if (style.height === '100vh') {
                element.style.maxHeight = '400px';
            }
        }
    }
}
exports.cleanupLargeVerticalHeight = cleanupLargeVerticalHeight;
function configureBrowserWindowSize() {
    const definitions = [
        { key: "width", value: windowDimensions.width },
        { key: "availWidth", value: windowDimensions.width },
        { key: "height", value: windowDimensions.height },
        { key: "availHeight", value: windowDimensions.height }
    ];
    for (const definition of definitions) {
        defineProperty(window.screen, definition.key, definition.value);
    }
    defineProperty(window, 'outerWidth', windowDimensions.width);
    defineProperty(window, 'outerHeight', windowDimensions.height);
}
exports.configureBrowserWindowSize = configureBrowserWindowSize;
configureBrowserWindowSize();
console.log("Configurd browser size!");
console.log("FIXME: window.innerHeight: " + window.innerHeight);
console.log("FIXME: window.outerHeight: " + window.outerHeight);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInByZWxvYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSxNQUFNLGdCQUFnQixHQUFnQjtJQUNsQyxLQUFLLEVBQUUsR0FBRztJQUNWLE1BQU0sRUFBRSxJQUFJO0NBQ2YsQ0FBQztBQUVGLFNBQWdCLGNBQWMsQ0FBQyxNQUFXLEVBQUUsR0FBVyxFQUFFLEtBQVU7SUFFL0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsUUFBUSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBRTVDLElBQUk7UUFDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7WUFDL0IsR0FBRyxFQUFFO2dCQUNELE9BQU8sS0FBSyxDQUFDO1lBQ2pCLENBQUM7U0FDSixDQUFDLENBQUM7S0FDTjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsT0FBTyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDOUM7QUFFTCxDQUFDO0FBZEQsd0NBY0M7QUFFRCxTQUFnQiwwQkFBMEI7SUFFdEMsS0FBSyxNQUFNLE9BQU8sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFO1FBRW5FLElBQUksT0FBTyxZQUFZLFdBQVcsRUFBRTtZQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNwQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFRL0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUUzRCxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwRCxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssT0FBTyxFQUFFO2dCQUMxQixPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUM7YUFDckM7U0FDSjtLQUVKO0FBRUwsQ0FBQztBQXpCRCxnRUF5QkM7QUFFRCxTQUFnQiwwQkFBMEI7SUFNdEMsTUFBTSxXQUFXLEdBQUc7UUFDaEIsRUFBQyxHQUFHLEVBQUUsT0FBTyxFQUFRLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUM7UUFDbkQsRUFBQyxHQUFHLEVBQUUsWUFBWSxFQUFHLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUM7UUFDbkQsRUFBQyxHQUFHLEVBQUUsUUFBUSxFQUFPLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUM7UUFDcEQsRUFBQyxHQUFHLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUM7S0FDdkQsQ0FBQztJQUVGLEtBQUssTUFBTSxVQUFVLElBQUksV0FBVyxFQUFFO1FBQ2xDLGNBQWMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ25FO0lBRUQsY0FBYyxDQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0QsY0FBYyxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFbkUsQ0FBQztBQXBCRCxnRUFvQkM7QUFFRCwwQkFBMEIsRUFBRSxDQUFDO0FBRTdCLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUV2QyxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNoRSxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SURpbWVuc2lvbnN9IGZyb20gJy4uLy4uL2pzL3V0aWwvRGltZW5zaW9ucyc7XG5pbXBvcnQge0Z1bmN0aW9uc30gZnJvbSAnLi4vLi4vanMvdXRpbC9GdW5jdGlvbnMnO1xuXG5jb25zdCB3aW5kb3dEaW1lbnNpb25zOiBJRGltZW5zaW9ucyA9IHtcbiAgICB3aWR0aDogODAwLFxuICAgIGhlaWdodDogMTAwMCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQ6IGFueSwga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcblxuICAgIGNvbnNvbGUubG9nKGBEZWZpbmluZyAke2tleX0gYXM6ICR7dmFsdWV9YCk7XG5cbiAgICB0cnkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgVW5hYmxlIHRvIGRlZmluZSAke2tleX1gLCBlKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFudXBMYXJnZVZlcnRpY2FsSGVpZ2h0KCkge1xuXG4gICAgZm9yIChjb25zdCBlbGVtZW50IG9mIEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5Db3ZlclwiKSkpIHtcblxuICAgICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZJWE1FOiBoZXJlXCIsIGVsZW1lbnQpO1xuICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcblxuICAgICAgICAgICAgLy8gY29uc3QgbWF0Y2hlZENTU1J1bGVzID0gd2luZG93LmdldE1hdGNoZWRDU1NSdWxlcyhlbGVtZW50KTtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBmb3IgKGNvbnN0IHJ1bGUgb2YgQXJyYXkuZnJvbShtYXRjaGVkQ1NTUnVsZXMpKSB7XG4gICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coXCJGSVhNRTogcnVsZTogXCIsIHJ1bGUpO1xuICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZJWE1FOiBzdHlsZTogXCIsIHN0eWxlKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRklYTUU6IHN0eWxlLnBhcmVudFJ1bGU6IFwiLCBzdHlsZS5wYXJlbnRSdWxlKTtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJGSVhNRTogc3R5bGUuaGVpZ2h0OiBcIiArIHN0eWxlLmhlaWdodCk7XG4gICAgICAgICAgICBpZiAoc3R5bGUuaGVpZ2h0ID09PSAnMTAwdmgnKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5tYXhIZWlnaHQgPSAnNDAwcHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyZUJyb3dzZXJXaW5kb3dTaXplKCkge1xuXG4gICAgLy8gVE9ETzogc2VlIGlmIEkgaGF2ZSBhbHJlYWR5IHJlZGVmaW5lZCBpdC4gIHRoZSBzZWNvbmQgdGltZSBmYWlsc1xuICAgIC8vIGJlY2F1c2UgSSBjYW4ndCByZWRlZmluZSBhIHByb3BlcnR5LiAgSSBkb24ndCB0aGluayB0aGVyZSBpcyBhIHdheVxuICAgIC8vIHRvIGZpbmQgb3V0IGlmIGl0J3MgYWxyZWFkeSBkZWZpbmVkIHRob3VnaC5cblxuICAgIGNvbnN0IGRlZmluaXRpb25zID0gW1xuICAgICAgICB7a2V5OiBcIndpZHRoXCIsICAgICAgIHZhbHVlOiB3aW5kb3dEaW1lbnNpb25zLndpZHRofSxcbiAgICAgICAge2tleTogXCJhdmFpbFdpZHRoXCIsICB2YWx1ZTogd2luZG93RGltZW5zaW9ucy53aWR0aH0sXG4gICAgICAgIHtrZXk6IFwiaGVpZ2h0XCIsICAgICAgdmFsdWU6IHdpbmRvd0RpbWVuc2lvbnMuaGVpZ2h0fSxcbiAgICAgICAge2tleTogXCJhdmFpbEhlaWdodFwiLCB2YWx1ZTogd2luZG93RGltZW5zaW9ucy5oZWlnaHR9XG4gICAgXTtcblxuICAgIGZvciAoY29uc3QgZGVmaW5pdGlvbiBvZiBkZWZpbml0aW9ucykge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eSh3aW5kb3cuc2NyZWVuLCBkZWZpbml0aW9uLmtleSwgZGVmaW5pdGlvbi52YWx1ZSk7XG4gICAgfVxuXG4gICAgZGVmaW5lUHJvcGVydHkod2luZG93LCAnb3V0ZXJXaWR0aCcsIHdpbmRvd0RpbWVuc2lvbnMud2lkdGgpO1xuICAgIGRlZmluZVByb3BlcnR5KHdpbmRvdywgJ291dGVySGVpZ2h0Jywgd2luZG93RGltZW5zaW9ucy5oZWlnaHQpO1xuXG59XG5cbmNvbmZpZ3VyZUJyb3dzZXJXaW5kb3dTaXplKCk7XG5cbmNvbnNvbGUubG9nKFwiQ29uZmlndXJkIGJyb3dzZXIgc2l6ZSFcIik7XG5cbmNvbnNvbGUubG9nKFwiRklYTUU6IHdpbmRvdy5pbm5lckhlaWdodDogXCIgKyB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuY29uc29sZS5sb2coXCJGSVhNRTogd2luZG93Lm91dGVySGVpZ2h0OiBcIiArIHdpbmRvdy5vdXRlckhlaWdodCk7XG4iXX0=