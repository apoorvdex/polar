"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const DocMetas_1 = require("../../js/metadata/DocMetas");
const Proxies_1 = require("../../js/proxies/Proxies");
const Rect_1 = require("../../js/Rect");
const TextRect_1 = require("../../js/metadata/TextRect");
const TextHighlightRecords_1 = require("../../js/metadata/TextHighlightRecords");
const ViewOrEditCommentExample_1 = require("./ViewOrEditCommentExample");
const RelatedTags_1 = require("../../js/tags/related/RelatedTags");
const react_context_menu_wrapper_1 = require("@burtonator/react-context-menu-wrapper");
class App extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.toggleDropDown = this.toggleDropDown.bind(this);
        this.toggleSplit = this.toggleSplit.bind(this);
        this.state = {
            dropdownOpen: false,
            splitButtonOpen: false
        };
    }
    render() {
        const options = [
            {
                id: "title",
                label: "Title",
                selected: true
            },
            {
                id: "tags",
                label: "Tags",
                selected: false
            }
        ];
        const docMeta = Proxies_1.Proxies.create(DocMetas_1.MockDocMetas.createWithinInitialPagemarks('0x001', 4));
        const rects = [new Rect_1.Rect({ top: 100, left: 100, right: 200, bottom: 200, width: 100, height: 100 })];
        const textSelections = [new TextRect_1.TextRect({ text: "hello world" })];
        const text = "hello world";
        const textHighlight = TextHighlightRecords_1.TextHighlightRecords.create(rects, textSelections, { TEXT: text });
        docMeta.pageMetas[1].textHighlights[textHighlight.id] = textHighlight.value;
        const relatedTags = new RelatedTags_1.RelatedTags();
        relatedTags.update('0x01', 'set', 'linux');
        relatedTags.update('0x01', 'set', 'microsoft');
        relatedTags.update('0x02', 'set', 'linux');
        relatedTags.update('0x02', 'set', 'google');
        relatedTags.update('0x03', 'set', 'linux');
        relatedTags.update('0x03', 'set', 'microsoft');
        relatedTags.update('0x04', 'set', 'linux');
        relatedTags.update('0x04', 'set', 'microsoft');
        relatedTags.update('0x05', 'set', 'linux');
        relatedTags.update('0x05', 'set', 'google');
        const tags = [
            { id: 'microsoft', label: 'microsoft' },
            { id: 'google', label: 'google' }
        ];
        const existingTags = [
            { id: 'google', label: 'google' }
        ];
        const contextMenuHandlers = react_context_menu_wrapper_1.prepareContextMenuHandlers({ id: 'my-context-menu' });
        const steps = [
            {
                target: '.my-first-step',
                content: 'This is my awesome feature!',
                disableBeacon: true
            },
            {
                target: '.my-other-step',
                content: 'This another awesome feature!',
            },
        ];
        return (React.createElement("div", null,
            React.createElement(ViewOrEditCommentExample_1.ViewOrEditCommentExample, null)));
    }
    toggleDropDown() {
        this.setState({
            splitButtonOpen: this.state.splitButtonOpen,
            dropdownOpen: !this.state.dropdownOpen
        });
    }
    toggleSplit() {
        this.setState({
            splitButtonOpen: !this.state.splitButtonOpen
        });
    }
}
exports.default = App;
//# sourceMappingURL=data:application/json;base64,