"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const ConfirmButton_1 = require("../../js/ui/confirm/ConfirmButton");
const ConfirmPopover_1 = require("../../js/ui/confirm/ConfirmPopover");
class App extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.open = false;
        this.selected = 'none';
        this.toggle = this.toggle.bind(this);
        this.select = this.select.bind(this);
        this.state = {
            open: this.open,
            selected: this.selected
        };
    }
    render() {
        console.log("this.state.selected: ", this.state);
        return (React.createElement("div", { className: "text-right" },
            React.createElement(ConfirmButton_1.ConfirmButton, { id: "confirm", prompt: "Are you sure?", onConfirm: () => console.log('confirm') }, "Delete"),
            React.createElement(ConfirmPopover_1.ConfirmPopover, { open: true, target: "mytarget", title: "Are you sure?", subtitle: "it might be bad ", onCancel: () => console.log('cancel'), onConfirm: () => console.log('confirm') }),
            React.createElement("br", null),
            React.createElement("br", null),
            React.createElement("br", null),
            React.createElement("br", null),
            React.createElement("br", null),
            React.createElement("br", null),
            React.createElement("br", null),
            React.createElement("br", null),
            React.createElement("br", null),
            React.createElement("br", null),
            React.createElement("br", null),
            React.createElement("br", null)));
    }
    toggle() {
        console.log("toggle()");
        this.open = !this.state.open;
        this.setState({
            open: this.open,
            selected: this.selected
        });
    }
    select(selected) {
        console.log("select()");
        console.log("Goign to set selected: " + selected);
        this.selected = selected;
        this.setState({
            open: this.open,
            selected: this.selected
        });
    }
}
exports.default = App;
//# sourceMappingURL=data:application/json;base64,