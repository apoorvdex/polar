"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const SpectronRenderer_1 = require("../../js/test/SpectronRenderer");
const firebase = __importStar(require("../../js/firebase/lib/firebase"));
const Firestore_1 = require("../../js/firebase/Firestore");
const Hashcodes_1 = require("../../js/Hashcodes");
const Promises_1 = require("../../js/util/Promises");
const FirebaseRunner_1 = require("../../js/firebase/FirebaseRunner");
const PolarDataDir_1 = require("../../js/test/PolarDataDir");
const Strings_1 = require("../../js/util/Strings");
const AsyncWorkQueue_1 = require("../../js/util/AsyncWorkQueue");
const FirestoreQueryCursor_1 = require("../../js/firebase/FirestoreQueryCursor");
mocha.setup('bdd');
mocha.timeout(10000);
SpectronRenderer_1.SpectronRenderer.run((state) => __awaiter(this, void 0, void 0, function* () {
    new FirebaseRunner_1.FirebaseRunner(state).run(() => __awaiter(this, void 0, void 0, function* () {
        yield PolarDataDir_1.PolarDataDir.useFreshDirectory('.test-firebase-write-semantics');
        describe('Firebase Write Semantics', function () {
            it("Test receiving large snapshots", function () {
                return __awaiter(this, void 0, void 0, function* () {
                    const collectionName = "debug_large_snapshots4";
                    const doWrites = false;
                    const doTest = true;
                    const nrWrites = 5000;
                    const firestore = yield Firestore_1.Firestore.getInstance();
                    const uid = firebase.auth().currentUser.uid;
                    if (doWrites) {
                        const work = [];
                        const asyncWorkQueue = new AsyncWorkQueue_1.AsyncWorkQueue(work);
                        for (let idx = 0; idx < nrWrites; idx++) {
                            const id = Hashcodes_1.Hashcodes.createID({ idx });
                            const data = Strings_1.Strings.lpad('', 'x', 4096);
                            const doc = {
                                foo: data,
                                bar: data,
                                id,
                                uid
                            };
                            const ref = firestore
                                .collection(collectionName)
                                .doc(id);
                            work.push(() => __awaiter(this, void 0, void 0, function* () {
                                yield ref.set(doc);
                                console.log("Wrote doc: " + idx);
                            }));
                        }
                        yield asyncWorkQueue.execute();
                        console.log("Done writes ... ");
                    }
                    if (doTest) {
                        const cursor = new FirestoreQueryCursor_1.FirestoreQueryCursor(collectionName, { fieldPath: 'uid', opStr: '==', value: uid });
                        const before = Date.now();
                        let total = 0;
                        while (cursor.hasNext()) {
                            console.log("Fetching cursor...");
                            const querySnapshot = yield cursor.next();
                            console.log("Fetching cursor...done");
                            total += querySnapshot.size;
                            console.log("FIXME: fethced N records: " + total);
                        }
                        console.log("Total cursor query duration: " + (Date.now() - before));
                    }
                });
            });
            xit("Write a basic doc", function () {
                return __awaiter(this, void 0, void 0, function* () {
                    const collectionName = "debug";
                    const iter = 1543071938802;
                    const doWrites = false;
                    console.log("Using iter: " + iter);
                    const firestore = yield Firestore_1.Firestore.getInstance();
                    const metadataTraces = [];
                    const perDocMetadataTraces = [];
                    const onSnapshot = (snapshot) => {
                        console.log("FIXME onSnapshot: ===============================");
                        console.log("FIXME onSnapshot snapshot: ", snapshot);
                        console.log("FIXME: onSnapshot: We have N docs: " + snapshot.docs.length);
                        console.log("FIXME: onSnapshot: We have N docChanges: " + snapshot.docChanges().length);
                        console.log("FIXME: onSnapshot: docs: ", snapshot.docs);
                        console.log("FIXME: onSnapshot: NR docChanges: ", snapshot.docChanges().length);
                        console.log("FIXME: onSnapshot: docChanges: ", snapshot.docChanges());
                        for (const docChange of snapshot.docChanges()) {
                            console.log("FIXME id: ", docChange.doc.id);
                            const metadataTrace = {
                                id: docChange.doc.id,
                                fromCache: snapshot.metadata.fromCache,
                                hasPendingWrites: snapshot.metadata.hasPendingWrites,
                                doc: docChange.doc.data()
                            };
                            console.log("FIXME onSnapshot/docChange docChange: ", docChange);
                            console.log("FIXME onSnapshot/docChange metadataTrace: ", metadataTrace);
                            metadataTraces.push(metadataTrace);
                        }
                    };
                    yield firestore
                        .collection(collectionName)
                        .where('iter', '==', iter)
                        .onSnapshot({ includeMetadataChanges: true }, snapshot => onSnapshot(snapshot));
                    if (doWrites) {
                        const id0 = Hashcodes_1.Hashcodes.createRandomID();
                        const id1 = Hashcodes_1.Hashcodes.createRandomID();
                        console.log("FIXME: id0: " + id0);
                        console.log("FIXME: id1: " + id1);
                        const nrWrites = 10;
                        for (const id of [id0]) {
                            for (let idx = 0; idx < nrWrites; idx++) {
                                console.log("FIXME: writing with id: " + id);
                                const doc = {
                                    foo: "bar",
                                    version: idx,
                                    iter
                                };
                                const ref = firestore.collection(collectionName).doc(id);
                                let snapshotVersion = 0;
                                ref.onSnapshot({ includeMetadataChanges: true }, snapshot => {
                                    console.log("FIXME999999: got per doc snapshot: ", snapshot);
                                    console.log("FIXME999999: : fromCache: ", snapshot.metadata.fromCache);
                                    console.log("FIXME999999: : hasPendingWrites: ", snapshot.metadata.hasPendingWrites);
                                    const metadataTrace = {
                                        id: snapshot.id,
                                        fromCache: snapshot.metadata.fromCache,
                                        hasPendingWrites: snapshot.metadata.hasPendingWrites,
                                        doc: snapshot.data(),
                                        snapshotVersion: snapshotVersion++
                                    };
                                    perDocMetadataTraces.push(metadataTrace);
                                });
                                yield ref.set(doc);
                            }
                        }
                    }
                    else {
                        console.log("Skipping writes");
                    }
                    yield Promises_1.Promises.waitFor(5000);
                    console.log("metadataTraces: ", metadataTraces);
                    console.log("perDocMetadataTraces: ", perDocMetadataTraces);
                });
            });
        });
    }));
}));
//# sourceMappingURL=data:application/json;base64,