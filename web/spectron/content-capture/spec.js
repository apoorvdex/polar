"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const WebDriverTestResultReader_1 = require("../../js/test/results/reader/WebDriverTestResultReader");
const Spectron_1 = require("../../js/test/Spectron");
const assert = require('assert');
const TIMEOUT = 10000;
describe('content-capture', function () {
    this.timeout(TIMEOUT);
    Spectron_1.Spectron.setup(__dirname);
    it('capture basic document', function () {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("mocha: Waiting for first window");
            assert.equal(yield this.app.client.getWindowCount(), 1);
            let webDriverTestResultReader = new WebDriverTestResultReader_1.WebDriverTestResultReader(this.app);
            let result = yield webDriverTestResultReader.read();
            assert.equal(result.version, "4.0.0");
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLHNHQUFpRztBQUVqRyxxREFBZ0Q7QUFFaEQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRWpDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQztBQUV0QixRQUFRLENBQUMsaUJBQWlCLEVBQUU7SUFFeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUV0QixtQkFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUUxQixFQUFFLENBQUMsd0JBQXdCLEVBQUU7O1lBRXpCLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUNBQWlDLENBQUMsQ0FBQztZQUUvQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFeEQsSUFBSSx5QkFBeUIsR0FBRyxJQUFJLHFEQUF5QixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUV4RSxJQUFJLE1BQU0sR0FBUSxNQUFNLHlCQUF5QixDQUFDLElBQUksRUFBRSxDQUFDO1lBK0N6RCxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFMUMsQ0FBQztLQUFBLENBQUMsQ0FBQztBQUVQLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtXZWJEcml2ZXJUZXN0UmVzdWx0UmVhZGVyfSBmcm9tICcuLi8uLi9qcy90ZXN0L3Jlc3VsdHMvcmVhZGVyL1dlYkRyaXZlclRlc3RSZXN1bHRSZWFkZXInO1xuaW1wb3J0IHthc3NlcnRKU09OfSBmcm9tICcuLi8uLi9qcy90ZXN0L0Fzc2VydGlvbnMnO1xuaW1wb3J0IHtTcGVjdHJvbn0gZnJvbSAnLi4vLi4vanMvdGVzdC9TcGVjdHJvbic7XG5cbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuXG5jb25zdCBUSU1FT1VUID0gMTAwMDA7XG5cbmRlc2NyaWJlKCdjb250ZW50LWNhcHR1cmUnLCBmdW5jdGlvbiAoKSB7XG5cbiAgICB0aGlzLnRpbWVvdXQoVElNRU9VVCk7XG5cbiAgICBTcGVjdHJvbi5zZXR1cChfX2Rpcm5hbWUpO1xuXG4gICAgaXQoJ2NhcHR1cmUgYmFzaWMgZG9jdW1lbnQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJtb2NoYTogV2FpdGluZyBmb3IgZmlyc3Qgd2luZG93XCIpO1xuXG4gICAgICAgIGFzc2VydC5lcXVhbChhd2FpdCB0aGlzLmFwcC5jbGllbnQuZ2V0V2luZG93Q291bnQoKSwgMSk7XG5cbiAgICAgICAgbGV0IHdlYkRyaXZlclRlc3RSZXN1bHRSZWFkZXIgPSBuZXcgV2ViRHJpdmVyVGVzdFJlc3VsdFJlYWRlcih0aGlzLmFwcCk7XG5cbiAgICAgICAgbGV0IHJlc3VsdDogYW55ID0gYXdhaXQgd2ViRHJpdmVyVGVzdFJlc3VsdFJlYWRlci5yZWFkKCk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGxldCBleHBlY3RlZCA9IHtcbiAgICAgICAgLy8gICAgIFwiY2FwdHVyZWREb2N1bWVudHNcIjoge1xuICAgICAgICAvLyAgICAgICAgIFwiZmlsZTovLy9ob21lL2J1cnRvbi9wcm9qZWN0cy9wb2xhci1ib29rc2hlbGYvd2ViL3NwZWN0cm9uL2NvbnRlbnQtY2FwdHVyZS9hcHAuaHRtbFwiOiB7XG4gICAgICAgIC8vICAgICAgICAgICAgIFwiY29udGVudFwiOiBcIjxodG1sPjxoZWFkPjxiYXNlIGhyZWY9XFxcImZpbGU6Ly8vaG9tZS9idXJ0b24vcHJvamVjdHMvcG9sYXItYm9va3NoZWxmL3dlYi9zcGVjdHJvbi9jb250ZW50LWNhcHR1cmUvYXBwLmh0bWxcXFwiPjwvaGVhZD48Ym9keT5cXG5cXG48cD5cXG4gICAgVGhpcyBpcyBzb21lIGNvbnRlbnQuXFxuPC9wPlxcblxcblxcblxcblxcblxcbjwvYm9keT48L2h0bWw+XCIsXG4gICAgICAgIC8vICAgICAgICAgICAgIFwiY29udGVudFRleHRMZW5ndGhcIjogMTc3LFxuICAgICAgICAvLyAgICAgICAgICAgICBcImhyZWZcIjogXCJmaWxlOi8vL2hvbWUvYnVydG9uL3Byb2plY3RzL3BvbGFyLWJvb2tzaGVsZi93ZWIvc3BlY3Ryb24vY29udGVudC1jYXB0dXJlL2FwcC5odG1sXCIsXG4gICAgICAgIC8vICAgICAgICAgICAgIFwibXV0YXRpb25zXCI6IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIFwiYmFzZUFkZGVkXCI6IGZhbHNlLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgXCJjbGVhbnVwQmFzZVwiOiB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJiYXNlQWRkZWRcIjogdHJ1ZSxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBcImV4aXN0aW5nQmFzZVJlbW92ZWRcIjogZmFsc2VcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0sXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBcImNsZWFudXBIZWFkXCI6IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBcImhlYWRBZGRlZFwiOiBmYWxzZVxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIFwiY2xlYW51cFJlbW92ZVNjcmlwdHNcIjoge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwic2NyaXB0c1JlbW92ZWRcIjogMVxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIFwiZXZlbnRBdHRyaWJ1dGVzUmVtb3ZlZFwiOiAwLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgXCJleGlzdGluZ0Jhc2VSZW1vdmVkXCI6IGZhbHNlLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgXCJqYXZhc2NyaXB0QW5jaG9yc1JlbW92ZWRcIjogMCxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIFwic2hvd0FyaWFIaWRkZW5cIjogMFxuICAgICAgICAvLyAgICAgICAgICAgICB9LFxuICAgICAgICAvLyAgICAgICAgICAgICBcInNjcm9sbEJveFwiOiB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBcImhlaWdodFwiOiAwLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgXCJ3aWR0aFwiOiAwXG4gICAgICAgIC8vICAgICAgICAgICAgIH0sXG4gICAgICAgIC8vICAgICAgICAgICAgIFwic2Nyb2xsSGVpZ2h0XCI6IDAsXG4gICAgICAgIC8vICAgICAgICAgICAgIFwidGl0bGVcIjogXCJcIixcbiAgICAgICAgLy8gICAgICAgICAgICAgXCJ1cmxcIjogXCJmaWxlOi8vL2hvbWUvYnVydG9uL3Byb2plY3RzL3BvbGFyLWJvb2tzaGVsZi93ZWIvc3BlY3Ryb24vY29udGVudC1jYXB0dXJlL2FwcC5odG1sXCJcbiAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgIC8vICAgICB9LFxuICAgICAgICAvLyAgICAgXCJzY3JvbGxcIjoge1xuICAgICAgICAvLyAgICAgICAgIFwiaGVpZ2h0XCI6IDU3NSxcbiAgICAgICAgLy8gICAgICAgICBcIndpZHRoXCI6IDgwMFxuICAgICAgICAvLyAgICAgfSxcbiAgICAgICAgLy8gICAgIFwidGl0bGVcIjogXCJcIixcbiAgICAgICAgLy8gICAgIFwidHlwZVwiOiBcInBoelwiLFxuICAgICAgICAvLyAgICAgXCJ1cmxcIjogXCIuLi5yZW1vdmVkLi4uXCIsXG4gICAgICAgIC8vICAgICBcInZlcnNpb25cIjogXCI0LjAuMFwiXG4gICAgICAgIC8vIH07XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGFzc2VydEpTT04ocmVzdWx0LCBleHBlY3RlZCk7XG5cbiAgICAgICAgLy8gcmlnaHQgbm93IHdlJ3JlIGp1c3QgdmVyaWZ5aW5nIHRoYXQgaXQgd29ya3MsIG5vdCB0aGUgY29udGVudC5cbiAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdC52ZXJzaW9uLCBcIjQuMC4wXCIpO1xuXG4gICAgfSk7XG5cbn0pO1xuIl19