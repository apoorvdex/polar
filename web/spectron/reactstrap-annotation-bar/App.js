"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const reactstrap_1 = require("reactstrap");
const Popover_1 = __importDefault(require("reactstrap/lib/Popover"));
class App extends React.Component {
    constructor(props) {
        super(props);
        this.toggle = this.toggle.bind(this);
        this.state = {
            popoverOpen: false
        };
    }
    toggle() {
        if (!this.state.popoverOpen) {
            document.getElementById('annotationbar-anchor').style.cssText
                = 'position: relative; top: 300px; left: 300px;';
        }
        this.setState({
            popoverOpen: !this.state.popoverOpen
        });
    }
    render() {
        return (React.createElement("div", null,
            React.createElement("div", { className: "test rounded p-1 m-2 annotationbar text-center", style: {} },
                React.createElement(reactstrap_1.Button, { size: "md", type: "button", className: "btn p-1 m-1 annotationbar-btn", title: "", "aria-label": "", style: {} },
                    React.createElement("span", { className: "fas fa-highlighter", "aria-hidden": "true", style: { color: 'rgba(255,255,0)' } })),
                React.createElement(reactstrap_1.Button, { size: "md", type: "button", className: "btn p-1 m-1 annotationbar-btn", title: "", "aria-label": "", style: {} },
                    React.createElement("span", { className: "fas fa-highlighter annotationbar-btn-highlighter", "aria-hidden": "true", style: { color: 'rgba(255,0,0)' } })),
                React.createElement(reactstrap_1.Button, { size: "md", type: "button", className: "btn p-1 m-1 annotationbar-btn annotationbar-btn-highlighter", title: "", "aria-label": "", style: {} },
                    React.createElement("span", { className: "fas fa-highlighter", "aria-hidden": "true", style: { color: 'rgba(0,255,0)' } })),
                React.createElement(reactstrap_1.Button, { size: "md", type: "button", className: "btn p-1 m-1 annotationbar-btn", title: "", "aria-label": "", style: {} },
                    React.createElement("span", { className: "fas fa-comment", "aria-hidden": "true", style: { color: 'rgba(255,255,255)' } }))),
            React.createElement(reactstrap_1.Button, { id: "testbar-anchor", onClick: this.toggle }, "Launch Popover"),
            React.createElement(Popover_1.default, { placement: "bottom", isOpen: this.state.popoverOpen, className: "testbar-popover", target: "testbar-anchor", toggle: this.toggle },
                React.createElement("div", null, "thisis the asdasdf"))));
    }
}
exports.default = App;
//# sourceMappingURL=data:application/json;base64,