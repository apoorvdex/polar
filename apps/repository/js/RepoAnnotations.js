"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AnnotationType_1 = require("../../../web/js/metadata/AnnotationType");
const Texts_1 = require("../../../web/js/metadata/Texts");
class RepoAnnotations {
    static convert(docMeta) {
        const result = [];
        const docInfo = docMeta.docInfo;
        for (const pageMeta of Object.values(docMeta.pageMetas)) {
            const textHighlights = Object.values(pageMeta.textHighlights || {});
            const areaHighlights = Object.values(pageMeta.areaHighlights || {});
            const comments = Object.values(pageMeta.comments || {});
            const flashcards = Object.values(pageMeta.flashcards || {});
            for (const textHighlight of textHighlights) {
                result.push(this.toRepoAnnotation(textHighlight, AnnotationType_1.AnnotationType.TEXT_HIGHLIGHT, docInfo));
            }
            for (const areaHighlight of areaHighlights) {
                result.push(this.toRepoAnnotation(areaHighlight, AnnotationType_1.AnnotationType.AREA_HIGHLIGHT, docInfo));
            }
            for (const comment of comments) {
                result.push(this.toRepoAnnotation(comment, AnnotationType_1.AnnotationType.COMMENT, docInfo));
            }
            for (const flashcard of flashcards) {
                result.push(this.toRepoAnnotation(flashcard, AnnotationType_1.AnnotationType.FLASHCARD, docInfo));
            }
        }
        return result;
    }
    static toRepoAnnotation(sourceAnnotation, type, docInfo) {
        let text;
        if (sourceAnnotation.text) {
            const sourceText = sourceAnnotation.text;
            text = Texts_1.Texts.toPlainText(sourceText);
        }
        if (sourceAnnotation.content) {
            const sourceText = sourceAnnotation.content;
            text = Texts_1.Texts.toPlainText(sourceText);
        }
        if (type === AnnotationType_1.AnnotationType.FLASHCARD) {
            const flashcard = sourceAnnotation;
            const textFields = Object.values(flashcard.fields);
            if (textFields.length > 0) {
                text = Texts_1.Texts.toPlainText(textFields[0]);
            }
        }
        let meta;
        if (type === AnnotationType_1.AnnotationType.TEXT_HIGHLIGHT) {
            meta = { color: sourceAnnotation.color };
        }
        if (type === AnnotationType_1.AnnotationType.AREA_HIGHLIGHT) {
            meta = { color: sourceAnnotation.color };
        }
        return {
            id: sourceAnnotation.id,
            fingerprint: docInfo.fingerprint,
            text,
            type,
            created: sourceAnnotation.created,
            tags: docInfo.tags || {},
            meta,
            docInfo
        };
    }
}
exports.RepoAnnotations = RepoAnnotations;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVwb0Fubm90YXRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUmVwb0Fubm90YXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBS0EsNEVBQXVFO0FBSXZFLDBEQUFxRDtBQUVyRCxNQUFhLGVBQWU7SUFFakIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFnQjtRQUVsQyxNQUFNLE1BQU0sR0FBcUIsRUFBRSxDQUFDO1FBQ3BDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFFaEMsS0FBSyxNQUFNLFFBQVEsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUVyRCxNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDLENBQUM7WUFDcEUsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ3BFLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUN4RCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUU7WUFFN0QsS0FBSyxNQUFNLGFBQWEsSUFBSSxjQUFjLEVBQUU7Z0JBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSwrQkFBYyxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQzdGO1lBRUQsS0FBSyxNQUFNLGFBQWEsSUFBSSxjQUFjLEVBQUU7Z0JBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSwrQkFBYyxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQzdGO1lBRUQsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUU7Z0JBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSwrQkFBYyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQ2hGO1lBRUQsS0FBSyxNQUFNLFNBQVMsSUFBSSxVQUFVLEVBQUU7Z0JBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSwrQkFBYyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQ3BGO1NBRUo7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUVsQixDQUFDO0lBRU0sTUFBTSxDQUFDLGdCQUFnQixDQUFDLGdCQUFxRSxFQUNyRSxJQUFvQixFQUNwQixPQUFnQjtRQUszQyxJQUFJLElBQXdCLENBQUM7UUFFN0IsSUFBVyxnQkFBaUIsQ0FBQyxJQUFJLEVBQUU7WUFDL0IsTUFBTSxVQUFVLEdBQWdCLGdCQUFpQixDQUFDLElBQUksQ0FBQztZQUN2RCxJQUFJLEdBQUcsYUFBSyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN4QztRQUVELElBQVcsZ0JBQWlCLENBQUMsT0FBTyxFQUFFO1lBQ2xDLE1BQU0sVUFBVSxHQUFnQixnQkFBaUIsQ0FBQyxPQUFPLENBQUM7WUFDMUQsSUFBSSxHQUFHLGFBQUssQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDeEM7UUFFRCxJQUFJLElBQUksS0FBSywrQkFBYyxDQUFDLFNBQVMsRUFBRTtZQUNuQyxNQUFNLFNBQVMsR0FBZSxnQkFBZ0IsQ0FBQztZQUMvQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVuRCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QixJQUFJLEdBQUcsYUFBSyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMzQztTQUVKO1FBRUQsSUFBSSxJQUFtQyxDQUFDO1FBRXhDLElBQUksSUFBSSxLQUFLLCtCQUFjLENBQUMsY0FBYyxFQUFFO1lBQ3hDLElBQUksR0FBRyxFQUFDLEtBQUssRUFBbUIsZ0JBQWlCLENBQUMsS0FBSyxFQUFDLENBQUM7U0FDNUQ7UUFFRCxJQUFJLElBQUksS0FBSywrQkFBYyxDQUFDLGNBQWMsRUFBRTtZQUN4QyxJQUFJLEdBQUcsRUFBQyxLQUFLLEVBQW1CLGdCQUFpQixDQUFDLEtBQUssRUFBQyxDQUFDO1NBQzVEO1FBRUQsT0FBTztZQUNILEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFO1lBQ3ZCLFdBQVcsRUFBRSxPQUFPLENBQUMsV0FBVztZQUNoQyxJQUFJO1lBQ0osSUFBSTtZQUNKLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxPQUFPO1lBQ2pDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxJQUFJLEVBQUU7WUFDeEIsSUFBSTtZQUNKLE9BQU87U0FDVixDQUFDO0lBRU4sQ0FBQztDQUVKO0FBeEZELDBDQXdGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VGV4dEhpZ2hsaWdodH0gZnJvbSAnLi4vLi4vLi4vd2ViL2pzL21ldGFkYXRhL1RleHRIaWdobGlnaHQnO1xuaW1wb3J0IHtBcmVhSGlnaGxpZ2h0fSBmcm9tICcuLi8uLi8uLi93ZWIvanMvbWV0YWRhdGEvQXJlYUhpZ2hsaWdodCc7XG5pbXBvcnQge0NvbW1lbnR9IGZyb20gJy4uLy4uLy4uL3dlYi9qcy9tZXRhZGF0YS9Db21tZW50JztcbmltcG9ydCB7RG9jSW5mb30gZnJvbSAnLi4vLi4vLi4vd2ViL2pzL21ldGFkYXRhL0RvY0luZm8nO1xuaW1wb3J0IHtSZXBvQW5ub3RhdGlvbiwgUmVwb0hpZ2hsaWdodEluZm99IGZyb20gJy4vUmVwb0Fubm90YXRpb24nO1xuaW1wb3J0IHtBbm5vdGF0aW9uVHlwZX0gZnJvbSAnLi4vLi4vLi4vd2ViL2pzL21ldGFkYXRhL0Fubm90YXRpb25UeXBlJztcbmltcG9ydCB7RG9jTWV0YX0gZnJvbSAnLi4vLi4vLi4vd2ViL2pzL21ldGFkYXRhL0RvY01ldGEnO1xuaW1wb3J0IHtGbGFzaGNhcmR9IGZyb20gJy4uLy4uLy4uL3dlYi9qcy9tZXRhZGF0YS9GbGFzaGNhcmQnO1xuaW1wb3J0IHtUZXh0fSBmcm9tICcuLi8uLi8uLi93ZWIvanMvbWV0YWRhdGEvVGV4dCc7XG5pbXBvcnQge1RleHRzfSBmcm9tICcuLi8uLi8uLi93ZWIvanMvbWV0YWRhdGEvVGV4dHMnO1xuXG5leHBvcnQgY2xhc3MgUmVwb0Fubm90YXRpb25zIHtcblxuICAgIHB1YmxpYyBzdGF0aWMgY29udmVydChkb2NNZXRhOiBEb2NNZXRhKTogUmVwb0Fubm90YXRpb25bXSB7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0OiBSZXBvQW5ub3RhdGlvbltdID0gW107XG4gICAgICAgIGNvbnN0IGRvY0luZm8gPSBkb2NNZXRhLmRvY0luZm87XG5cbiAgICAgICAgZm9yIChjb25zdCBwYWdlTWV0YSBvZiBPYmplY3QudmFsdWVzKGRvY01ldGEucGFnZU1ldGFzKSkge1xuXG4gICAgICAgICAgICBjb25zdCB0ZXh0SGlnaGxpZ2h0cyA9IE9iamVjdC52YWx1ZXMocGFnZU1ldGEudGV4dEhpZ2hsaWdodHMgfHwge30pO1xuICAgICAgICAgICAgY29uc3QgYXJlYUhpZ2hsaWdodHMgPSBPYmplY3QudmFsdWVzKHBhZ2VNZXRhLmFyZWFIaWdobGlnaHRzIHx8IHt9KTtcbiAgICAgICAgICAgIGNvbnN0IGNvbW1lbnRzID0gT2JqZWN0LnZhbHVlcyhwYWdlTWV0YS5jb21tZW50cyB8fCB7fSk7XG4gICAgICAgICAgICBjb25zdCBmbGFzaGNhcmRzID0gT2JqZWN0LnZhbHVlcyhwYWdlTWV0YS5mbGFzaGNhcmRzIHx8IHt9KSA7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgdGV4dEhpZ2hsaWdodCBvZiB0ZXh0SGlnaGxpZ2h0cykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMudG9SZXBvQW5ub3RhdGlvbih0ZXh0SGlnaGxpZ2h0LCBBbm5vdGF0aW9uVHlwZS5URVhUX0hJR0hMSUdIVCwgZG9jSW5mbykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGFyZWFIaWdobGlnaHQgb2YgYXJlYUhpZ2hsaWdodHMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLnRvUmVwb0Fubm90YXRpb24oYXJlYUhpZ2hsaWdodCwgQW5ub3RhdGlvblR5cGUuQVJFQV9ISUdITElHSFQsIGRvY0luZm8pKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChjb25zdCBjb21tZW50IG9mIGNvbW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy50b1JlcG9Bbm5vdGF0aW9uKGNvbW1lbnQsIEFubm90YXRpb25UeXBlLkNPTU1FTlQsIGRvY0luZm8pKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChjb25zdCBmbGFzaGNhcmQgb2YgZmxhc2hjYXJkcykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMudG9SZXBvQW5ub3RhdGlvbihmbGFzaGNhcmQsIEFubm90YXRpb25UeXBlLkZMQVNIQ0FSRCwgZG9jSW5mbykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyB0b1JlcG9Bbm5vdGF0aW9uKHNvdXJjZUFubm90YXRpb246IFRleHRIaWdobGlnaHQgfCBBcmVhSGlnaGxpZ2h0IHwgQ29tbWVudCB8IEZsYXNoY2FyZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQW5ub3RhdGlvblR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY0luZm86IERvY0luZm8pOiBSZXBvQW5ub3RhdGlvbiB7XG5cbiAgICAgICAgLy8gY29kZSBzaGFyZWQgd2l0aCBEb2NBbm5vdGF0aW9ucyBhbmQgd2Ugc2hvdWxkIHJlZmFjdG9yIHRvXG4gICAgICAgIC8vIHN0YW5kYXJkaXplLlxuXG4gICAgICAgIGxldCB0ZXh0OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKCg8YW55PiBzb3VyY2VBbm5vdGF0aW9uKS50ZXh0KSB7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2VUZXh0OiBUZXh0ID0gKDxhbnk+IHNvdXJjZUFubm90YXRpb24pLnRleHQ7XG4gICAgICAgICAgICB0ZXh0ID0gVGV4dHMudG9QbGFpblRleHQoc291cmNlVGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKDxhbnk+IHNvdXJjZUFubm90YXRpb24pLmNvbnRlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZVRleHQ6IFRleHQgPSAoPGFueT4gc291cmNlQW5ub3RhdGlvbikuY29udGVudDtcbiAgICAgICAgICAgIHRleHQgPSBUZXh0cy50b1BsYWluVGV4dChzb3VyY2VUZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlID09PSBBbm5vdGF0aW9uVHlwZS5GTEFTSENBUkQpIHtcbiAgICAgICAgICAgIGNvbnN0IGZsYXNoY2FyZCA9IDxGbGFzaGNhcmQ+IHNvdXJjZUFubm90YXRpb247XG4gICAgICAgICAgICBjb25zdCB0ZXh0RmllbGRzID0gT2JqZWN0LnZhbHVlcyhmbGFzaGNhcmQuZmllbGRzKTtcblxuICAgICAgICAgICAgaWYgKHRleHRGaWVsZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRleHQgPSBUZXh0cy50b1BsYWluVGV4dCh0ZXh0RmllbGRzWzBdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG1ldGE6IFJlcG9IaWdobGlnaHRJbmZvIHwgdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICh0eXBlID09PSBBbm5vdGF0aW9uVHlwZS5URVhUX0hJR0hMSUdIVCkge1xuICAgICAgICAgICAgbWV0YSA9IHtjb2xvcjogKDxUZXh0SGlnaGxpZ2h0PiBzb3VyY2VBbm5vdGF0aW9uKS5jb2xvcn07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZSA9PT0gQW5ub3RhdGlvblR5cGUuQVJFQV9ISUdITElHSFQpIHtcbiAgICAgICAgICAgIG1ldGEgPSB7Y29sb3I6ICg8QXJlYUhpZ2hsaWdodD4gc291cmNlQW5ub3RhdGlvbikuY29sb3J9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiBzb3VyY2VBbm5vdGF0aW9uLmlkLFxuICAgICAgICAgICAgZmluZ2VycHJpbnQ6IGRvY0luZm8uZmluZ2VycHJpbnQsXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGNyZWF0ZWQ6IHNvdXJjZUFubm90YXRpb24uY3JlYXRlZCxcbiAgICAgICAgICAgIHRhZ3M6IGRvY0luZm8udGFncyB8fCB7fSxcbiAgICAgICAgICAgIG1ldGEsXG4gICAgICAgICAgICBkb2NJbmZvXG4gICAgICAgIH07XG5cbiAgICB9XG5cbn1cbiJdfQ==