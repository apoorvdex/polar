"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Logger_1 = require("../../../web/js/logger/Logger");
const Blackout_1 = require("../../../web/js/ui/blackout/Blackout");
const NavLogo_1 = require("./nav/NavLogo");
const RepoSidebarItem_1 = require("./sidebar/RepoSidebarItem");
const SimpleTooltip_1 = require("../../../web/js/ui/tooltip/SimpleTooltip");
const GDPRNotice_1 = require("../../../web/js/ui/gdpr/GDPRNotice");
const Button_1 = __importDefault(require("reactstrap/lib/Button"));
const ListGroup_1 = __importDefault(require("reactstrap/lib/ListGroup"));
const log = Logger_1.Logger.create();
const Styles = {
    sidebar: {
        position: 'absolute',
        top: 0,
        left: 0,
        backgroundColor: '#fff',
        zIndex: 99999,
        height: 'calc(100%)',
        width: '200px',
        paddingLeft: '1px',
        paddingTop: '1px'
    },
    subheader: {
        display: 'table'
    },
    subheaderItem: {}
};
class RepoSidebar extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.state = {
            expanded: false
        };
        window.addEventListener('keyup', event => {
            if (event.key === "Escape") {
                if (this.state.expanded) {
                    this.setState({ expanded: false });
                }
            }
        });
    }
    componentDidUpdate(prevProps, prevState, snapshot) {
        if (prevState.expanded !== this.state.expanded) {
            Blackout_1.Blackout.toggle(this.state.expanded);
        }
    }
    render() {
        const display = this.state.expanded ? 'block' : 'none';
        const sidebarStyle = Object.assign({}, Styles.sidebar, { display });
        const NavButtons = () => (React.createElement("div", { style: { display: 'flex' } },
            React.createElement("div", { id: "toggle-sidebar", className: "mr-1", style: { marginTop: 'auto', marginBottom: 'auto' } },
                React.createElement(Button_1.default, { color: 'light', onClick: () => this.toggle() },
                    React.createElement("i", { className: "fas fa-bars" }))),
            React.createElement(SimpleTooltip_1.SimpleTooltip, { target: "toggle-sidebar" }, "Toggle showing the sidebar"),
            React.createElement("div", { style: { marginTop: 'auto', marginBottom: 'auto' } },
                React.createElement(NavLogo_1.NavLogo, null))));
        return (React.createElement("div", { className: "repo-sidebar" },
            React.createElement(GDPRNotice_1.GDPRNotice, null),
            React.createElement("div", null,
                React.createElement(NavButtons, null)),
            React.createElement("section", { className: "sidebar", style: sidebarStyle, "data-expanded": this.state.expanded, onKeyUp: event => this.onKeyUp(event) },
                React.createElement("div", { className: "subheader p-1", style: Styles.subheader },
                    React.createElement(NavButtons, null)),
                React.createElement(ListGroup_1.default, { flush: true },
                    React.createElement(RepoSidebarItem_1.RepoSidebarItem, { id: "sidebar-item-documents", href: "#", onClick: () => this.toggle(), iconClassName: "fas fa-archive", text: "Documents" }),
                    React.createElement(RepoSidebarItem_1.RepoSidebarItem, { id: "sidebar-item-annotations", href: "#annotations", onClick: () => this.toggle(), iconClassName: "fas fa-layer-group", text: "Annotations" }),
                    React.createElement(RepoSidebarItem_1.RepoSidebarItem, { id: "sidebar-item-stats", href: "#stats", onClick: () => this.toggle(), iconClassName: "fas fa-chart-line", text: "Statistics" }),
                    React.createElement(RepoSidebarItem_1.RepoSidebarItem, { id: "sidebar-item-logs", href: "#logs", onClick: () => this.toggle(), iconClassName: "fas fa-info-circle", text: "Logs" }),
                    React.createElement(RepoSidebarItem_1.RepoSidebarItem, { id: "sidebar-item-community", href: "#community", onClick: () => this.toggle(), iconClassName: "fas fa-hands-helping", text: "Community" }),
                    React.createElement(RepoSidebarItem_1.RepoSidebarItem, { id: "sidebar-item-whatsnew", href: "#whats-new", onClick: () => this.toggle(), iconClassName: "fas fa-bullhorn", text: "Whats New" })),
                React.createElement(SimpleTooltip_1.SimpleTooltip, { target: "sidebar-item-documents", show: 0, placement: "right" }, "Manage all documents you're reading including filtering and sorting."),
                React.createElement(SimpleTooltip_1.SimpleTooltip, { target: "sidebar-item-annotations", show: 0, placement: "right" }, "Manage all annotations of all your documents in one central view."),
                React.createElement(SimpleTooltip_1.SimpleTooltip, { target: "sidebar-item-stats", show: 0, placement: "right" }, "Show stats on your usage of Polar including stats on tags, rate of document addition, etc."),
                React.createElement(SimpleTooltip_1.SimpleTooltip, { target: "sidebar-item-logs", show: 0, placement: "right" }, "Show logs on internal activity during background operations like cloud activity and sync."),
                React.createElement(SimpleTooltip_1.SimpleTooltip, { target: "sidebar-item-community", show: 0, placement: "right" }, "Find community resources including links to discussions around Polar."),
                React.createElement(SimpleTooltip_1.SimpleTooltip, { target: "sidebar-item-whatsnew", show: 0, placement: "right" }, "Find out what's new with each Polar release."))));
    }
    onKeyUp(event) {
    }
    toggle() {
        const expanded = !this.state.expanded;
        Blackout_1.Blackout.toggle(expanded);
        this.setState({
            expanded
        });
    }
}
exports.RepoSidebar = RepoSidebar;
//# sourceMappingURL=data:application/json;base64,