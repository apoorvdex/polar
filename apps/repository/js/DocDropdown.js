"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const ConfirmPopover_1 = require("../../../web/js/ui/confirm/ConfirmPopover");
const TextInputPopover_1 = require("../../../web/js/ui/text_input/TextInputPopover");
const Logger_1 = require("../../../web/js/logger/Logger");
const electron_1 = require("electron");
const Directories_1 = require("../../../web/js/datastore/Directories");
const FilePaths_1 = require("../../../web/js/util/FilePaths");
const Toaster_1 = require("../../../web/js/ui/toaster/Toaster");
const Clipboards_1 = require("../../../web/js/util/system/clipboard/Clipboards");
const DropdownItem_1 = __importDefault(require("reactstrap/lib/DropdownItem"));
const DropdownToggle_1 = __importDefault(require("reactstrap/lib/DropdownToggle"));
const Dropdown_1 = __importDefault(require("reactstrap/lib/Dropdown"));
const DropdownMenu_1 = __importDefault(require("reactstrap/lib/DropdownMenu"));
const AppRuntime_1 = require("../../../web/js/AppRuntime");
const log = Logger_1.Logger.create();
const Styles = {
    DropdownMenu: {
        zIndex: 999,
        fontSize: '14px'
    },
};
class DocDropdown extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.open = false;
        this.selected = 'none';
        this.toggle = this.toggle.bind(this);
        this.select = this.select.bind(this);
        this.onDelete = this.onDelete.bind(this);
        this.onSetTitle = this.onSetTitle.bind(this);
        this.onCopyURL = this.onCopyURL.bind(this);
        this.state = {
            open: this.open,
            selected: this.selected,
        };
    }
    render() {
        return (React.createElement("div", { className: "doc-dropdown-parent" },
            React.createElement(Dropdown_1.default, { id: this.props.id, isOpen: this.state.open, toggle: this.toggle },
                React.createElement(DropdownToggle_1.default, { color: "link", className: "doc-dropdown-button btn text-muted pl-1 pr-1", id: this.props.id + '-dropdown-toggle' },
                    React.createElement("i", { className: "fas fa-ellipsis-h" })),
                React.createElement(DropdownMenu_1.default, { style: Styles.DropdownMenu },
                    React.createElement(DropdownItem_1.default, { onClick: () => this.select('set-title') }, "Set Title"),
                    React.createElement(DropdownItem_1.default, { disabled: !this.props.repoDocInfo.url, onClick: () => this.onCopyURL(this.props.repoDocInfo.url) }, "Copy Original URL"),
                    React.createElement(DropdownItem_1.default, { disabled: !this.props.repoDocInfo.filename, hidden: AppRuntime_1.AppRuntime.isBrowser(), onClick: () => this.onShowFile(this.props.repoDocInfo.filename) }, "Show File"),
                    React.createElement(DropdownItem_1.default, { disabled: !this.props.repoDocInfo.filename, hidden: AppRuntime_1.AppRuntime.isBrowser(), onClick: () => this.onCopyFilePath(this.props.repoDocInfo.filename) }, "Copy File Path"),
                    React.createElement(DropdownItem_1.default, { disabled: !this.props.repoDocInfo.filename, onClick: () => this.onCopyText(this.props.repoDocInfo.fingerprint, "Document ID copied to clipboard") }, "Copy Document ID"),
                    React.createElement(DropdownItem_1.default, { divider: true }),
                    React.createElement(DropdownItem_1.default, { className: "text-danger", onClick: () => this.select('delete') }, "Delete"))),
            React.createElement(TextInputPopover_1.TextInputPopover, { open: this.state.selected === 'set-title', target: this.props.id + '-dropdown-toggle', title: "Enter title for document:", defaultValue: this.props.repoDocInfo.title, onCancel: () => this.select('none'), onComplete: this.onSetTitle }),
            React.createElement(ConfirmPopover_1.ConfirmPopover, { open: this.state.selected === 'delete', target: this.props.id + '-dropdown-toggle', title: "Are you sure you want to delete this document? ", subtitle: "The document and all annotations will be lost.", onCancel: () => this.select('none'), onConfirm: this.onDelete })));
    }
    onShowFile(filename) {
        const directories = new Directories_1.Directories();
        const path = FilePaths_1.FilePaths.join(directories.stashDir, filename);
        electron_1.shell.showItemInFolder(path);
    }
    onCopyFilePath(filename) {
        const directories = new Directories_1.Directories();
        const path = FilePaths_1.FilePaths.join(directories.stashDir, filename);
        this.copyText(path);
        Toaster_1.Toaster.success("File path copied to clipboard!");
    }
    onCopyText(text, message) {
        this.copyText(text);
        Toaster_1.Toaster.success(message);
    }
    onCopyURL(url) {
        this.copyText(url);
        Toaster_1.Toaster.success("URL copied to clipboard!");
    }
    copyText(text) {
        Clipboards_1.Clipboards.getInstance().writeText(text);
    }
    onSetTitle(title) {
        this.select('none');
        this.props.onSetTitle(this.props.repoDocInfo, title);
    }
    onDelete() {
        this.select('none');
        this.props.onDelete(this.props.repoDocInfo);
    }
    toggle() {
        if (this.selected !== 'none') {
            this.open = false;
        }
        else {
            this.open = !this.state.open;
        }
        this.refresh();
    }
    select(selected) {
        this.selected = selected;
        this.refresh();
    }
    refresh() {
        this.setState({
            open: this.open,
            selected: this.selected
        });
    }
}
exports.DocDropdown = DocDropdown;
//# sourceMappingURL=data:application/json;base64,