"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Creatable_1 = __importDefault(require("react-select/lib/Creatable"));
const Blackout_1 = require("../../../web/js/ui/blackout/Blackout");
const Optional_1 = require("../../../web/js/util/ts/Optional");
const TagSelectOptions_1 = require("./TagSelectOptions");
const Tags_1 = require("../../../web/js/tags/Tags");
const Logger_1 = require("../../../web/js/logger/Logger");
const Button_1 = __importDefault(require("reactstrap/lib/Button"));
const Popover_1 = __importDefault(require("reactstrap/lib/Popover"));
const PopoverBody_1 = __importDefault(require("reactstrap/lib/PopoverBody"));
let SEQUENCE = 0;
const log = Logger_1.Logger.create();
const Styles = {
    popover: {
        width: '500px !important',
        maxWidth: '9999px !important'
    },
    label: {
        fontWeight: 'bold'
    },
    relatedTags: {
        marginTop: '5px',
        display: 'flex',
    },
    relatedTagsLabel: {
        marginTop: 'auto',
        marginBottom: 'auto'
    },
    relatedTag: {
        display: 'inline-block',
        backgroundColor: '#e5e5e5',
        color: 'hsl(0,0%,20%)',
        fontSize: '12px',
        padding: '3px',
        marginTop: 'auto',
        marginBottom: 'auto'
    }
};
class TagInput extends React.PureComponent {
    constructor(props, context) {
        super(props, context);
        this.id = "popover-" + SEQUENCE++;
        this.toggle = this.toggle.bind(this);
        this.handleChange = this.handleChange.bind(this);
        this.state = {
            open: false,
            tags: []
        };
    }
    toggle() {
        const open = !this.state.open;
        Blackout_1.Blackout.toggle(open);
        const tags = TagSelectOptions_1.TagSelectOptions.fromTags(this.props.existingTags || []);
        this.setState(Object.assign({}, this.state, { open, tags }));
    }
    render() {
        const availableTagOptions = TagSelectOptions_1.TagSelectOptions.fromTags(this.props.availableTags);
        const existingTags = Optional_1.Optional.of(this.props.existingTags).getOrElse([]);
        const defaultValue = TagSelectOptions_1.TagSelectOptions.fromTags(existingTags)
            .sort((a, b) => a.label.localeCompare(b.label));
        const relatedTags = this.props.relatedTags.compute(this.state.tags.map(current => current.label))
            .map(current => current.tag);
        const RelatedTagsItems = () => {
            return React.createElement("span", null, relatedTags.map(item => React.createElement(Button_1.default, { className: "mr-1", key: item, style: Styles.relatedTag, color: "light", size: "sm", onClick: () => this.addTag(item) }, item)));
        };
        const RelatedTagsWidget = () => {
            if (relatedTags.length === 0) {
                return React.createElement("div", null);
            }
            return React.createElement("div", { style: Styles.relatedTags },
                React.createElement("div", { className: "mr-1", style: Styles.relatedTagsLabel },
                    React.createElement("strong", null, "Related tags: ")),
                React.createElement(RelatedTagsItems, null));
        };
        return (React.createElement("div", null,
            React.createElement("i", { id: this.id, onClick: this.toggle, className: "fa fa-tag doc-button doc-button-inactive" }),
            React.createElement(Popover_1.default, { placement: "auto", isOpen: this.state.open, target: this.id, trigger: "legacy", toggle: this.toggle, className: "tag-input-popover shadow" },
                React.createElement(PopoverBody_1.default, { style: Styles.popover },
                    React.createElement("div", { className: "pt-1 pb-1" },
                        React.createElement("strong", null, "Assign tags to document:")),
                    React.createElement(Creatable_1.default, { isMulti: true, isClearable: true, autoFocus: true, onKeyDown: event => this.onKeyDown(event), className: "basic-multi-select", classNamePrefix: "select", onChange: (selectedOptions) => this.handleChange(selectedOptions), value: this.state.tags, defaultValue: defaultValue, placeholder: "Create or select tags ...", options: availableTagOptions },
                        React.createElement("div", null, "this is the error")),
                    React.createElement("div", null,
                        React.createElement(RelatedTagsWidget, null))))));
    }
    addTag(tag) {
        const newTag = { value: tag, label: tag };
        const tags = [...this.state.tags, newTag];
        this.setState(Object.assign({}, this.state, { tags }));
        this.handleChange(tags);
    }
    onKeyDown(event) {
        if (event.key === "Escape") {
            this.toggle();
        }
        if (event.getModifierState("Control") && event.key === "Enter") {
            this.toggle();
        }
    }
    save() {
    }
    handleChange(selectedOptions) {
        const tags = TagSelectOptions_1.TagSelectOptions.toTags(selectedOptions);
        const validTags = Tags_1.Tags.findValidTags(...tags);
        const invalidTags = Tags_1.Tags.findInvalidTags(...tags);
        this.setState(Object.assign({}, this.state, { tags: TagSelectOptions_1.TagSelectOptions.fromTags(validTags) }));
        if (this.props.onChange) {
            this.props.onChange(validTags);
            if (invalidTags.length > 0) {
                log.warn("Some tags were invalid", invalidTags);
            }
        }
    }
}
exports.TagInput = TagInput;
//# sourceMappingURL=data:application/json;base64,