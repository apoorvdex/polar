"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Logger_1 = require("../../../../../../web/js/logger/Logger");
const EmbeddedImages_1 = require("./EmbeddedImages");
const log = Logger_1.Logger.create();
class WhatsNewContent extends React.Component {
    constructor(props, context) {
        super(props, context);
    }
    render() {
        return (React.createElement("div", null,
            React.createElement("div", null,
                React.createElement("h3", null, "Polar 1.13.12"),
                React.createElement("div", { className: "intro" },
                    React.createElement("p", null, "This release moves us farther towards improving usability as well as having a production web version of Polar."),
                    React.createElement("p", null, "A big new feature here is automatic-resume of your reading from the last pagemark position.")),
                React.createElement("ul", null,
                    React.createElement("li", null,
                        React.createElement("p", null, "new auto-resume of reading which is now enabled by default.")),
                    React.createElement("li", null,
                        React.createElement("p", null, "new prefs system for disk datastore and cloud and defaults to localstorage in the browser.")),
                    React.createElement("li", null,
                        React.createElement("p", null, "We no longer show background progress updates that complete very quickly. This was often distracting when the app was working in the background.")),
                    React.createElement("li", null,
                        React.createElement("p", null, "Fixed bug with PDF scroll into view where we wouldn't properly scroll to the proper position. Now we just scroll to the page that was last pagemarked.")),
                    React.createElement("li", null,
                        React.createElement("p", null, "We had the wrong link to the documentation.")),
                    React.createElement("li", null,
                        React.createElement("p", null, "Update to Electron 3.1.6")),
                    React.createElement("li", null,
                        React.createElement("p", null, "New AuthHandler system so that we can show user account information when using Firebase auth.")),
                    React.createElement("li", null,
                        React.createElement("p", null, "Cut down memory usage of the webapp from 1GB to about 200MB.  The gmail app is about 120MB so this isn't far off from being 'reasonable' in terms of memory usage.")),
                    React.createElement("li", null,
                        React.createElement("p", null, "Upgraded to latest versions of Firebase and Webpack")))),
            React.createElement("div", null,
                React.createElement("h3", null, "Polar 1.13.11"),
                React.createElement("div", { className: "intro" },
                    React.createElement("p", null, "This is a small release from perspective of desktop users but this also adds support for the new web app which is actually live now but I'm not yet ready to give out the URL just yet."),
                    React.createElement("p", null, "The biggest change is that you can now create highlights through pagemarks without them interfering in your workflow.  Only the corners are resizable now but other than that you can work directly with the document.")),
                React.createElement("ul", null,
                    React.createElement("li", null, "Fixed bugs with multi-select not being able to properly pick the right tags or create tags"),
                    React.createElement("li", null, "Update to Electron 3.1.5"),
                    React.createElement("li", null, "Pagemarks now allow you to work through them and still can highlight and create + delete annotations now without the pagemarks getting in the way."),
                    React.createElement("li", null, "A number of changes needed to get the webapp version of Polar to work."))),
            React.createElement("div", null,
                React.createElement("h3", null, "Polar 1.13.9"),
                React.createElement("div", { className: "intro" },
                    React.createElement("p", null, "Lots of polish in the 1.13.x series of releases. Enable support for a new user tour during onboarding and a great deal of bug fixes and usability enhancements."),
                    React.createElement("ul", null,
                        React.createElement("li", null, "Drag and drop of whole directories works now... Including a UI showing the files being imported.  I need to include a timeout though."),
                        React.createElement("li", null, "A number of changes needed for the webapp are now merged into master."),
                        React.createElement("li", null, "Blackout when dragging files onto polar and drag to import now works."),
                        React.createElement("li", null, "Fixed escape so the filtered tag input goes away."),
                        React.createElement("li", null, "Fixed bugs with deleting items when they were not selected."),
                        React.createElement("li", null, "added metrics for anki sync and the nr of successful and failed tasks."),
                        React.createElement("li", null, "Track screen resolution size and platform name properly"),
                        React.createElement("li", null, "Only show splashes when the user is online"),
                        React.createElement("li", null, "Upgrade to latest reactstrap and bootstrap versions.")),
                    React.createElement("h4", null, "1.13.8"),
                    React.createElement("ul", null,
                        React.createElement("li", null, "Should be the right amount of splashes now."),
                        React.createElement("li", null, "Analytics for the add content button. Not sure if people are capturing pages or not."),
                        React.createElement("li", null, "I inverted the splash time cutoff in this previous previous release and it should be fixed now."),
                        React.createElement("li", null, "Auto app update implemented for MacOS and Windows.  There is a random delay of 3 days to prevent breaking clients in the wild."),
                        React.createElement("li", null, "Don't rely on GA to determine the OS.  Record it ourselves."),
                        React.createElement("li", null, "Enabling auto-updates in this release to keep everyone on the latest so I can iterate faster.")),
                    React.createElement("h4", null, "1.13.7"),
                    React.createElement("ul", null,
                        React.createElement("li", null, "quick release to disable another GA feature which could be breaking our analytics"),
                        React.createElement("li", null, "Fixed Premium splash layout on smaller screens...")),
                    React.createElement("h4", null, "1.13.6"),
                    React.createElement("ul", null,
                        React.createElement("li", null, "Splash messages should be delivered to users at the right times now."),
                        React.createElement("li", null, "I think I fixed a bug with tracking not working due to including 'app version' in the analytics data.")),
                    React.createElement("h4", null, "1.13.5"),
                    React.createElement("ul", null,
                        React.createElement("li", null, "multi-delete button for bulk deleting documents"),
                        React.createElement("li", null, "buttons in the doc repo are a bit bigger for better hit targets"),
                        React.createElement("li", null, "multi-column selection by checkbox now to make it a bit more obvious for users to select multiple documents"),
                        React.createElement("li", null, "Clicking flagged or archived buttons no longer select the row which was confusing.")),
                    React.createElement("h4", null, "1.13.4"),
                    React.createElement("ul", null,
                        React.createElement("li", null, "Preview release DID NOT load the example docs (BAD BUG)"),
                        React.createElement("li", null, "Now targeting header in the tour to avoid scroll.")),
                    React.createElement("h4", null, "1.13.3"),
                    React.createElement("ul", null,
                        React.createElement("li", null, "New tour feedback and the end of the tour."),
                        React.createElement("li", null, "Only load example docs once."),
                        React.createElement("li", null, "GA events for cloud login and configured"),
                        React.createElement("li", null, "User-Agent was not being properly tracked and this as very important to detect which Operating Systems were being used."),
                        React.createElement("li", null, "Fixed problem with constraining the window sizes on smaller displays like smaller laptops."),
                        React.createElement("li", null, "Sidebar now visible by default and the setting remembered with a local pref."),
                        React.createElement("li", null, "Fixed messenger and F10 and other commands that were accidentally broken in this release."))),
                React.createElement("h3", null, "Polar 1.12"),
                React.createElement("div", { className: "intro" },
                    React.createElement("h4", null, "Changelog:"),
                    React.createElement("p", null, "This release focuses mostly on improving the reading management capabilities in Polar.  We now support pagemark modes and can change the colors of the pagemark based on the mode.  Additionally, we have statistics for tracking the number of pages you read per day and an integrated calendar chart showing this visually in the stats page."))),
            React.createElement("div", null,
                React.createElement("h3", null, "Polar 1.11"),
                React.createElement("div", { className: "intro" },
                    React.createElement("h4", null, "Changelog:"),
                    React.createElement("p", null, "Version 1.11 has fewer features than our normal weekly releases. The next release will take a bit longer and we wanted to get a version released sooner rather than later."),
                    React.createElement("ul", null,
                        React.createElement("li", null, "Feature: More consistent header bar throughout the app."),
                        React.createElement("li", null, "Feature: Pagemark batches which help working with PDFs that have multiple pages.  Now if you create pagemarks across pages you can delete one and the whole batch is also deleted."),
                        React.createElement("li", null, "Feature: Page number in markdown export"),
                        React.createElement("li", null, "Feature: Disabled the top message boxes.  They were annoying and only a stop gap until we have a proper onboarding mechanism."),
                        React.createElement("li", null, " Bug: Fixed bug with page zoom not working properly in the HTML viewer.  The zoom now works but pagemarks still aren't placed properly. "),
                        React.createElement("li", null, "Upgrade: Electron 3.1.2"),
                        React.createElement("li", null, " Donate and Discord buttons in header.  These are important. "),
                        React.createElement("li", null, "Feature: Setting POLAR_DISABLE_HARDWARE_ACCELERATION should disable hardwawre acceleration now if that's causing a problem for you.")))),
            React.createElement("h3", null, "Polar 1.10"),
            React.createElement("div", { className: "intro" },
                React.createElement("p", { className: "text-center" },
                    React.createElement("iframe", { width: "560", height: "315", src: "https://www.youtube.com/embed/Q5SU31cT4DQ", frameBorder: "0", allow: "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture", allowFullScreen: true })),
                React.createElement("p", null, "The 1.10 release again focused on a number of medium-scale features but also improves stability across the board."),
                React.createElement("h4", null, "Updated UI"),
                React.createElement("p", null, "The most obvious feature is that the UI has been significantly updated to support a new fixed header bar."),
                React.createElement("p", null, "One of the motivations for this was that users were getting confused when using the app for the first time and didn't know how to add content.  Now there's a large '+ Add' button front and center which is a clear call to action."),
                React.createElement("p", null, "Additionally, the added space allows for selecting multiple items."),
                React.createElement("h4", null, "Tagging Multiple Items"),
                React.createElement("p", null, "You can now tag multiple items in the UI by holding down shift (or control) and then clicking on the items you want to modify."),
                React.createElement("p", null, "Shift allows you to select a range and control allows you to select one at a time."),
                React.createElement("p", null, "At the top left a new 'tag' button will pop up and you can then assign tags to multiple documents at once. This is very handy for new users that want to bulk-tag multiple documents."),
                React.createElement("p", null, "Additionally, you can now sort by tags and if you hit the 'tags' column header at the top, twice, you can see untagged documents and then tag them in bulk."),
                React.createElement("p", null, "This can be used when importing a large number of documents at once that all have the same tags."),
                React.createElement("h4", null, "New Exporter Framework"),
                React.createElement("p", null, "Many users requested the ability to easily export annotations from Polar and we've shipped an initial implementation of exporting content."),
                React.createElement("p", null, "Note that you have always had the ability to export the raw content in JSON form but this is designed to make exports more usable."),
                React.createElement("p", null, "In the annotation sidebar there's a new button for 'Export' which allows you to write the annotations to JSON or Markdown."),
                React.createElement("p", null, "Right now it only supports writing to a file but we're also going to implement support for writing to the clipboard as HTML format for easily posting your annotations to your blog, Twitter, etc."),
                React.createElement("p", null, "The plan is to enable exporting in the 'annotation' view which would allow you to export all your annotations based any filters you define.  This would allow you to preview the annotations and then export them in bulk without having to open up a specific document."),
                React.createElement("h4", null, "Changelog:"),
                React.createElement("ul", null,
                    React.createElement("li", null, "Feature: Migrated to fixed nav header"),
                    React.createElement("li", null, "Feature: GDPR notice in place."),
                    React.createElement("li", null, "Feature: Shift selects a range of documents, control selects one document at a time for multiple documents at once."),
                    React.createElement("li", null, "Feature: Implemented a basic exporter framework.  Annotations can now be exported from the sidebar.  Exporting will be improved over time with more features."),
                    React.createElement("li", null, "Bug: Fixed (I hope) long standing ugly bug of 'crash' of Electron on app exit due to windows not being destroyed via destroy().  Close does not release the resources properly."),
                    React.createElement("li", null, "Bug: Fixed bug where long titles in URLs could generate filenames that were too long and couldn't be represented on the filesystem.  We not truncate at 50 chars."),
                    React.createElement("li", null, "Feature: New buttons for '+ Add' to import from disk or capture web page. Much easier to determine how to add content to polar."),
                    React.createElement("li", null, "Feature: multi-select and ability to tag multiple docs at once."),
                    React.createElement("li", null, "Feature: Sorting by tags is now much better and actually works.  If you double click the sort column it will show you untagged documents sorted by the time they were added."),
                    React.createElement("li", null, "Dependencies: Update to electron 3.1.1"),
                    React.createElement("li", null, "Bug: Fixed bug where hitting Enter when working with a title would cause the page to reload."))),
            React.createElement("h3", null, "Polar 1.9"),
            React.createElement("div", { className: "intro" },
                React.createElement("p", null, "Polar 1.9.0 was just released. This release is mostly focused around stability and fixes a number of important bugs."),
                React.createElement("p", null, "One big new feature went into this release though - you\u2019re now able create pagemarks across multiple pages."),
                React.createElement("p", null, "Here\u2019s the excerpt from the documentation:"),
                React.createElement("p", null, "When you right click and select \u201CCreate Pagemark to Point\u201D Polar creates pagemarks over all previous pages up until the previous pagemark (or the beginning) of the document."),
                React.createElement("p", null, "This enables you to import a book which you\u2019ve been reading and mark multiple pages as read so that you can now just use Polar to track your pgoress."),
                React.createElement("p", null, "For example, if you have a 300 page book, and you\u2019ve read pages 1-200 you can just jump to page 200 and \u201CCreate Pagemark to Point\u201D and pagemarks will be created across all previous pages."),
                React.createElement("p", null, "You can still pagemark the current page by selecting \u201CCreate Pagemark Box\u201D to or run \u201CControl Alt N\u201D to mark just the current page."),
                React.createElement("h4", null, "Changelog:"),
                React.createElement("ul", null,
                    React.createElement("li", null,
                        React.createElement("p", null, "Create pagemark to point now works across multiple pages and ranges.")),
                    React.createElement("li", null,
                        React.createElement("p", null, "Fixed bad bug where the UI wouldn\u2019t update when a newly imported PDF wasn\u2019t immediately visible in the UI. This was a bad initial user experience as they would have to reload for the PDFs to be visible.")),
                    React.createElement("li", null,
                        React.createElement("p", null, "Fixed major Twitter content capture bug where we weren\u2019t saving the CSS styles of HTML content.")),
                    React.createElement("li", null,
                        React.createElement("p", null, "Fixed bug where VH rules that were less than 100 weren\u2019t being set properly and some pages rendered ugly.")),
                    React.createElement("li", null,
                        React.createElement("p", null, "Fixed bug with the \u2018deck:\u2019 tag not properly working with Anki sync.")),
                    React.createElement("li", null,
                        React.createElement("p", null, "Importing large numbers of PDFs (and large PDFs) is now a lot faster and more responsive when using cloud storage.  In the past we used to wait until the cloud layer was finished but this takes a long time to complete.")),
                    React.createElement("li", null,
                        React.createElement("p", null, "Now using \u2018localhost\u2019 instead of \u2018localapp.getpolarized.io\u2019 for the hostname. Some users weren\u2019t able to resolve this (not sure why) and additionally working offline didn\u2019t function either.")))),
            React.createElement("h3", null, "Polar 1.8"),
            React.createElement("div", { className: "intro" },
                React.createElement("p", null, "This release concentrated on a number of smaller features requested by users plus fit and finish.  The major changes include refactoring the text editor so that it's more clear that it supports rich text and formatted HTML. We also now support cloze deletions for Anki which was a big feature for a lot of users but required a big refactor.  Additionally we have a new logs view so that you can monitor the internal behavior of Polar during sync (and other) operations.  You can also copy the entire log to the clipboard for reporting bugs to the Polar developers."),
                React.createElement("h4", null, "Changelog:"),
                React.createElement("ul", null,
                    React.createElement("li", null, "PDFs auto-import when trying to share them from the browser."),
                    React.createElement("li", null, "Refactored the rich text editor so the bar at the top is no longer in 'air' mode so that users can realize that it supports rich text."),
                    React.createElement("li", null, "Support for cloze deletion"),
                    React.createElement("li", null, "Stats view for core stats"),
                    React.createElement("li", null, "New logs view to show logs as they're being written which can help users debug issues with Polar and report problems to the dev team plus understand what's happening with their data."),
                    React.createElement("li", null, "Related tags in the tag selector"),
                    React.createElement("li", null, "'capturing' a PDF from the browser now works and the PDF is then saved into the repository."),
                    React.createElement("li", null, "Copy URL to clipboard shows toaster that the URL was copied successfully."),
                    React.createElement("li", null, "Reveal file in finder (or Explorer on Windows)."),
                    React.createElement("li", null, "Copy file path to clipboard."))),
            React.createElement("h3", null, "Polar 1.7 - Annotation Manager"),
            React.createElement("div", { className: "intro" },
                React.createElement("p", null, "This release focuses on two major new features - a sidebar and also a an annotation view to allow users to view the annotations they've made on documents."),
                React.createElement("p", { className: "text-center" },
                    React.createElement("iframe", { width: "560", height: "315", src: "https://www.youtube.com/embed/oGk9Skaa6Q0", frameBorder: "0", allow: "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture", allowFullScreen: true })),
                React.createElement("h4", null, "Changelog:"),
                React.createElement("ul", null,
                    React.createElement("li", null, " New annotations view to see all your annotations in one place."),
                    React.createElement("li", null, " New sidebar to expand contract to show other pages within polar"),
                    React.createElement("li", null, "  New option to create a pagemark at the mouse point.  Still more work to make the key bindings visible."),
                    React.createElement("li", null, "  Adding forced CSS for ::selection so that sites that have broken CSS for highlighting don't actually break polar and we also have consistent highlight support."),
                    React.createElement("li", null, "  Fixed some navigational issues in the web capture system."),
                    React.createElement("li", null, "  Fixed bug the annotation bar in PDF where resize will kill it.  Hopefully the last bug there."),
                    React.createElement("li", null, "  Backend changes to support cloze deletions in Anki."))),
            React.createElement("h3", null, "Polar 1.6 - Polar Needs Your Help!"),
            React.createElement("div", { className: "intro" },
                React.createElement("p", null, "This release focuses on stability but adds a few new features."),
                React.createElement("p", null,
                    "The biggest changes in this release include a ",
                    React.createElement("b", null, "major"),
                    " performance improvement on Windows as well as a ",
                    React.createElement("i", null, "new annotation bar"),
                    " that should be both faster and much more reliable (especially with PDFs)."),
                React.createElement("h4", null, "Polar Needs Your Help!"),
                React.createElement("p", null,
                    "I'd like you to ",
                    React.createElement("i", null, "please do me a favor"),
                    " and just take two minutes and see if you can help out Polar."),
                React.createElement("p", null,
                    React.createElement("i", { className: "fas fa-envelope-open text-success" }),
                    "\u00A0",
                    React.createElement("b", null, "Email 5 colleagues about Polar! "),
                    " Can you take 1 minute and send an email to 5 of your colleagues about Polar and explain (in your own words) why you like it?"),
                React.createElement("p", null,
                    React.createElement("i", { className: "fas fa-link text-success" }),
                    "\u00A0",
                    React.createElement("b", null, "Blog and Link to Polar! "),
                    " If you have a blog or a website could you take 5 minutes and write up a blog post about Polar?  Post to your favorite forum? We have to get the word out and your help is really vital here. Even just a link at the bottom of your website would be a massive help!"),
                React.createElement("p", null,
                    React.createElement("i", { className: "fas fa-donate text-success" }),
                    "\u00A0",
                    React.createElement("b", null, "Can you make a donation to Polar? "),
                    "We have an ",
                    React.createElement("a", { href: "https://opencollective.com/polar-bookshelf/donate" }, "Open Collective"),
                    " setup to accept donations.  If you use Polar at work ask your employer if they can make a donation. Many larger employers will both match donations and support projects that help their employees."),
                React.createElement("p", { className: "text-center" },
                    React.createElement("a", { href: "https://opencollective.com/polar-bookshelf/donate", target: "_blank" },
                        React.createElement("img", { src: "https://opencollective.com/polar-bookshelf/donate/button@2x.png?color=blue", width: "300" }))),
                React.createElement("p", null,
                    React.createElement("i", { className: "fas fa-cloud text-success" }),
                    "\u00A0",
                    React.createElement("b", null, "Please use cloud sync!"),
                    " If you haven't setup cloud sync yet we'd appreciate your feedback.  Cloud sync is going to be used for Polar document collaboration and we need more people to test it and provide feedback."),
                React.createElement("h4", null, "Changelog:"),
                React.createElement("ul", null,
                    React.createElement("li", null, "Fixed possible regression due to using SVG icons as these broke the app repo and possibly a few other issue."),
                    React.createElement("li", null, "Re-add uncaught exception handlers on app exit.  Hope to fix the issues we were having with exceptions on app exit."),
                    React.createElement("li", null, "Completely new annotation bar for highlighting which should fix a major bug with the PDF mode."),
                    React.createElement("li", null, "Fixed some fonts + css with the sidebar."),
                    React.createElement("li", null, "Improved indeterminate progress bar on MacOS and just better in general"),
                    React.createElement("li", null, "Print the version numbers for updates."),
                    React.createElement("li", null, "Fixed quote mangling due to improper UTF-8 handling."),
                    React.createElement("li", null, "Hopefully fixed high CPU bug on Windows caused by shutdown and attempting to double-close windows."),
                    React.createElement("li", null, "Implemented Control+Enter for creating comments."),
                    React.createElement("li", null, "Making tags + updated + added columns visible by default for new users. I think some people did not discover it by default."))),
            React.createElement("h3", null, "Polar 1.5 - Cloud Sync"),
            React.createElement("div", { className: "intro" },
                React.createElement("div", { className: "text-center" },
                    React.createElement("i", { className: "fas fa-cloud-upload-alt", style: { fontSize: '120px', margin: '20px', color: '#007bff' } }),
                    React.createElement("h1", { className: "title" }, "Polar Cloud Sync"),
                    React.createElement("p", { className: "subtitle" }, "Polar now supports cloud sync powered by Firebase.")),
                React.createElement("p", null, "Cloud sync is real-time - as soon as you make a change to a local document it is immediately synchronized to the cloud and then to the other computers you have which run Polar."),
                React.createElement("p", null,
                    "Cloud sync is free for smaller instances and ",
                    React.createElement("b", null, "$7.99"),
                    " for users with more than 100 documents."),
                React.createElement("p", null, "To ensure data safety we now support local lightweight backups of your data. We take backups at critical points including just before you synchronize for the first time.")),
            React.createElement("h2", null, "1.1.0 - Nov 29, 2018"),
            React.createElement("div", { className: "intro" },
                React.createElement("div", { className: "text-center" },
                    React.createElement("img", { style: { maxHeight: '200px' }, className: "img-fluid", src: EmbeddedImages_1.EmbeddedImages.POLAR_LOGO }),
                    React.createElement("span", { style: { fontSize: '85px', margin: '15px' } }, "+"),
                    React.createElement("img", { style: { maxHeight: '200px' }, className: "img-fluid", src: EmbeddedImages_1.EmbeddedImages.CHROME_LOGO }),
                    React.createElement("h1", { className: "title" }, "Polar 1.1 - Chrome Extension Support!")),
                React.createElement("p", null, "Polar 1.1 is fresh out the door and a lot of amazing features and bug fixes are enabled in this release."),
                React.createElement("p", null,
                    "The biggest feature by far is our support for the ",
                    React.createElement("a", { href: "https://chrome.google.com/webstore/detail/save-to-polar/jkfdkjomocoaljglgddnmhcbolldcafd" }, "'Save to Polar' chrome extension"),
                    " that allows you to send the URL of your active tab to Polar for content capture."),
                React.createElement("p", null, "This makes it a lot easier to work with Polar as you can just click a button in Chrome and have it sent to Polar."),
                React.createElement("p", null, "We plan on adding support for Safari, and Firefox in the future but we're taking things one step at a time."),
                React.createElement("p", { className: "text-center" },
                    React.createElement("a", { className: "btn btn-success btn-lg", href: "https://chrome.google.com/webstore/detail/save-to-polar/jkfdkjomocoaljglgddnmhcbolldcafd", role: "button" }, "Get the 'Save to Polar' Chrome Extension")),
                React.createElement("h3", null, "Other features in 1.1 include:"),
                React.createElement("li", null, "Disabling amp for now until we have a better solution on how to show the user that an AMP page is displayed and how to disable / enable it.  Otherwise its confusing and often the amp page is WORSE not better."),
                React.createElement("li", null, "Fixed bugs with the browser size not changing during capture browser changing and also fixed some issues with it not properly accepting the browser change in some situations."),
                React.createElement("li", null, "Fixed bug in HTML zoom where the page would be truncated improperly."),
                React.createElement("li", null, "Blocked amp ads during the capture but they aren't blocked during the preview at the moment."),
                React.createElement("li", null, "\"Fixed\" nasty anti-aliasing bug in electron by blocking amp ads. They were annoying anyway but for some reason they were breaking chrome rendering - probably due to some web component nonsense."),
                React.createElement("li", null, "Implemented a new strategy with the vertical height algorithm in the capture system to revert it back to auto instead of a fixed max-height.  Works a lot better now."),
                React.createElement("li", null, "Date/times no longer include ' ago' to be a bit more concise."),
                React.createElement("li", null, "Added small FAQ entry to enable Anki sync."),
                React.createElement("li", null, "Fixed a bug where we could select text and not properly work with elements."),
                React.createElement("li", null, "Renderer analytics didn't understand that a callback without an error wasn't a failure."),
                React.createElement("li", null, "Upgraded a number of important react packages: react react-dom react-moment react-select @types/react-table @types/react-select @types/react @types/prop-types @types/node-fetch"),
                React.createElement("li", null, "removed inversify package (were not using it)"),
                React.createElement("li", null, "latest fontawesome"),
                React.createElement("li", null, "latest node-fetch"),
                React.createElement("li", null, "fixed issue with electron-builder where it was forcing us to upgrade to the latest version for each release."))));
    }
}
exports.WhatsNewContent = WhatsNewContent;
//# sourceMappingURL=data:application/json;base64,