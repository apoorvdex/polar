"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const DropdownToggle_1 = __importDefault(require("reactstrap/lib/DropdownToggle"));
const DropdownMenu_1 = __importDefault(require("reactstrap/lib/DropdownMenu"));
const LinkDropdownItem_1 = require("./LinkDropdownItem");
const AppRuntime_1 = require("../../../../web/js/AppRuntime");
const reactstrap_1 = require("reactstrap");
const DropdownItem_1 = __importDefault(require("reactstrap/lib/DropdownItem"));
const Platforms_1 = require("../../../../web/js/util/Platforms");
class LinkDropdown extends React.PureComponent {
    constructor(props, context) {
        super(props, context);
    }
    render() {
        return (React.createElement(reactstrap_1.UncontrolledDropdown, { className: "ml-1", size: "sm", id: "links-dropdown" },
            React.createElement(DropdownToggle_1.default, { className: "text-muted", color: "light", caret: true },
                React.createElement("i", { className: "fas fa-link", style: { fontSize: '17px' } })),
            React.createElement(DropdownMenu_1.default, { className: "shadow", right: true },
                React.createElement(DropdownItem_1.default, { header: true }, "Extensions and Addons"),
                React.createElement(LinkDropdownItem_1.LinkDropdownItem, { id: "chrome-extension", title: "Chrome Extension", tooltip: "Install the Polar Chrome extension for capturing web content directly in Chrome.", link: "https://chrome.google.com/webstore/detail/save-to-polar/jkfdkjomocoaljglgddnmhcbolldcafd/", icon: "fab fa-chrome" }),
                React.createElement(LinkDropdownItem_1.LinkDropdownItem, { id: "polar-connect", hidden: AppRuntime_1.AppRuntime.isBrowser(), title: "Polar Connect for Anki Sync", tooltip: "Install the Polar Connect Anki add-on for syncing flashcards to Anki.", link: "https://ankiweb.net/shared/info/734898866", icon: "fas fa-bolt" }),
                React.createElement(LinkDropdownItem_1.LinkDropdownItem, { id: "download-desktop", hidden: !(AppRuntime_1.AppRuntime.isBrowser() && Platforms_1.Platforms.type() === 'desktop'), title: "Download Polar Desktop", tooltip: "Download Polar for the Desktop", link: "https://getpolarized.io/download.html", icon: "fas fa-file-download" }),
                React.createElement(LinkDropdownItem_1.LinkDropdownItem, { id: "link-use-webapp", hidden: !AppRuntime_1.AppRuntime.isElectron(), title: "Use Polar Webapp", tooltip: "Load the Polar webapp", link: "https://app.getpolarized.io/", icon: "fab fa-html5" }),
                React.createElement(DropdownItem_1.default, { header: true }, "Social Media"),
                React.createElement(LinkDropdownItem_1.LinkDropdownItem, { id: "discord-link", title: "Discord", tooltip: "Chat with other Polar users live on Discord.", link: "https://discord.gg/GT8MhA6", icon: "fab fa-discord" }),
                React.createElement(LinkDropdownItem_1.LinkDropdownItem, { id: "reddit-link", title: "Reddit", tooltip: "Discuss Polar on the in the PolarBookshelf subreddit.", link: "https://www.reddit.com/r/PolarBookshelf/", icon: "fab fa-reddit" }),
                React.createElement(LinkDropdownItem_1.LinkDropdownItem, { id: "twitter-link", title: "Twitter", tooltip: "View the Polar Twitter account", link: "https://twitter.com/getpolarized", icon: "fab fa-twitter" }),
                React.createElement(LinkDropdownItem_1.LinkDropdownItem, { id: "github-link", title: "Github", tooltip: "View the Polar Github project. Create issues, view source code, etc.", link: "https://github.com/burtonator/polar-bookshelf", icon: "fab fa-github" }))));
    }
}
exports.LinkDropdown = LinkDropdown;
//# sourceMappingURL=data:application/json;base64,