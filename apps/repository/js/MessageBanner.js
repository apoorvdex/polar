"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Alert_1 = __importDefault(require("reactstrap/lib/Alert"));
const Arrays_1 = require("../../../web/js/util/Arrays");
const RendererAnalytics_1 = require("../../../web/js/ga/RendererAnalytics");
class MessageBanner extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.state = {
            visible: true
        };
        this.onDismiss = this.onDismiss.bind(this);
        this.onClick = this.onClick.bind(this);
    }
    render() {
        if (this.message) {
            return (React.createElement("div", null,
                React.createElement(Alert_1.default, { color: "info", isOpen: this.state.visible, toggle: this.onDismiss, fade: false, onClick: () => this.onClick(this.message), className: "mt-1 mb-1 pl-1 pr-1" }, this.message.element)));
        }
        else {
            return (React.createElement("div", null));
        }
    }
    componentWillMount() {
        if (MESSAGES.length > 0) {
            this.message = Arrays_1.Arrays.shuffle(...MESSAGES)[0];
        }
    }
    onDismiss() {
        this.setState({ visible: false });
    }
    onClick(message) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'message-banner-click', action: message.id });
    }
}
exports.MessageBanner = MessageBanner;
const MESSAGES = [];
//# sourceMappingURL=data:application/json;base64,