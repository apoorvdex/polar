"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_table_1 = __importDefault(require("react-table"));
const Logger_1 = require("../../../../web/js/logger/Logger");
const DateTimeTableCell_1 = require("../DateTimeTableCell");
const SimpleReactor_1 = require("../../../../web/js/reactor/SimpleReactor");
const PersistenceLayerManagers_1 = require("../../../../web/js/datastore/PersistenceLayerManagers");
const RepoDocMetaLoaders_1 = require("../RepoDocMetaLoaders");
const ExtendedReactTable_1 = require("../util/ExtendedReactTable");
const AnnotationIcon_1 = require("../../../../web/js/ui/standard_icons/AnnotationIcon");
const log = Logger_1.Logger.create();
class AnnotationRepoTable extends ExtendedReactTable_1.ExtendedReactTable {
    constructor(props, context) {
        super(props, context);
        this.syncBarProgress = new SimpleReactor_1.SimpleReactor();
        this.persistenceLayerManager = this.props.persistenceLayerManager;
        this.state = {
            data: [],
        };
        this.init();
        this.refresh();
    }
    init() {
        PersistenceLayerManagers_1.PersistenceLayerManagers.onPersistenceManager(this.props.persistenceLayerManager, (persistenceLayer) => {
            this.releaser.register(persistenceLayer.addEventListener(() => this.refresh()));
        });
        this.releaser.register(RepoDocMetaLoaders_1.RepoDocMetaLoaders.addThrottlingEventListener(this.props.repoDocMetaLoader, () => this.refresh()));
    }
    onSelected(selected, repoAnnotation) {
        this.setState(Object.assign({}, this.state, { selected, repoAnnotation }));
        this.props.onSelected(repoAnnotation);
    }
    render() {
        const { data } = this.state;
        return (React.createElement("div", { id: "doc-repo-table" },
            React.createElement("div", { id: "doc-table" },
                React.createElement(react_table_1.default, { data: data, columns: [
                        {
                            Header: '',
                            accessor: 'type',
                            maxWidth: 30,
                            Cell: (row) => {
                                return (React.createElement("div", { className: "text-center" },
                                    React.createElement(AnnotationIcon_1.AnnotationIcon, { type: row.original.type, color: row.original.color })));
                            }
                        },
                        {
                            Header: '',
                            accessor: 'title',
                            Cell: (row) => {
                                const id = 'annotation-title' + row.index;
                                return (React.createElement("div", { id: id },
                                    React.createElement("div", null, row.original.text || 'no text')));
                            }
                        },
                        {
                            Header: 'Created',
                            accessor: 'created',
                            show: true,
                            maxWidth: 100,
                            defaultSortDesc: true,
                            Cell: (row) => (React.createElement(DateTimeTableCell_1.DateTimeTableCell, { className: "doc-col-last-updated", datetime: row.original.created }))
                        },
                        {
                            id: 'tags',
                            Header: 'Tags',
                            accessor: '',
                            show: true,
                            width: 200,
                            Cell: (row) => {
                                const tags = row.original.tags;
                                const formatted = Object.values(tags)
                                    .map(tag => tag.label)
                                    .sort()
                                    .join(", ");
                                return (React.createElement("div", null, formatted));
                            }
                        },
                    ], defaultPageSize: 50, noDataText: "No annotations available.", className: "-striped -highlight", defaultSorted: [
                        {
                            id: "created",
                            desc: true
                        }
                    ], getTrProps: (state, rowInfo) => {
                        return {
                            onClick: (e) => {
                                const repoAnnotation = rowInfo.original;
                                this.onSelected(rowInfo.viewIndex, repoAnnotation);
                            },
                            style: {
                                background: rowInfo && rowInfo.viewIndex === this.state.selected ? '#00afec' : 'white',
                                color: rowInfo && rowInfo.viewIndex === this.state.selected ? 'white' : 'black',
                            }
                        };
                    }, getTdProps: (state, rowInfo, column, instance) => {
                        const singleClickColumns = [];
                        if (!singleClickColumns.includes(column.id)) {
                            return {
                                onDoubleClick: (e) => {
                                }
                            };
                        }
                        if (singleClickColumns.includes(column.id)) {
                            return {
                                onClick: ((e, handleOriginal) => {
                                    if (handleOriginal) {
                                        handleOriginal();
                                    }
                                })
                            };
                        }
                        return {};
                    } }))));
    }
    refresh() {
        const data = Object.values(this.props.repoDocMetaManager.repoAnnotationIndex);
        this.doRefresh(this.filter(data));
    }
    filter(data) {
        return data;
    }
    doRefresh(data) {
        const state = Object.assign({}, this.state, { data });
        setTimeout(() => {
            this.setState(state);
        }, 1);
    }
}
exports.default = AnnotationRepoTable;
//# sourceMappingURL=data:application/json;base64,