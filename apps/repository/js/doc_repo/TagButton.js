"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Creatable_1 = __importDefault(require("react-select/lib/Creatable"));
const reactstrap_1 = require("reactstrap");
const Blackout_1 = require("../../../../web/js/ui/blackout/Blackout");
const TagSelectOptions_1 = require("../TagSelectOptions");
class TagButton extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.toggle = this.toggle.bind(this);
        this.onKeyDown = this.onKeyDown.bind(this);
        this.handleChange = this.handleChange.bind(this);
        this.state = {
            popoverOpen: false,
        };
        this.id = this.props.id || 'tag-button-' + Math.floor(Math.random() * 10000);
    }
    render() {
        const options = this.props.tagsDBProvider().tags().map(current => {
            return {
                value: current.id,
                label: current.label
            };
        });
        return (React.createElement("div", null,
            React.createElement(reactstrap_1.Button, { color: "light", id: this.id, size: "sm", disabled: this.props.disabled, onClick: this.toggle, className: "border" },
                React.createElement("i", { className: "fa fa-tag doc-button doc-button-selectable" })),
            React.createElement(reactstrap_1.Popover, { placement: "bottom", isOpen: this.state.popoverOpen, target: this.id, toggle: this.toggle, trigger: "legacy", className: "tag-input-popover" },
                React.createElement(reactstrap_1.PopoverBody, null,
                    React.createElement(Creatable_1.default, { isMulti: true, isClearable: true, autoFocus: true, onKeyDown: event => this.onKeyDown(event), classNamePrefix: "select", onChange: this.handleChange, options: options })))));
    }
    onKeyDown(event) {
        if (event.key === "Escape") {
            this.toggle();
        }
        if (event.getModifierState("Control") && event.key === "Enter") {
            this.toggle();
        }
    }
    toggle() {
        const popoverOpen = !this.state.popoverOpen;
        if (popoverOpen) {
            this.selectedTags = undefined;
            Blackout_1.Blackout.enable();
        }
        else {
            Blackout_1.Blackout.disable();
            if (this.props.onSelectedTags && this.selectedTags) {
                this.props.onSelectedTags(this.selectedTags);
            }
        }
        this.setState(Object.assign({}, this.state, { popoverOpen }));
    }
    handleChange(selectedOptions) {
        const tagSelectOptions = selectedOptions;
        if (!tagSelectOptions || tagSelectOptions.length === 0) {
            this.selectedTags = undefined;
        }
        else {
            this.selectedTags = TagSelectOptions_1.TagSelectOptions.toTags(selectedOptions);
        }
    }
}
exports.TagButton = TagButton;
//# sourceMappingURL=data:application/json;base64,