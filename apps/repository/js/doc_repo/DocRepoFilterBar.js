"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Logger_1 = require("../../../../web/js/logger/Logger");
const ToggleButton_1 = require("../../../../web/js/ui/ToggleButton");
const SimpleTooltip_1 = require("../../../../web/js/ui/tooltip/SimpleTooltip");
const FilterTagInput_1 = require("../FilterTagInput");
const InputGroup_1 = __importDefault(require("reactstrap/lib/InputGroup"));
const Input_1 = __importDefault(require("reactstrap/lib/Input"));
const log = Logger_1.Logger.create();
class Styles {
}
class DocRepoFilterBar extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.state = {};
    }
    render() {
        const Right = () => {
            if (this.props.right) {
                return this.props.right;
            }
            else {
                return React.createElement("div", null);
            }
        };
        return (React.createElement("div", { id: "filter-bar", style: {
                display: 'flex',
                marginLeft: 'auto',
                justifyContent: 'flex-end'
            } },
            React.createElement("div", { className: "mr-2", style: { whiteSpace: 'nowrap', marginTop: 'auto', marginBottom: 'auto' } },
                React.createElement("div", { className: "checkbox-group" },
                    React.createElement(ToggleButton_1.ToggleButton, { id: "toggle-flagged", label: "flagged", initialValue: false, onChange: value => this.props.onToggleFlaggedOnly(value) }),
                    React.createElement(SimpleTooltip_1.SimpleTooltip, { target: "toggle-flagged" }, "Only show flagged documents."))),
            React.createElement("div", { className: "header-filter-box mr-1", style: { whiteSpace: 'nowrap', marginTop: 'auto', marginBottom: 'auto' } },
                React.createElement("div", { className: "checkbox-group" },
                    React.createElement(ToggleButton_1.ToggleButton, { id: "toggle-archived", label: "archived", initialValue: false, onChange: value => this.props.onToggleFilterArchived(value) }),
                    React.createElement(SimpleTooltip_1.SimpleTooltip, { target: "toggle-archived" }, "Show both archived and unarchived documents.  Archived documents are hidden by default."))),
            React.createElement("div", { className: "header-filter-box header-filter-tags mr-1", style: { whiteSpace: 'nowrap', marginTop: 'auto', marginBottom: 'auto' } },
                React.createElement(FilterTagInput_1.FilterTagInput, { id: "filter-tag-input", tagsDBProvider: this.props.tagsDBProvider, refresher: this.props.refresher, filteredTags: this.props.filteredTags }),
                React.createElement(SimpleTooltip_1.SimpleTooltip, { target: "filter-tag-input" }, "Filter the document list by a specific tag.")),
            React.createElement("div", { className: "header-filter-box mr-1", style: { whiteSpace: 'nowrap', marginTop: 'auto', marginBottom: 'auto' } },
                React.createElement("div", { className: "header-filter-box" },
                    React.createElement(InputGroup_1.default, { size: "sm" },
                        React.createElement(Input_1.default, { id: "filter_title", type: "text", placeholder: "Filter by title", onChange: (value) => this.props.onFilterByTitle(value.target.value) }),
                        React.createElement(SimpleTooltip_1.SimpleTooltip, { target: "filter_title" }, "Filter the document list by the title of the document.")))),
            React.createElement(Right, null)));
    }
}
exports.DocRepoFilterBar = DocRepoFilterBar;
//# sourceMappingURL=data:application/json;base64,