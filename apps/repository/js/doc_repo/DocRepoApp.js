"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Logger_1 = require("../../../../web/js/logger/Logger");
const RepoDocMetaLoader_1 = require("../RepoDocMetaLoader");
const RepoDocMetaManager_1 = require("../RepoDocMetaManager");
const FilteredTags_1 = require("../FilteredTags");
const DocRepoTableColumns_1 = require("./DocRepoTableColumns");
const DocRepoTable_1 = __importDefault(require("./DocRepoTable"));
const log = Logger_1.Logger.create();
class DocRepoApp extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.filteredTags = new FilteredTags_1.FilteredTags();
        this.persistenceLayerManager = this.props.persistenceLayerManager;
        this.repoDocInfoManager = new RepoDocMetaManager_1.RepoDocMetaManager(this.persistenceLayerManager);
        this.repoDocInfoLoader = new RepoDocMetaLoader_1.RepoDocMetaLoader(this.persistenceLayerManager);
        this.state = {
            data: [],
            columns: new DocRepoTableColumns_1.DocRepoTableColumns()
        };
    }
    render() {
        return (React.createElement("div", { id: "doc-repository", style: { height: '100%' } },
            React.createElement(DocRepoTable_1.default, { persistenceLayerManager: this.props.persistenceLayerManager, updatedDocInfoEventDispatcher: this.props.updatedDocInfoEventDispatcher, repoDocMetaManager: this.props.repoDocMetaManager, repoDocMetaLoader: this.props.repoDocMetaLoader })));
    }
}
exports.default = DocRepoApp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9jUmVwb0FwcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkRvY1JlcG9BcHAudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDZDQUErQjtBQUMvQiw2REFBd0Q7QUFDeEQsNERBQXVEO0FBQ3ZELDhEQUF5RDtBQUN6RCxrREFBNkM7QUFDN0MsK0RBQTBEO0FBSzFELGtFQUEwQztBQUUxQyxNQUFNLEdBQUcsR0FBRyxlQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFNUIsTUFBcUIsVUFBVyxTQUFRLEtBQUssQ0FBQyxTQUF5QjtJQVVuRSxZQUFZLEtBQWEsRUFBRSxPQUFZO1FBQ25DLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFIVCxpQkFBWSxHQUFHLElBQUksMkJBQVksRUFBRSxDQUFDO1FBSy9DLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDO1FBQ2xFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLHVDQUFrQixDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQy9FLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLHFDQUFpQixDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBRTdFLElBQUksQ0FBQyxLQUFLLEdBQUc7WUFDVCxJQUFJLEVBQUUsRUFBRTtZQUNSLE9BQU8sRUFBRSxJQUFJLHlDQUFtQixFQUFFO1NBQ3JDLENBQUM7SUFFTixDQUFDO0lBRU0sTUFBTTtRQUVULE9BQU8sQ0FFSCw2QkFBSyxFQUFFLEVBQUMsZ0JBQWdCLEVBQUMsS0FBSyxFQUFFLEVBQUMsTUFBTSxFQUFFLE1BQU0sRUFBQztZQUU1QyxvQkFBQyxzQkFBWSxJQUFDLHVCQUF1QixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsdUJBQXVCLEVBQzNELDZCQUE2QixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsNkJBQTZCLEVBQ3ZFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQ2pELGlCQUFpQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEdBQUcsQ0FFOUQsQ0FFVCxDQUFDO0lBQ04sQ0FBQztDQUVKO0FBeENELDZCQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7TG9nZ2VyfSBmcm9tICcuLi8uLi8uLi8uLi93ZWIvanMvbG9nZ2VyL0xvZ2dlcic7XG5pbXBvcnQge1JlcG9Eb2NNZXRhTG9hZGVyfSBmcm9tICcuLi9SZXBvRG9jTWV0YUxvYWRlcic7XG5pbXBvcnQge1JlcG9Eb2NNZXRhTWFuYWdlcn0gZnJvbSAnLi4vUmVwb0RvY01ldGFNYW5hZ2VyJztcbmltcG9ydCB7RmlsdGVyZWRUYWdzfSBmcm9tICcuLi9GaWx0ZXJlZFRhZ3MnO1xuaW1wb3J0IHtEb2NSZXBvVGFibGVDb2x1bW5zfSBmcm9tICcuL0RvY1JlcG9UYWJsZUNvbHVtbnMnO1xuaW1wb3J0IHtJRG9jSW5mb30gZnJvbSAnLi4vLi4vLi4vLi4vd2ViL2pzL21ldGFkYXRhL0RvY0luZm8nO1xuaW1wb3J0IHtTeW5jQmFyUHJvZ3Jlc3N9IGZyb20gJy4uLy4uLy4uLy4uL3dlYi9qcy91aS9zeW5jX2Jhci9TeW5jQmFyJztcbmltcG9ydCB7SUV2ZW50RGlzcGF0Y2hlcn0gZnJvbSAnLi4vLi4vLi4vLi4vd2ViL2pzL3JlYWN0b3IvU2ltcGxlUmVhY3Rvcic7XG5pbXBvcnQge1BlcnNpc3RlbmNlTGF5ZXJNYW5hZ2VyfSBmcm9tICcuLi8uLi8uLi8uLi93ZWIvanMvZGF0YXN0b3JlL1BlcnNpc3RlbmNlTGF5ZXJNYW5hZ2VyJztcbmltcG9ydCBEb2NSZXBvVGFibGUgZnJvbSAnLi9Eb2NSZXBvVGFibGUnO1xuXG5jb25zdCBsb2cgPSBMb2dnZXIuY3JlYXRlKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvY1JlcG9BcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGVyc2lzdGVuY2VMYXllck1hbmFnZXI6IFBlcnNpc3RlbmNlTGF5ZXJNYW5hZ2VyO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSByZXBvRG9jSW5mb01hbmFnZXI6IFJlcG9Eb2NNZXRhTWFuYWdlcjtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVwb0RvY0luZm9Mb2FkZXI6IFJlcG9Eb2NNZXRhTG9hZGVyO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBmaWx0ZXJlZFRhZ3MgPSBuZXcgRmlsdGVyZWRUYWdzKCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzLCBjb250ZXh0OiBhbnkpIHtcbiAgICAgICAgc3VwZXIocHJvcHMsIGNvbnRleHQpO1xuXG4gICAgICAgIHRoaXMucGVyc2lzdGVuY2VMYXllck1hbmFnZXIgPSB0aGlzLnByb3BzLnBlcnNpc3RlbmNlTGF5ZXJNYW5hZ2VyO1xuICAgICAgICB0aGlzLnJlcG9Eb2NJbmZvTWFuYWdlciA9IG5ldyBSZXBvRG9jTWV0YU1hbmFnZXIodGhpcy5wZXJzaXN0ZW5jZUxheWVyTWFuYWdlcik7XG4gICAgICAgIHRoaXMucmVwb0RvY0luZm9Mb2FkZXIgPSBuZXcgUmVwb0RvY01ldGFMb2FkZXIodGhpcy5wZXJzaXN0ZW5jZUxheWVyTWFuYWdlcik7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGRhdGE6IFtdLFxuICAgICAgICAgICAgY29sdW1uczogbmV3IERvY1JlcG9UYWJsZUNvbHVtbnMoKVxuICAgICAgICB9O1xuXG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcigpIHtcblxuICAgICAgICByZXR1cm4gKFxuXG4gICAgICAgICAgICA8ZGl2IGlkPVwiZG9jLXJlcG9zaXRvcnlcIiBzdHlsZT17e2hlaWdodDogJzEwMCUnfX0+XG5cbiAgICAgICAgICAgICAgICA8RG9jUmVwb1RhYmxlIHBlcnNpc3RlbmNlTGF5ZXJNYW5hZ2VyPXt0aGlzLnByb3BzLnBlcnNpc3RlbmNlTGF5ZXJNYW5hZ2VyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZERvY0luZm9FdmVudERpc3BhdGNoZXI9e3RoaXMucHJvcHMudXBkYXRlZERvY0luZm9FdmVudERpc3BhdGNoZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBvRG9jTWV0YU1hbmFnZXI9e3RoaXMucHJvcHMucmVwb0RvY01ldGFNYW5hZ2VyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwb0RvY01ldGFMb2FkZXI9e3RoaXMucHJvcHMucmVwb0RvY01ldGFMb2FkZXJ9Lz5cblxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUHJvcHMge1xuXG4gICAgcmVhZG9ubHkgcGVyc2lzdGVuY2VMYXllck1hbmFnZXI6IFBlcnNpc3RlbmNlTGF5ZXJNYW5hZ2VyO1xuXG4gICAgcmVhZG9ubHkgdXBkYXRlZERvY0luZm9FdmVudERpc3BhdGNoZXI6IElFdmVudERpc3BhdGNoZXI8SURvY0luZm8+O1xuXG4gICAgcmVhZG9ubHkgc3luY0JhclByb2dyZXNzOiBJRXZlbnREaXNwYXRjaGVyPFN5bmNCYXJQcm9ncmVzcz47XG5cbiAgICByZWFkb25seSByZXBvRG9jTWV0YU1hbmFnZXI6IFJlcG9Eb2NNZXRhTWFuYWdlcjtcblxuICAgIHJlYWRvbmx5IHJlcG9Eb2NNZXRhTG9hZGVyOiBSZXBvRG9jTWV0YUxvYWRlcjtcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTdGF0ZSB7XG5cbn1cblxuIl19