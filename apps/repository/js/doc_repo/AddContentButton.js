"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const SimpleTooltip_1 = require("../../../../web/js/ui/tooltip/SimpleTooltip");
const TooltipDropdown_1 = require("./TooltipDropdown");
const AppRuntime_1 = require("../../../../web/js/AppRuntime");
const DropdownToggle_1 = __importDefault(require("reactstrap/lib/DropdownToggle"));
const DropdownMenu_1 = __importDefault(require("reactstrap/lib/DropdownMenu"));
const DropdownItem_1 = __importDefault(require("reactstrap/lib/DropdownItem"));
class AddContentButton extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.toggle = this.toggle.bind(this);
        this.state = {
            open: false
        };
    }
    render() {
        return (React.createElement(TooltipDropdown_1.TooltipDropdown, { id: "add-content-dropdown", tooltip: {
                text: "Add content by importing PDFs from your local drive or capturing web pages from the Internet.",
                placement: 'bottom'
            }, direction: "down", size: "sm" },
            React.createElement(DropdownToggle_1.default, { style: { fontWeight: 'bold' }, color: "success", caret: true },
                React.createElement("i", { className: "fas fa-plus", style: { marginRight: '5px' } }),
                " Add \u00A0"),
            React.createElement(DropdownMenu_1.default, { className: "shadow" },
                React.createElement(DropdownItem_1.default, { id: "add-content-import-from-disk", hidden: AppRuntime_1.AppRuntime.isBrowser(), size: "sm", onClick: () => this.props.importFromDisk() },
                    React.createElement("i", { className: "fas fa-hdd" }),
                    "\u00A0 Add Files from Disk",
                    React.createElement(SimpleTooltip_1.SimpleTooltip, { target: "add-content-import-from-disk", show: 0, placement: "right" }, "Add PDF files from disk in bulk.  Select one PDF or multiple PDFs at once.")),
                React.createElement(DropdownItem_1.default, { id: "add-content-import-from-disk-via-file-upload", hidden: AppRuntime_1.AppRuntime.isElectron(), onClick: () => this.triggerFileUpload(), size: "sm" },
                    React.createElement("i", { className: "fas fa-hdd" }),
                    "\u00A0 Upload Files from Disk",
                    React.createElement(SimpleTooltip_1.SimpleTooltip, { target: "add-content-import-from-disk-via-file-upload", show: 0, placement: "right" }, "Upload PDF files from disk in bulk.  Select one PDF or multiple PDFs at once.")),
                React.createElement(DropdownItem_1.default, { id: "add-content-capture-web-page", hidden: AppRuntime_1.AppRuntime.isBrowser(), size: "sm", onClick: () => this.props.captureWebPage() },
                    React.createElement("i", { className: "fab fa-chrome" }),
                    "\u00A0 Capture Web Page",
                    React.createElement(SimpleTooltip_1.SimpleTooltip, { target: "add-content-capture-web-page", show: 0, placement: "right" }, "Capture a web page from the web and save it for annotation and long term archival.")))));
    }
    triggerFileUpload() {
        document.getElementById('file-upload').click();
    }
    toggle() {
        this.setState(Object.assign({}, this.state, { open: !this.state.open }));
    }
}
exports.AddContentButton = AddContentButton;
//# sourceMappingURL=data:application/json;base64,