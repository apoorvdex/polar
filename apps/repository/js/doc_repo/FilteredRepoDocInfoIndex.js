"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RepoDocInfos_1 = require("../RepoDocInfos");
const Strings_1 = require("../../../../web/js/util/Strings");
const RendererAnalytics_1 = require("../../../../web/js/ga/RendererAnalytics");
const Tags_1 = require("../../../../web/js/tags/Tags");
const Preconditions_1 = require("../../../../web/js/Preconditions");
const Sets_1 = require("../../../../web/js/util/Sets");
const FilteredTags_1 = require("../FilteredTags");
class FilteredRepoDocInfoIndex {
    constructor(onRefreshed, repoDocInfosProvider) {
        this.onRefreshed = onRefreshed;
        this.repoDocInfosProvider = repoDocInfosProvider;
        this.filters = {
            flagged: false,
            archived: false,
            title: "",
            filteredTags: new FilteredTags_1.FilteredTags()
        };
    }
    onToggleFlaggedOnly(value) {
        this.filters.flagged = value;
        this.refresh();
    }
    onToggleFilterArchived(value) {
        this.filters.archived = value;
        this.refresh();
    }
    onFilterByTitle(title) {
        this.filters.title = title;
        this.refresh();
    }
    refresh() {
        this.onRefreshed(this.filter(this.repoDocInfosProvider()));
    }
    filter(repoDocInfos) {
        repoDocInfos = this.doFilterValid(repoDocInfos);
        repoDocInfos = this.doFilterByTitle(repoDocInfos);
        repoDocInfos = this.doFilterFlagged(repoDocInfos);
        repoDocInfos = this.doFilterArchived(repoDocInfos);
        repoDocInfos = this.doFilterByTags(repoDocInfos);
        return repoDocInfos;
    }
    doFilterValid(repoDocs) {
        return repoDocs.filter(current => RepoDocInfos_1.RepoDocInfos.isValid(current));
    }
    doFilterByTitle(repoDocs) {
        if (!Strings_1.Strings.empty(this.filters.title)) {
            return repoDocs.filter(current => current.title &&
                current.title.toLowerCase().indexOf(this.filters.title.toLowerCase()) >= 0);
        }
        return repoDocs;
    }
    doFilterFlagged(repoDocs) {
        if (this.filters.flagged) {
            return repoDocs.filter(current => current.flagged);
        }
        return repoDocs;
    }
    doFilterArchived(repoDocs) {
        if (!this.filters.archived) {
            return repoDocs.filter(current => !current.archived);
        }
        return repoDocs;
    }
    doFilterByTags(repoDocs) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'user', action: 'filter-by-tags' });
        const tags = Tags_1.Tags.toIDs(this.filters.filteredTags.get());
        return repoDocs.filter(current => {
            if (tags.length === 0) {
                return true;
            }
            if (!Preconditions_1.isPresent(current.docInfo.tags)) {
                return false;
            }
            const intersection = Sets_1.Sets.intersection(tags, Tags_1.Tags.toIDs(Object.values(current.docInfo.tags)));
            return intersection.length === tags.length;
        });
    }
}
exports.FilteredRepoDocInfoIndex = FilteredRepoDocInfoIndex;
//# sourceMappingURL=data:application/json;base64,