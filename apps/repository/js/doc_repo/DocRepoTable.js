"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_table_1 = __importDefault(require("react-table"));
const Logger_1 = require("../../../../web/js/logger/Logger");
const TagInput_1 = require("../TagInput");
const Optional_1 = require("../../../../web/js/util/ts/Optional");
const Preconditions_1 = require("../../../../web/js/Preconditions");
const Tags_1 = require("../../../../web/js/tags/Tags");
const DateTimeTableCell_1 = require("../DateTimeTableCell");
const RendererAnalytics_1 = require("../../../../web/js/ga/RendererAnalytics");
const MessageBanner_1 = require("../MessageBanner");
const DocDropdown_1 = require("../DocDropdown");
const DocRepoTableDropdown_1 = require("./DocRepoTableDropdown");
const DocRepoTableColumns_1 = require("./DocRepoTableColumns");
const SettingsStore_1 = require("../../../../web/js/datastore/SettingsStore");
const SimpleReactor_1 = require("../../../../web/js/reactor/SimpleReactor");
const RepoDocMetaLoaders_1 = require("../RepoDocMetaLoaders");
const PersistenceLayerManagers_1 = require("../../../../web/js/datastore/PersistenceLayerManagers");
const SynchronizingDocLoader_1 = require("../util/SynchronizingDocLoader");
const ReleasingReactComponent_1 = __importDefault(require("../framework/ReleasingReactComponent"));
const Arrays_1 = require("../../../../web/js/util/Arrays");
const Numbers_1 = require("../../../../web/js/util/Numbers");
const SimpleTooltip_1 = require("../../../../web/js/ui/tooltip/SimpleTooltip");
const TagButton_1 = require("./TagButton");
const RepoHeader_1 = require("../repo_header/RepoHeader");
const electron_1 = require("electron");
const FixedNav_1 = require("../FixedNav");
const AddContentButton_1 = require("./AddContentButton");
const Functions_1 = require("../../../../web/js/util/Functions");
const DocButton_1 = require("./doc_buttons/DocButton");
const FlagDocButton_1 = require("./doc_buttons/FlagDocButton");
const ArchiveDocButton_1 = require("./doc_buttons/ArchiveDocButton");
const MultiDeleteButton_1 = require("./multi_buttons/MultiDeleteButton");
const DocRepoFilterBar_1 = require("./DocRepoFilterBar");
const FilteredRepoDocInfoIndex_1 = require("./FilteredRepoDocInfoIndex");
const AppRuntime_1 = require("../../../../web/js/AppRuntime");
const Toaster_1 = require("../../../../web/js/ui/toaster/Toaster");
const Input_1 = __importDefault(require("reactstrap/lib/Input"));
const log = Logger_1.Logger.create();
class DocRepoTable extends ReleasingReactComponent_1.default {
    constructor(props, context) {
        super(props, context);
        this.syncBarProgress = new SimpleReactor_1.SimpleReactor();
        this.persistenceLayerManager = this.props.persistenceLayerManager;
        this.synchronizingDocLoader = new SynchronizingDocLoader_1.SynchronizingDocLoader(this.props.persistenceLayerManager);
        this.onDocTagged = this.onDocTagged.bind(this);
        this.onDocDeleted = this.onDocDeleted.bind(this);
        this.onDocSetTitle = this.onDocSetTitle.bind(this);
        this.onSelectedColumns = this.onSelectedColumns.bind(this);
        this.onFilterByTitle = this.onFilterByTitle.bind(this);
        this.onToggleFilterArchived = this.onToggleFilterArchived.bind(this);
        this.onToggleFlaggedOnly = this.onToggleFlaggedOnly.bind(this);
        this.clearSelected = this.clearSelected.bind(this);
        this.onMultiTagged = this.onMultiTagged.bind(this);
        this.onMultiDeleted = this.onMultiDeleted.bind(this);
        this.getSelected = this.getSelected.bind(this);
        this.cmdImportFromDisk = this.cmdImportFromDisk.bind(this);
        this.cmdCaptureWebPage = this.cmdCaptureWebPage.bind(this);
        this.state = {
            data: [],
            columns: new DocRepoTableColumns_1.DocRepoTableColumns(),
            selected: []
        };
        const onRefreshed = repoDocInfos => this.doRefresh(repoDocInfos);
        const repoDocInfosProvider = () => Object.values(this.props.repoDocMetaManager.repoDocInfoIndex);
        this.filteredRepoDocInfoIndex =
            new FilteredRepoDocInfoIndex_1.FilteredRepoDocInfoIndex(onRefreshed, repoDocInfosProvider);
        this.init();
        this.initAsync()
            .catch(err => log.error("Could not init: ", err));
    }
    init() {
        PersistenceLayerManagers_1.PersistenceLayerManagers.onPersistenceManager(this.props.persistenceLayerManager, (persistenceLayer) => {
            this.releaser.register(persistenceLayer.addEventListener(() => this.refresh()));
        });
        this.releaser.register(RepoDocMetaLoaders_1.RepoDocMetaLoaders.addThrottlingEventListener(this.props.repoDocMetaLoader, () => this.refresh()));
        this.releaser.register(this.props.repoDocMetaLoader.addEventListener(event => {
            if (!DocRepoTable.hasSentInitAnalyitics && event.progress.progress === 100) {
                this.emitInitAnalytics(this.props.repoDocMetaManager.repoDocInfoIndex);
                DocRepoTable.hasSentInitAnalyitics = true;
            }
        }));
    }
    initAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const settingProvider = yield SettingsStore_1.SettingsStore.load();
            log.info("Settings loaded: ", settingProvider);
            Optional_1.Optional.of(settingProvider().documentRepository)
                .map(current => current.columns)
                .when(columns => {
                log.info("Loaded columns from settings: ", columns);
                this.setState(Object.assign({}, this.state, { columns }));
                this.refresh();
            });
            this.refresh();
        });
    }
    emitInitAnalytics(repoDocs) {
        const nrDocs = Object.keys(repoDocs).length;
        RendererAnalytics_1.RendererAnalytics.set({ 'nrDocs': nrDocs });
        const persistenceLayerType = this.persistenceLayerManager.currentType();
        RendererAnalytics_1.RendererAnalytics.event({ category: 'document-repository', action: `docs-loaded-${persistenceLayerType}-${nrDocs}` });
    }
    selectRow(selectedIdx, event, checkbox = false) {
        if (typeof selectedIdx === 'string') {
            selectedIdx = parseInt(selectedIdx);
        }
        let selected = [selectedIdx];
        if (event.getModifierState("Shift")) {
            let min = 0;
            let max = 0;
            if (this.state.selected.length > 0) {
                const sorted = [...this.state.selected].sort((a, b) => a - b);
                min = Arrays_1.Arrays.first(sorted);
                max = Arrays_1.Arrays.last(sorted);
            }
            selected = [...Numbers_1.Numbers.range(Math.min(min, selectedIdx), Math.max(max, selectedIdx))];
        }
        const selectIndividual = (event.getModifierState("Control") || event.getModifierState("Meta")) || checkbox;
        if (selectIndividual) {
            selected = [...this.state.selected];
            if (selected.includes(selectedIdx)) {
                selected.splice(selected.indexOf(selectedIdx), 1);
            }
            else {
                selected = [...selected, selectedIdx];
            }
        }
        this.setState(Object.assign({}, this.state, { selected }));
    }
    onMultiTagged(tags) {
        const repoDocInfos = this.getSelected();
        for (const repoDocInfo of repoDocInfos) {
            const existingTags = Object.values(repoDocInfo.tags || {});
            const effectTags = Tags_1.Tags.union(existingTags, tags || []);
            this.onDocTagged(repoDocInfo, effectTags)
                .catch(err => log.error(err));
        }
    }
    onMultiDeleted() {
        const repoDocInfos = this.getSelected();
        for (const repoDocInfo of repoDocInfos) {
            this.onDocDeleted(repoDocInfo);
        }
        this.clearSelected();
    }
    clearSelected() {
        setTimeout(() => {
            this.setState(Object.assign({}, this.state, { selected: [] }));
        }, 1);
    }
    getSelected() {
        const resolvedState = this.reactTable.getResolvedState();
        const sortedData = resolvedState.sortedData;
        const result = this.state.selected
            .map(selectedIdx => sortedData[selectedIdx])
            .filter(item => Preconditions_1.isPresent(item))
            .map(item => item._original);
        return result;
    }
    render() {
        const { data } = this.state;
        return (React.createElement(FixedNav_1.FixedNav, { id: "doc-repo-table" },
            React.createElement("header", null,
                React.createElement(RepoHeader_1.RepoHeader, { persistenceLayerManager: this.props.persistenceLayerManager }),
                React.createElement("div", { id: "header-filter" },
                    React.createElement("div", { style: { display: 'flex' } },
                        React.createElement("div", { className: "", style: { whiteSpace: 'nowrap', marginTop: 'auto', marginBottom: 'auto', display: 'flex' } },
                            React.createElement("div", { className: "mr-1", style: { whiteSpace: 'nowrap', marginTop: 'auto', marginBottom: 'auto' } },
                                React.createElement(AddContentButton_1.AddContentButton, { importFromDisk: () => this.cmdImportFromDisk(), captureWebPage: this.cmdCaptureWebPage })),
                            React.createElement("div", { className: "mr-1", style: { whiteSpace: 'nowrap', marginTop: 'auto', marginBottom: 'auto' } },
                                React.createElement("div", { style: { display: this.state.selected.length <= 1 ? 'none' : 'flex' } },
                                    React.createElement("div", null,
                                        React.createElement(TagButton_1.TagButton, { id: "tag-multiple-documents", tagsDBProvider: () => this.props.repoDocMetaManager.tagsDB, onSelectedTags: tags => this.onMultiTagged(tags) }),
                                        React.createElement(SimpleTooltip_1.SimpleTooltip, { target: "tag-multiple-documents", placement: "bottom" }, "Tag multiple documents at once.  To find untagged documents sort by the 'Tags' column (twice).  Once to sort alphabetically and then second click will reverse the sort showing untagged documents.")),
                                    React.createElement("div", { className: "ml-1" },
                                        React.createElement(MultiDeleteButton_1.MultiDeleteButton, { onCancel: Functions_1.NULL_FUNCTION, onConfirm: () => this.onMultiDeleted() }))))),
                        React.createElement("div", { style: { marginLeft: 'auto' } },
                            React.createElement(DocRepoFilterBar_1.DocRepoFilterBar, { onToggleFlaggedOnly: value => this.onToggleFlaggedOnly(value), onToggleFilterArchived: value => this.onToggleFilterArchived(value), onFilterByTitle: (title) => this.onFilterByTitle(title), tagsDBProvider: () => this.props.repoDocMetaManager.tagsDB, refresher: () => this.refresh(), filteredTags: this.filteredRepoDocInfoIndex.filters.filteredTags, right: React.createElement("div", { className: "", style: { whiteSpace: 'nowrap', marginTop: 'auto', marginBottom: 'auto' } },
                                    React.createElement(DocRepoTableDropdown_1.DocRepoTableDropdown, { id: "table-dropdown", options: Object.values(this.state.columns), onSelectedColumns: (selectedColumns) => this.onSelectedColumns(selectedColumns) })) })))),
                React.createElement(MessageBanner_1.MessageBanner, null)),
            React.createElement(FixedNav_1.FixedNavBody, null,
                React.createElement("div", { id: "doc-table", style: { height: '100%' } },
                    React.createElement(react_table_1.default, { data: data, ref: (r) => this.reactTable = r, columns: [
                            {
                                id: 'doc-checkbox',
                                Header: (col) => {
                                    const checked = this.state.selected.length === col.data.length && col.data.length > 0;
                                    return (React.createElement("div", null,
                                        React.createElement(Input_1.default, { checked: checked, style: {
                                                marginLeft: 'auto',
                                                marginRight: 'auto',
                                                margin: 'auto',
                                                position: 'relative',
                                                top: '2px',
                                                width: '16px',
                                                height: '16px',
                                            }, className: "m-auto", onChange: Functions_1.NULL_FUNCTION, onClick: () => {
                                                const computeSelected = () => {
                                                    if (this.state.selected.length !== col.data.length) {
                                                        return Numbers_1.Numbers.range(0, col.data.length - 1);
                                                    }
                                                    else {
                                                        return [];
                                                    }
                                                };
                                                const selected = computeSelected();
                                                this.setState(Object.assign({}, this.state, { selected }));
                                            }, type: "checkbox" })));
                                },
                                accessor: '',
                                maxWidth: 25,
                                defaultSortDesc: true,
                                resizable: false,
                                sortable: false,
                                className: 'doc-checkbox',
                                Cell: (row) => {
                                    const viewIndex = row.viewIndex;
                                    return (React.createElement("div", { style: { lineHeight: '1em' } },
                                        React.createElement(Input_1.default, { checked: this.state.selected.includes(viewIndex), style: {
                                                marginLeft: 'auto',
                                                marginRight: 'auto',
                                                margin: 'auto',
                                                position: 'relative',
                                                top: '2px',
                                                width: '16px',
                                                height: '16px',
                                            }, className: "m-auto", onChange: Functions_1.NULL_FUNCTION, onClick: (event) => this.selectRow(viewIndex, event.nativeEvent, true), type: "checkbox" })));
                                }
                            },
                            {
                                Header: 'Title',
                                accessor: 'title',
                                className: 'doc-table-col-title',
                                Cell: (row) => {
                                    const id = 'doc-repo-row-title' + row.index;
                                    return (React.createElement("div", { id: id },
                                        React.createElement("div", null, row.value)));
                                }
                            },
                            {
                                Header: 'Updated',
                                accessor: 'lastUpdated',
                                show: this.state.columns.lastUpdated.selected,
                                maxWidth: 85,
                                defaultSortDesc: true,
                                className: 'doc-table-col-updated',
                                Cell: (row) => (React.createElement(DateTimeTableCell_1.DateTimeTableCell, { className: "doc-col-last-updated", datetime: row.value }))
                            },
                            {
                                Header: 'Added',
                                accessor: 'added',
                                show: this.state.columns.added.selected,
                                maxWidth: 85,
                                defaultSortDesc: true,
                                className: 'doc-table-col-added',
                                Cell: (row) => (React.createElement(DateTimeTableCell_1.DateTimeTableCell, { className: "doc-col-added", datetime: row.value }))
                            },
                            {
                                Header: 'Site',
                                accessor: 'site',
                                show: (this.state.columns.site || {}).selected || false,
                                maxWidth: 200,
                                sortable: false,
                                sortMethod: (a, b) => {
                                    const toSTR = (doc) => {
                                        if (!doc) {
                                            return "";
                                        }
                                        if (doc.site) {
                                            return doc.site;
                                        }
                                        return "";
                                    };
                                    const aSTR = toSTR(a);
                                    const bSTR = toSTR(b);
                                    return aSTR.localeCompare(bSTR);
                                },
                            },
                            {
                                id: 'tags',
                                Header: 'Tags',
                                width: 250,
                                accessor: '',
                                show: this.state.columns.tags.selected,
                                className: 'doc-table-col-tags',
                                sortMethod: (a, b) => {
                                    const toSTR = (obj) => {
                                        if (!obj) {
                                            return "";
                                        }
                                        if (typeof obj === 'string') {
                                            return obj;
                                        }
                                        return JSON.stringify(obj);
                                    };
                                    const cmp = toSTR(a.tags).localeCompare(toSTR(b.tags));
                                    if (cmp !== 0) {
                                        return cmp;
                                    }
                                    return toSTR(a.added).localeCompare(toSTR(b.added));
                                },
                                Cell: (row) => {
                                    const tags = row.original.tags;
                                    const formatted = Object.values(tags)
                                        .map(tag => tag.label)
                                        .sort()
                                        .join(", ");
                                    return (React.createElement("div", null, formatted));
                                }
                            },
                            {
                                id: 'nrAnnotations',
                                Header: 'Annotations',
                                accessor: 'nrAnnotations',
                                maxWidth: 110,
                                show: this.state.columns.nrAnnotations.selected,
                                defaultSortDesc: true,
                                resizable: false,
                            },
                            {
                                id: 'progress',
                                Header: 'Progress',
                                accessor: 'progress',
                                show: this.state.columns.progress.selected,
                                maxWidth: 100,
                                defaultSortDesc: true,
                                resizable: false,
                                className: 'doc-table-col-progress',
                                Cell: (row) => (React.createElement("progress", { className: "mt-auto mb-auto", max: "100", value: row.value, style: {
                                        width: '100%'
                                    } }))
                            },
                            {
                                id: 'doc-buttons',
                                Header: '',
                                accessor: '',
                                maxWidth: 100,
                                defaultSortDesc: true,
                                resizable: false,
                                sortable: false,
                                className: 'doc-dropdown',
                                Cell: (row) => {
                                    const repoDocInfo = row.original;
                                    const existingTags = Object.values(Optional_1.Optional.of(repoDocInfo.docInfo.tags).getOrElse({}));
                                    return (React.createElement("div", { className: "doc-buttons", style: { display: 'flex' } },
                                        React.createElement(DocButton_1.DocButton, null,
                                            React.createElement(TagInput_1.TagInput, { availableTags: this.props.repoDocMetaManager.tagsDB.tags(), existingTags: existingTags, relatedTags: this.props.repoDocMetaManager.relatedTags, onChange: (tags) => this.onDocTagged(repoDocInfo, tags)
                                                    .catch(err => log.error("Unable to update tags: ", err)) })),
                                        React.createElement(FlagDocButton_1.FlagDocButton, { active: repoDocInfo.flagged, onClick: () => this.doHandleToggleField(repoDocInfo, 'flagged') }),
                                        React.createElement(ArchiveDocButton_1.ArchiveDocButton, { active: repoDocInfo.archived, onClick: () => this.doHandleToggleField(repoDocInfo, 'archived') }),
                                        React.createElement(DocButton_1.DocButton, null,
                                            React.createElement(DocDropdown_1.DocDropdown, { id: 'doc-dropdown-' + row.index, repoDocInfo: repoDocInfo, onDelete: this.onDocDeleted, onSetTitle: this.onDocSetTitle }))));
                                }
                            }
                        ], defaultPageSize: 50, noDataText: "No documents available.", className: "-striped -highlight", defaultSorted: [
                            {
                                id: "progress",
                                desc: true
                            }
                        ], getTrProps: (state, rowInfo) => {
                            return {
                                'data-doc-fingerprint': ((rowInfo || {}).original || {}).fingerprint || '',
                                style: {
                                    background: rowInfo && this.state.selected.includes(rowInfo.viewIndex) ? 'var(--selected-background-color)' : 'var(--primary-background-color)',
                                    color: rowInfo && this.state.selected.includes(rowInfo.viewIndex) ? 'var(--selected-text-color)' : 'var(--primary-text-color)',
                                }
                            };
                        }, getTdProps: (state, rowInfo, column, instance) => {
                            const SINGLE_CLICK_COLUMNS = [
                                'tag-input',
                                'flagged',
                                'archived',
                                'doc-dropdown',
                                'doc-buttons',
                                'doc-checkbox'
                            ];
                            if (!SINGLE_CLICK_COLUMNS.includes(column.id)) {
                                return {
                                    onDoubleClick: (event) => {
                                        if (rowInfo) {
                                            this.onDocumentLoadRequested(rowInfo.original.fingerprint, rowInfo.original.filename, rowInfo.original.hashcode);
                                        }
                                    },
                                    onClick: (event, handleOriginal) => {
                                        if (rowInfo) {
                                            this.selectRow(rowInfo.viewIndex, event);
                                        }
                                    },
                                };
                            }
                            if (SINGLE_CLICK_COLUMNS.includes(column.id)) {
                                return {
                                    onClick: ((e, handleOriginal) => {
                                        if (handleOriginal) {
                                            handleOriginal();
                                        }
                                    })
                                };
                            }
                            return {};
                        } })))));
    }
    onDocTagged(repoDocInfo, tags) {
        return __awaiter(this, void 0, void 0, function* () {
            RendererAnalytics_1.RendererAnalytics.event({ category: 'user', action: 'doc-tagged' });
            yield this.props.repoDocMetaManager.writeDocInfoTags(repoDocInfo, tags);
            this.refresh();
        });
    }
    onDocDeleted(repoDocInfo) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'user', action: 'doc-deleted' });
        log.info("Deleting document: ", repoDocInfo);
        this.props.repoDocMetaManager.deleteDocInfo(repoDocInfo)
            .catch(err => log.error("Could not delete doc: ", err));
        this.refresh();
    }
    onDocSetTitle(repoDocInfo, title) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'user', action: 'set-doc-title' });
        log.info("Setting doc title: ", title);
        this.props.repoDocMetaManager.writeDocInfoTitle(repoDocInfo, title)
            .catch(err => log.error("Could not write doc title: ", err));
        this.refresh();
    }
    onSelectedColumns(columns) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'user', action: 'selected-columns' });
        SettingsStore_1.SettingsStore.load()
            .then((settingsProvider) => {
            const currentSettings = settingsProvider();
            const settings = Object.assign({}, currentSettings, { documentRepository: {
                    columns: this.state.columns
                } });
            SettingsStore_1.SettingsStore.write(settings)
                .catch(err => log.error(err));
        })
            .catch(err => log.error("Could not load settings: ", err));
        this.refresh();
    }
    onFilterByTitle(title) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'user', action: 'filter-by-title' });
        this.filteredRepoDocInfoIndex.onFilterByTitle(title);
    }
    refresh() {
        this.filteredRepoDocInfoIndex.refresh();
    }
    doRefresh(data) {
        const state = Object.assign({}, this.state, { data });
        setTimeout(() => {
            this.setState(state);
        }, 1);
    }
    onDocumentLoadRequested(fingerprint, filename, hashcode) {
        if (!AppRuntime_1.AppRuntime.isElectron() && filename.endsWith(".phz")) {
            const message = `Captured web pages (phz files) are only supported in the web preview version of Polar (please use the desktop version).`;
            const title = "Captured web pages not supported.";
            Toaster_1.Toaster.error(message, title);
            return;
        }
        this.synchronizingDocLoader.load(fingerprint, filename, hashcode)
            .catch(err => log.error("Unable to load doc: ", err));
    }
    doHandleToggleField(repoDocInfo, field) {
        this.handleToggleField(repoDocInfo, field)
            .catch(err => log.error(`Could not handle toggle on field: ${field}: `, err));
    }
    handleToggleField(repoDocInfo, field) {
        return __awaiter(this, void 0, void 0, function* () {
            let mutated = false;
            if (field === 'archived') {
                RendererAnalytics_1.RendererAnalytics.event({ category: 'user', action: 'archived-doc' });
                repoDocInfo.archived = !repoDocInfo.archived;
                repoDocInfo.docInfo.archived = repoDocInfo.archived;
                mutated = true;
            }
            if (field === 'flagged') {
                RendererAnalytics_1.RendererAnalytics.event({ category: 'user', action: 'flagged-doc' });
                repoDocInfo.flagged = !repoDocInfo.flagged;
                repoDocInfo.docInfo.flagged = repoDocInfo.flagged;
                mutated = true;
            }
            if (mutated) {
                yield this.props.repoDocMetaManager.writeDocInfo(repoDocInfo.docInfo);
                this.refresh();
            }
        });
    }
    onToggleFlaggedOnly(value) {
        this.filteredRepoDocInfoIndex.onToggleFlaggedOnly(value);
    }
    onToggleFilterArchived(value) {
        this.filteredRepoDocInfoIndex.onToggleFilterArchived(value);
    }
    cmdImportFromDisk() {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'add-content', action: 'import-from-disk' });
        this.getController().cmdImport()
            .catch((err) => log.error("Could not import from disk: ", err));
    }
    cmdCaptureWebPage() {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'add-content', action: 'capture-web-page' });
        this.getController().cmdCaptureWebPageWithBrowser()
            .catch((err) => log.error("Could not capture page: ", err));
    }
    getController() {
        return electron_1.remote.getGlobal('mainAppController');
    }
}
DocRepoTable.hasSentInitAnalyitics = false;
exports.default = DocRepoTable;
//# sourceMappingURL=data:application/json;base64,