"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Logger_1 = require("../../../../web/js/logger/Logger");
const bar_1 = require("@nivo/bar");
const log = Logger_1.Logger.create();
class ExampleLineChart extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.state = {};
    }
    render() {
        const data = [
            {
                "country": "AD",
                "hot dog": 163,
                "hot dogColor": "hsl(249, 70%, 50%)",
                "burger": 131,
                "burgerColor": "hsl(57, 70%, 50%)",
                "sandwich": 16,
                "sandwichColor": "hsl(244, 70%, 50%)",
                "kebab": 22,
                "kebabColor": "hsl(258, 70%, 50%)",
                "fries": 71,
                "friesColor": "hsl(354, 70%, 50%)",
                "donut": 146,
                "donutColor": "hsl(254, 70%, 50%)"
            },
            {
                "country": "AE",
                "hot dog": 0,
                "hot dogColor": "hsl(346, 70%, 50%)",
                "burger": 32,
                "burgerColor": "hsl(162, 70%, 50%)",
                "sandwich": 193,
                "sandwichColor": "hsl(314, 70%, 50%)",
                "kebab": 193,
                "kebabColor": "hsl(57, 70%, 50%)",
                "fries": 172,
                "friesColor": "hsl(52, 70%, 50%)",
                "donut": 1,
                "donutColor": "hsl(152, 70%, 50%)"
            },
            {
                "country": "AF",
                "hot dog": 53,
                "hot dogColor": "hsl(288, 70%, 50%)",
                "burger": 168,
                "burgerColor": "hsl(328, 70%, 50%)",
                "sandwich": 93,
                "sandwichColor": "hsl(317, 70%, 50%)",
                "kebab": 17,
                "kebabColor": "hsl(51, 70%, 50%)",
                "fries": 32,
                "friesColor": "hsl(338, 70%, 50%)",
                "donut": 176,
                "donutColor": "hsl(24, 70%, 50%)"
            },
            {
                "country": "AG",
                "hot dog": 196,
                "hot dogColor": "hsl(18, 70%, 50%)",
                "burger": 199,
                "burgerColor": "hsl(166, 70%, 50%)",
                "sandwich": 95,
                "sandwichColor": "hsl(94, 70%, 50%)",
                "kebab": 140,
                "kebabColor": "hsl(155, 70%, 50%)",
                "fries": 30,
                "friesColor": "hsl(167, 70%, 50%)",
                "donut": 51,
                "donutColor": "hsl(186, 70%, 50%)"
            },
            {
                "country": "AI",
                "hot dog": 153,
                "hot dogColor": "hsl(115, 70%, 50%)",
                "burger": 132,
                "burgerColor": "hsl(88, 70%, 50%)",
                "sandwich": 27,
                "sandwichColor": "hsl(331, 70%, 50%)",
                "kebab": 154,
                "kebabColor": "hsl(162, 70%, 50%)",
                "fries": 83,
                "friesColor": "hsl(222, 70%, 50%)",
                "donut": 163,
                "donutColor": "hsl(332, 70%, 50%)"
            },
            {
                "country": "AL",
                "hot dog": 43,
                "hot dogColor": "hsl(153, 70%, 50%)",
                "burger": 40,
                "burgerColor": "hsl(143, 70%, 50%)",
                "sandwich": 91,
                "sandwichColor": "hsl(162, 70%, 50%)",
                "kebab": 86,
                "kebabColor": "hsl(333, 70%, 50%)",
                "fries": 199,
                "friesColor": "hsl(290, 70%, 50%)",
                "donut": 142,
                "donutColor": "hsl(40, 70%, 50%)"
            },
            {
                "country": "AM",
                "hot dog": 172,
                "hot dogColor": "hsl(248, 70%, 50%)",
                "burger": 167,
                "burgerColor": "hsl(238, 70%, 50%)",
                "sandwich": 63,
                "sandwichColor": "hsl(126, 70%, 50%)",
                "kebab": 112,
                "kebabColor": "hsl(235, 70%, 50%)",
                "fries": 145,
                "friesColor": "hsl(51, 70%, 50%)",
                "donut": 72,
                "donutColor": "hsl(82, 70%, 50%)"
            }
        ];
        return (React.createElement("div", { className: "p-1", style: { height: '600px', width: '100%' } },
            React.createElement(bar_1.ResponsiveBar, { data: data, keys: [
                    "hot dog",
                    "burger",
                    "sandwich",
                    "kebab",
                    "fries",
                    "donut"
                ], indexBy: "country", margin: {
                    "top": 50,
                    "right": 130,
                    "bottom": 50,
                    "left": 60
                }, padding: 0.3, colors: "nivo", colorBy: "id", defs: [
                    {
                        "id": "dots",
                        "type": "patternDots",
                        "background": "inherit",
                        "color": "#38bcb2",
                        "size": 4,
                        "padding": 1,
                        "stagger": true
                    },
                    {
                        "id": "lines",
                        "type": "patternLines",
                        "background": "inherit",
                        "color": "#eed312",
                        "rotation": -45,
                        "lineWidth": 6,
                        "spacing": 10
                    }
                ], fill: [
                    {
                        "match": {
                            "id": "fries"
                        },
                        "id": "dots"
                    },
                    {
                        "match": {
                            "id": "sandwich"
                        },
                        "id": "lines"
                    }
                ], labelSkipWidth: 12, labelSkipHeight: 12, labelTextColor: "inherit:darker(1.6)", animate: true, motionStiffness: 90, motionDamping: 15, legends: [
                    {
                        "dataFrom": "keys",
                        "anchor": "bottom-right",
                        "direction": "column",
                        "justify": false,
                        "translateX": 120,
                        "translateY": 0,
                        "itemsSpacing": 2,
                        "itemWidth": 100,
                        "itemHeight": 20,
                        "itemDirection": "left-to-right",
                        "itemOpacity": 0.85,
                        "symbolSize": 20,
                        "effects": [
                            {
                                "on": "hover",
                                "style": {
                                    "itemOpacity": 1
                                }
                            }
                        ]
                    }
                ] })));
    }
}
exports.default = ExampleLineChart;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhhbXBsZUxpbmVDaGFydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkV4YW1wbGVMaW5lQ2hhcnQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLDZDQUErQjtBQUMvQiw2REFBd0Q7QUFNeEQsbUNBQTBDO0FBRTFDLE1BQU0sR0FBRyxHQUFHLGVBQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUU1QixNQUFxQixnQkFBaUIsU0FBUSxLQUFLLENBQUMsU0FBeUI7SUFFekUsWUFBWSxLQUFhLEVBQUUsT0FBWTtRQUNuQyxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRXRCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFDWixDQUFDO0lBRU4sQ0FBQztJQUVNLE1BQU07UUFFVCxNQUFNLElBQUksR0FBRztZQUNUO2dCQUNJLFNBQVMsRUFBRSxJQUFJO2dCQUNmLFNBQVMsRUFBRSxHQUFHO2dCQUNkLGNBQWMsRUFBRSxvQkFBb0I7Z0JBQ3BDLFFBQVEsRUFBRSxHQUFHO2dCQUNiLGFBQWEsRUFBRSxtQkFBbUI7Z0JBQ2xDLFVBQVUsRUFBRSxFQUFFO2dCQUNkLGVBQWUsRUFBRSxvQkFBb0I7Z0JBQ3JDLE9BQU8sRUFBRSxFQUFFO2dCQUNYLFlBQVksRUFBRSxvQkFBb0I7Z0JBQ2xDLE9BQU8sRUFBRSxFQUFFO2dCQUNYLFlBQVksRUFBRSxvQkFBb0I7Z0JBQ2xDLE9BQU8sRUFBRSxHQUFHO2dCQUNaLFlBQVksRUFBRSxvQkFBb0I7YUFDckM7WUFDRDtnQkFDSSxTQUFTLEVBQUUsSUFBSTtnQkFDZixTQUFTLEVBQUUsQ0FBQztnQkFDWixjQUFjLEVBQUUsb0JBQW9CO2dCQUNwQyxRQUFRLEVBQUUsRUFBRTtnQkFDWixhQUFhLEVBQUUsb0JBQW9CO2dCQUNuQyxVQUFVLEVBQUUsR0FBRztnQkFDZixlQUFlLEVBQUUsb0JBQW9CO2dCQUNyQyxPQUFPLEVBQUUsR0FBRztnQkFDWixZQUFZLEVBQUUsbUJBQW1CO2dC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QUFVLEVBQUUsTUFBTTt3QkFDbEIsUUFBUSxFQUFFLGNBQWM7d0JBQ3hCLFdBQVcsRUFBRSxRQUFRO3dCQUNyQixTQUFTLEVBQUUsS0FBSzt3QkFDaEIsWUFBWSxFQUFFLEdBQUc7d0JBQ2pCLFlBQVksRUFBRSxDQUFDO3dCQUNmLGNBQWMsRUFBRSxDQUFDO3dCQUNqQixXQUFXLEVBQUUsR0FBRzt3QkFDaEIsWUFBWSxFQUFFLEVBQUU7d0JBQ2hCLGVBQWUsRUFBRSxlQUFlO3dCQUNoQyxhQUFhLEVBQUUsSUFBSTt3QkFDbkIsWUFBWSxFQUFFLEVBQUU7d0JBQ2hCLFNBQVMsRUFBRTs0QkFDUDtnQ0FDSSxJQUFJLEVBQUUsT0FBTztnQ0FDYixPQUFPLEVBQUU7b0NBQ0wsYUFBYSxFQUFFLENBQUM7aUNBQ25COzZCQUNKO3lCQUNKO3FCQUNKO2lCQUNKLEdBQ0gsQ0FFQSxDQUVULENBQUM7SUFDTixDQUFDO0NBRUo7QUExT0QsbUNBME9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJy4uLy4uLy4uLy4uL3dlYi9qcy9sb2dnZXIvTG9nZ2VyJztcbmltcG9ydCB7UmVwb1NpZGViYXJ9IGZyb20gJy4uL1JlcG9TaWRlYmFyJztcbmltcG9ydCB7TWVzc2FnZUJhbm5lcn0gZnJvbSAnLi4vTWVzc2FnZUJhbm5lcic7XG5pbXBvcnQge1JlcG9Eb2NNZXRhTWFuYWdlcn0gZnJvbSAnLi4vUmVwb0RvY01ldGFNYW5hZ2VyJztcbmltcG9ydCB7U3RhdGlzdGljc30gZnJvbSAnLi4vLi4vLi4vLi4vd2ViL2pzL21ldGFkYXRhL1N0YXRpc3RpY3MnO1xuaW1wb3J0IHtEb2NJbmZvLCBJRG9jSW5mb30gZnJvbSAnLi4vLi4vLi4vLi4vd2ViL2pzL21ldGFkYXRhL0RvY0luZm8nO1xuaW1wb3J0IHsgUmVzcG9uc2l2ZUJhciB9IGZyb20gJ0BuaXZvL2Jhcic7XG5cbmNvbnN0IGxvZyA9IExvZ2dlci5jcmVhdGUoKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXhhbXBsZUxpbmVDaGFydCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IElQcm9wcywgY29udGV4dDogYW55KSB7XG4gICAgICAgIHN1cGVyKHByb3BzLCBjb250ZXh0KTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICB9O1xuXG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcigpIHtcblxuICAgICAgICBjb25zdCBkYXRhID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiY291bnRyeVwiOiBcIkFEXCIsXG4gICAgICAgICAgICAgICAgXCJob3QgZG9nXCI6IDE2MyxcbiAgICAgICAgICAgICAgICBcImhvdCBkb2dDb2xvclwiOiBcImhzbCgyNDksIDcwJSwgNTAlKVwiLFxuICAgICAgICAgICAgICAgIFwiYnVyZ2VyXCI6IDEzMSxcbiAgICAgICAgICAgICAgICBcImJ1cmdlckNvbG9yXCI6IFwiaHNsKDU3LCA3MCUsIDUwJSlcIixcbiAgICAgICAgICAgICAgICBcInNhbmR3aWNoXCI6IDE2LFxuICAgICAgICAgICAgICAgIFwic2FuZHdpY2hDb2xvclwiOiBcImhzbCgyNDQsIDcwJSwgNTAlKVwiLFxuICAgICAgICAgICAgICAgIFwia2ViYWJcIjogMjIsXG4gICAgICAgICAgICAgICAgXCJrZWJhYkNvbG9yXCI6IFwiaHNsKDI1OCwgNzAlLCA1MCUpXCIsXG4gICAgICAgICAgICAgICAgXCJmcmllc1wiOiA3MSxcbiAgICAgICAgICAgICAgICBcImZyaWVzQ29sb3JcIjogXCJoc2woMzU0LCA3MCUsIDUwJSlcIixcbiAgICAgICAgICAgICAgICBcImRvbnV0XCI6IDE0NixcbiAgICAgICAgICAgICAgICBcImRvbnV0Q29sb3JcIjogXCJoc2woMjU0LCA3MCUsIDUwJSlcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImNvdW50cnlcIjogXCJBRVwiLFxuICAgICAgICAgICAgICAgIFwiaG90IGRvZ1wiOiAwLFxuICAgICAgICAgICAgICAgIFwiaG90IGRvZ0NvbG9yXCI6IFwiaHNsKDM0NiwgNzAlLCA1MCUpXCIsXG4gICAgICAgICAgICAgICAgXCJidXJnZXJcIjogMzIsXG4gICAgICAgICAgICAgICAgXCJidXJnZXJDb2xvclwiOiBcImhzbCgxNjIsIDcwJSwgNTAlKVwiLFxuICAgICAgICAgICAgICAgIFwic2FuZHdpY2hcIjogMTkzLFxuICAgICAgICAgICAgICAgIFwic2FuZHdpY2hDb2xvclwiOiBcImhzbCgzMTQsIDcwJSwgNTAlKVwiLFxuICAgICAgICAgICAgICAgIFwia2ViYWJcIjogMTkzLFxuICAgICAgICAgICAgICAgIFwia2ViYWJDb2xvclwiOiBcImhzbCg1NywgNzAlLCA1MCUpXCIsXG4gICAgICAgICAgICAgICAgXCJmcmllc1wiOiAxNzIsXG4gICAgICAgICAgICAgICAgXCJmcmllc0NvbG9yXCI6IFwiaHNsKDUyLCA3MCUsIDUwJSlcIixcbiAgICAgICAgICAgICAgICBcImRvbnV0XCI6IDEsXG4gICAgICAgICAgICAgICAgXCJkb251dENvbG9yXCI6IFwiaHNsKDE1MiwgNzAlLCA1MCUpXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJjb3VudHJ5XCI6IFwiQUZcIixcbiAgICAgICAgICAgICAgICBcImhvdCBkb2dcIjogNTMsXG4gICAgICAgICAgICAgICAgXCJob3QgZG9nQ29sb3JcIjogXCJoc2woMjg4LCA3MCUsIDUwJSlcIixcbiAgICAgICAgICAgICAgICBcImJ1cmdlclwiOiAxNjgsXG4gICAgICAgICAgICAgICAgXCJidXJnZXJDb2xvclwiOiBcImhzbCgzMjgsIDcwJSwgNTAlKVwiLFxuICAgICAgICAgICAgICAgIFwic2FuZHdpY2hcIjogOTMsXG4gICAgICAgICAgICAgICAgXCJzYW5kd2ljaENvbG9yXCI6IFwiaHNsKDMxNywgNzAlLCA1MCUpXCIsXG4gICAgICAgICAgICAgICAgXCJrZWJhYlwiOiAxNyxcbiAgICAgICAgICAgICAgICBcImtlYmFiQ29sb3JcIjogXCJoc2woNTEsIDcwJSwgNTAlKVwiLFxuICAgICAgICAgICAgICAgIFwiZnJpZXNcIjogMzIsXG4gICAgICAgICAgICAgICAgXCJmcmllc0NvbG9yXCI6IFwiaHNsKDMzOCwgNzAlLCA1MCUpXCIsXG4gICAgICAgICAgICAgICAgXCJkb251dFwiOiAxNzYsXG4gICAgICAgICAgICAgICAgXCJkb251dENvbG9yXCI6IFwiaHNsKDI0LCA3MCUsIDUwJSlcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImNvdW50cnlcIjogXCJBR1wiLFxuICAgICAgICAgICAgICAgIFwiaG90IGRvZ1wiOiAxOTYsXG4gICAgICAgICAgICAgICAgXCJob3QgZG9nQ29sb3JcIjogXCJoc2woMTgsIDcwJSwgNTAlKVwiLFxuICAgICAgICAgICAgICAgIFwiYnVyZ2VyXCI6IDE5OSxcbiAgICAgICAgICAgICAgICBcImJ1cmdlckNvbG9yXCI6IFwiaHNsKDE2NiwgNzAlLCA1MCUpXCIsXG4gICAgICAgICAgICAgICAgXCJzYW5kd2ljaFwiOiA5NSxcbiAgICAgICAgICAgICAgICBcInNhbmR3aWNoQ29sb3JcIjogXCJoc2woOTQsIDcwJSwgNTAlKVwiLFxuICAgICAgICAgICAgICAgIFwia2ViYWJcIjogMTQwLFxuICAgICAgICAgICAgICAgIFwia2ViYWJDb2xvclwiOiBcImhzbCgxNTUsIDcwJSwgNTAlKVwiLFxuICAgICAgICAgICAgICAgIFwiZnJpZXNcIjogMzAsXG4gICAgICAgICAgICAgICAgXCJmcmllc0NvbG9yXCI6IFwiaHNsKDE2NywgNzAlLCA1MCUpXCIsXG4gICAgICAgICAgICAgICAgXCJkb251dFwiOiA1MSxcbiAgICAgICAgICAgICAgICBcImRvbnV0Q29sb3JcIjogXCJoc2woMTg2LCA3MCUsIDUwJSlcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImNvdW50cnlcIjogXCJBSVwiLFxuICAgICAgICAgICAgICAgIFwiaG90IGRvZ1wiOiAxNTMsXG4gICAgICAgICAgICAgICAgXCJob3QgZG9nQ29sb3JcIjogXCJoc2woMTE1LCA3MCUsIDUwJSlcIixcbiAgICAgICAgICAgICAgICBcImJ1cmdlclwiOiAxMzIsXG4gICAgICAgICAgICAgICAgXCJidXJnZXJDb2xvclwiOiBcImhzbCg4OCwgNzAlLCA1MCUpXCIsXG4gICAgICAgICAgICAgICAgXCJzYW5kd2ljaFwiOiAyNyxcbiAgICAgICAgICAgICAgICBcInNhbmR3aWNoQ29sb3JcIjogXCJoc2woMzMxLCA3MCUsIDUwJSlcIixcbiAgICAgICAgICAgICAgICBcImtlYmFiXCI6IDE1NCxcbiAgICAgICAgICAgICAgICBcImtlYmFiQ29sb3JcIjogXCJoc2woMTYyLCA3MCUsIDUwJSlcIixcbiAgICAgICAgICAgICAgICBcImZyaWVzXCI6IDgzLFxuICAgICAgICAgICAgICAgIFwiZnJpZXNDb2xvclwiOiBcImhzbCgyMjIsIDcwJSwgNTAlKVwiLFxuICAgICAgICAgICAgICAgIFwiZG9udXRcIjogMTYzLFxuICAgICAgICAgICAgICAgIFwiZG9udXRDb2xvclwiOiBcImhzbCgzMzIsIDcwJSwgNTAlKVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiY291bnRyeVwiOiBcIkFMXCIsXG4gICAgICAgICAgICAgICAgXCJob3QgZG9nXCI6IDQzLFxuICAgICAgICAgICAgICAgIFwiaG90IGRvZ0NvbG9yXCI6IFwiaHNsKDE1MywgNzAlLCA1MCUpXCIsXG4gICAgICAgICAgICAgICAgXCJidXJnZXJcIjogNDAsXG4gICAgICAgICAgICAgICAgXCJidXJnZXJDb2xvclwiOiBcImhzbCgxNDMsIDcwJSwgNTAlKVwiLFxuICAgICAgICAgICAgICAgIFwic2FuZHdpY2hcIjogOTEsXG4gICAgICAgICAgICAgICAgXCJzYW5kd2ljaENvbG9yXCI6IFwiaHNsKDE2MiwgNzAlLCA1MCUpXCIsXG4gICAgICAgICAgICAgICAgXCJrZWJhYlwiOiA4NixcbiAgICAgICAgICAgICAgICBcImtlYmFiQ29sb3JcIjogXCJoc2woMzMzLCA3MCUsIDUwJSlcIixcbiAgICAgICAgICAgICAgICBcImZyaWVzXCI6IDE5OSxcbiAgICAgICAgICAgICAgICBcImZyaWVzQ29sb3JcIjogXCJoc2woMjkwLCA3MCUsIDUwJSlcIixcbiAgICAgICAgICAgICAgICBcImRvbnV0XCI6IDE0MixcbiAgICAgICAgICAgICAgICBcImRvbnV0Q29sb3JcIjogXCJoc2woNDAsIDcwJSwgNTAlKVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiY291bnRyeVwiOiBcIkFNXCIsXG4gICAgICAgICAgICAgICAgXCJob3QgZG9nXCI6IDE3MixcbiAgICAgICAgICAgICAgICBcImhvdCBkb2dDb2xvclwiOiBcImhzbCgyNDgsIDcwJSwgNTAlKVwiLFxuICAgICAgICAgICAgICAgIFwiYnVyZ2VyXCI6IDE2NyxcbiAgICAgICAgICAgICAgICBcImJ1cmdlckNvbG9yXCI6IFwiaHNsKDIzOCwgNzAlLCA1MCUpXCIsXG4gICAgICAgICAgICAgICAgXCJzYW5kd2ljaFwiOiA2MyxcbiAgICAgICAgICAgICAgICBcInNhbmR3aWNoQ29sb3JcIjogXCJoc2woMTI2LCA3MCUsIDUwJSlcIixcbiAgICAgICAgICAgICAgICBcImtlYmFiXCI6IDExMixcbiAgICAgICAgICAgICAgICBcImtlYmFiQ29sb3JcIjogXCJoc2woMjM1LCA3MCUsIDUwJSlcIixcbiAgICAgICAgICAgICAgICBcImZyaWVzXCI6IDE0NSxcbiAgICAgICAgICAgICAgICBcImZyaWVzQ29sb3JcIjogXCJoc2woNTEsIDcwJSwgNTAlKVwiLFxuICAgICAgICAgICAgICAgIFwiZG9udXRcIjogNzIsXG4gICAgICAgICAgICAgICAgXCJkb251dENvbG9yXCI6IFwiaHNsKDgyLCA3MCUsIDUwJSlcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuXG4gICAgICAgIHJldHVybiAoXG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC0xXCIgc3R5bGU9e3toZWlnaHQ6ICc2MDBweCcsIHdpZHRoOiAnMTAwJSd9fT5cblxuICAgICAgICAgICAgICAgIDxSZXNwb25zaXZlQmFyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE9e2RhdGF9XG4gICAgICAgICAgICAgICAgICAgIGtleXM9e1tcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaG90IGRvZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJidXJnZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2FuZHdpY2hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwia2ViYWJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZnJpZXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZG9udXRcIlxuICAgICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgICAgICBpbmRleEJ5PVwiY291bnRyeVwiXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbj17e1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0b3BcIjogNTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInJpZ2h0XCI6IDEzMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYm90dG9tXCI6IDUwLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJsZWZ0XCI6IDYwXG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc9ezAuM31cbiAgICAgICAgICAgICAgICAgICAgY29sb3JzPVwibml2b1wiXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yQnk9XCJpZFwiXG4gICAgICAgICAgICAgICAgICAgIGRlZnM9e1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IFwiZG90c1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInBhdHRlcm5Eb3RzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJiYWNrZ3JvdW5kXCI6IFwiaW5oZXJpdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCIjMzhiY2IyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzaXplXCI6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYWRkaW5nXCI6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdGFnZ2VyXCI6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcImxpbmVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicGF0dGVybkxpbmVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJiYWNrZ3JvdW5kXCI6IFwiaW5oZXJpdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCIjZWVkMzEyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyb3RhdGlvblwiOiAtNDUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsaW5lV2lkdGhcIjogNixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNwYWNpbmdcIjogMTBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICAgICAgZmlsbD17W1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibWF0Y2hcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IFwiZnJpZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcImRvdHNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1hdGNoXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcInNhbmR3aWNoXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogXCJsaW5lc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgICAgIC8vIGJvcmRlckNvbG9yPVwiaW5oZXJpdDpkYXJrZXIoMS42KVwiXG4gICAgICAgICAgICAgICAgICAgIC8vIGF4aXNUb3A9bnVsbFxuICAgICAgICAgICAgICAgICAgICAvLyBheGlzUmlnaHQ9bnVsbFxuICAgICAgICAgICAgICAgICAgICAvLyBheGlzQm90dG9tPXt7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBcInRpY2tTaXplXCI6IDUsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBcInRpY2tQYWRkaW5nXCI6IDUsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBcInRpY2tSb3RhdGlvblwiOiAwLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgXCJsZWdlbmRcIjogXCJjb3VudHJ5XCIsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBcImxlZ2VuZFBvc2l0aW9uXCI6IFwibWlkZGxlXCIsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBcImxlZ2VuZE9mZnNldFwiOiAzMlxuICAgICAgICAgICAgICAgICAgICAvLyB9fVxuICAgICAgICAgICAgICAgICAgICAvLyBheGlzTGVmdD17e1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgXCJ0aWNrU2l6ZVwiOiA1LFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgXCJ0aWNrUGFkZGluZ1wiOiA1LFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgXCJ0aWNrUm90YXRpb25cIjogMCxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIFwibGVnZW5kXCI6IFwiZm9vZFwiLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgXCJsZWdlbmRQb3NpdGlvblwiOiBcIm1pZGRsZVwiLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgXCJsZWdlbmRPZmZzZXRcIjogLTQwXG4gICAgICAgICAgICAgICAgICAgIC8vIH19XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsU2tpcFdpZHRoPXsxMn1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWxTa2lwSGVpZ2h0PXsxMn1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWxUZXh0Q29sb3I9XCJpbmhlcml0OmRhcmtlcigxLjYpXCJcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZT17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgbW90aW9uU3RpZmZuZXNzPXs5MH1cbiAgICAgICAgICAgICAgICAgICAgbW90aW9uRGFtcGluZz17MTV9XG4gICAgICAgICAgICAgICAgICAgIGxlZ2VuZHM9e1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRhdGFGcm9tXCI6IFwia2V5c1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYW5jaG9yXCI6IFwiYm90dG9tLXJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkaXJlY3Rpb25cIjogXCJjb2x1bW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImp1c3RpZnlcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0cmFuc2xhdGVYXCI6IDEyMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRyYW5zbGF0ZVlcIjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIml0ZW1zU3BhY2luZ1wiOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaXRlbVdpZHRoXCI6IDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIml0ZW1IZWlnaHRcIjogMjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpdGVtRGlyZWN0aW9uXCI6IFwibGVmdC10by1yaWdodFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaXRlbU9wYWNpdHlcIjogMC44NSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN5bWJvbFNpemVcIjogMjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJlZmZlY3RzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvblwiOiBcImhvdmVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0eWxlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIml0ZW1PcGFjaXR5XCI6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICApO1xuICAgIH1cblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9wcyB7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIHtcblxufVxuXG5cbiJdfQ==