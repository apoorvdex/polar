"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Logger_1 = require("../../../../web/js/logger/Logger");
const Card_1 = __importDefault(require("reactstrap/lib/Card"));
const CardHeader_1 = __importDefault(require("reactstrap/lib/CardHeader"));
const CardBody_1 = __importDefault(require("reactstrap/lib/CardBody"));
const log = Logger_1.Logger.create();
class MailingListCard extends React.Component {
    constructor(props, context) {
        super(props, context);
    }
    render() {
        return (React.createElement(Card_1.default, null,
            React.createElement(CardHeader_1.default, null,
                React.createElement("b", null, "Mailing List")),
            React.createElement(CardBody_1.default, null,
                React.createElement("div", { className: "text-center" },
                    React.createElement("form", { action: "https://spinn3r.us10.list-manage.com/subscribe/post?u=0b1739813ebf118e92faf8fc3&id=ad3d53e837", method: "post", id: "mc-embedded-subscribe-form", name: "mc-embedded-subscribe-form", className: "validate", target: "_blank", noValidate: true },
                        React.createElement("div", { id: "mc_embed_signup", className: "input-group mt-4 mb-4" },
                            React.createElement("input", { name: "EMAIL", type: "text", className: "required email form-control mce_inline_error", placeholder: "Enter your email address", "aria-required": "true", "aria-invalid": "true" }),
                            React.createElement("div", { style: { position: 'absolute', left: '-5000px' }, "aria-hidden": "true" },
                                React.createElement("input", { type: "text", name: "b_0b1739813ebf118e92faf8fc3_ad3d53e837", tabIndex: -1, value: "" })),
                            React.createElement("span", { className: "input-group-btn" },
                                React.createElement("button", { name: "subscribe", type: "submit", id: "mc-embedded-subscribe", className: "btn" }, "Join Newsletter"))),
                        React.createElement("p", { id: "mce-responses", className: "clear" }),
                        React.createElement("div", { className: "response", id: "mce-error-response", style: { display: 'none' } }),
                        React.createElement("div", { className: "response", id: "mce-success-response", style: { display: 'none' } }),
                        React.createElement("p", null),
                        React.createElement("p", { className: "text-h5 text-muted" },
                            React.createElement("em", null, "* Your email address is safe with us. We never share your email address.")))))));
    }
}
exports.default = MailingListCard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFpbGluZ0xpc3RDYXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTWFpbGluZ0xpc3RDYXJkLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSw2Q0FBK0I7QUFDL0IsNkRBQXdEO0FBQ3hELCtEQUF1QztBQUN2QywyRUFBbUQ7QUFDbkQsdUVBQStDO0FBRS9DLE1BQU0sR0FBRyxHQUFHLGVBQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUU1QixNQUFxQixlQUFnQixTQUFRLEtBQUssQ0FBQyxTQUFtQjtJQUVsRSxZQUFZLEtBQVUsRUFBRSxPQUFZO1FBQ2hDLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFMUIsQ0FBQztJQUVNLE1BQU07UUFFVCxPQUFPLENBRUgsb0JBQUMsY0FBSTtZQUNELG9CQUFDLG9CQUFVO2dCQUFDLDhDQUFtQixDQUFhO1lBQzVDLG9CQUFDLGtCQUFRO2dCQUVMLDZCQUFLLFNBQVMsRUFBQyxhQUFhO29CQUV4Qiw4QkFBTSxNQUFNLEVBQUMsK0ZBQW1HLEVBQUMsTUFBTSxFQUFDLE1BQU0sRUFDeEgsRUFBRSxFQUFDLDRCQUE0QixFQUMvQixJQUFJLEVBQUMsNEJBQTRCLEVBQ2pDLFNBQVMsRUFBQyxVQUFVLEVBQ3BCLE1BQU0sRUFBQyxRQUFRLEVBQ2YsVUFBVTt3QkFFWiw2QkFBSyxFQUFFLEVBQUMsaUJBQWlCLEVBQUMsU0FBUyxFQUFDLHVCQUF1Qjs0QkFFbkQsK0JBQU8sSUFBSSxFQUFDLE9BQU8sRUFDWixJQUFJLEVBQUMsTUFBTSxFQUNYLFNBQVMsRUFBQyw4Q0FBOEMsRUFDeEQsV0FBVyxFQUFDLDBCQUEwQixtQkFDeEIsTUFBTSxrQkFBYyxNQUFNLEdBQUU7NEJBRWpELDZCQUFLLEtBQUssRUFBRSxFQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBQyxpQkFBYyxNQUFNO2dDQUNuRSwrQkFBTyxJQUFJLEVBQUMsTUFBTSxFQUNYLElBQUksRUFBQyx3Q0FBd0MsRUFDN0MsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBQyxFQUFFLEdBQUUsQ0FDN0I7NEJBRU4sOEJBQU0sU0FBUyxFQUFDLGlCQUFpQjtnQ0FDN0IsZ0NBQVEsSUFBSSxFQUFDLFdBQVcsRUFDaEIsSUFBSSxFQUFDLFFBQVEsRUFDYixFQUFFLEVBQUMsdUJBQXVCLEVBQzFCLFNBQVMsRUFBQyxLQUFLLHNCQUF5QixDQUM3QyxDQUVUO3dCQUVOLDJCQUFHLEVBQUUsRUFBQyxlQUFlLEVBQUMsU0FBUyxFQUFDLE9BQU8sR0FDbkM7d0JBRUosNkJBQUssU0FBUyxFQUFDLFVBQVUsRUFBQyxFQUFFLEVBQUMsb0JBQW9CLEVBQUMsS0FBSyxFQUFFLEVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBQyxHQUFRO3dCQUNsRiw2QkFBSyxTQUFTLEVBQUMsVUFBVSxFQUFDLEVBQUUsRUFBQyxzQkFBc0IsRUFBQyxLQUFLLEVBQUUsRUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFDLEdBQVE7d0JBQ3BGLDhCQUFPO3dCQUVQLDJCQUFHLFNBQVMsRUFBQyxvQkFBb0I7NEJBQzdCLDJHQUVLLENBQ0wsQ0FFRCxDQUNMLENBRUMsQ0FDUixDQUVWLENBQUM7SUFDTixDQUFDO0NBRUo7QUFyRUQsa0NBcUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJy4uLy4uLy4uLy4uL3dlYi9qcy9sb2dnZXIvTG9nZ2VyJztcbmltcG9ydCBDYXJkIGZyb20gJ3JlYWN0c3RyYXAvbGliL0NhcmQnO1xuaW1wb3J0IENhcmRIZWFkZXIgZnJvbSAncmVhY3RzdHJhcC9saWIvQ2FyZEhlYWRlcic7XG5pbXBvcnQgQ2FyZEJvZHkgZnJvbSAncmVhY3RzdHJhcC9saWIvQ2FyZEJvZHknO1xuXG5jb25zdCBsb2cgPSBMb2dnZXIuY3JlYXRlKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1haWxpbmdMaXN0Q2FyZCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxhbnksIGFueT4ge1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IGFueSwgY29udGV4dDogYW55KSB7XG4gICAgICAgIHN1cGVyKHByb3BzLCBjb250ZXh0KTtcblxuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG5cbiAgICAgICAgcmV0dXJuIChcblxuICAgICAgICAgICAgPENhcmQ+XG4gICAgICAgICAgICAgICAgPENhcmRIZWFkZXI+PGI+TWFpbGluZyBMaXN0PC9iPjwvQ2FyZEhlYWRlcj5cbiAgICAgICAgICAgICAgICA8Q2FyZEJvZHk+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBhY3Rpb249XCJodHRwczovL3NwaW5uM3IudXMxMC5saXN0LW1hbmFnZS5jb20vc3Vic2NyaWJlL3Bvc3Q/dT0wYjE3Mzk4MTNlYmYxMThlOTJmYWY4ZmMzJmFtcDtpZD1hZDNkNTNlODM3XCIgbWV0aG9kPVwicG9zdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cIm1jLWVtYmVkZGVkLXN1YnNjcmliZS1mb3JtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJtYy1lbWJlZGRlZC1zdWJzY3JpYmUtZm9ybVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ2YWxpZGF0ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9WYWxpZGF0ZT5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJtY19lbWJlZF9zaWdudXBcIiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cCBtdC00IG1iLTRcIj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJFTUFJTFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInJlcXVpcmVkIGVtYWlsIGZvcm0tY29udHJvbCBtY2VfaW5saW5lX2Vycm9yXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHlvdXIgZW1haWwgYWRkcmVzc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1yZXF1aXJlZD1cInRydWVcIiBhcmlhLWludmFsaWQ9XCJ0cnVlXCIvPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7cG9zaXRpb246ICdhYnNvbHV0ZScsIGxlZnQ6ICctNTAwMHB4J319IGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJiXzBiMTczOTgxM2ViZjExOGU5MmZhZjhmYzNfYWQzZDUzZTgzN1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYkluZGV4PXstMX0gdmFsdWU9XCJcIi8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAtYnRuXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBuYW1lPVwic3Vic2NyaWJlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJtYy1lbWJlZGRlZC1zdWJzY3JpYmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuXCI+Sm9pbiBOZXdzbGV0dGVyPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGlkPVwibWNlLXJlc3BvbnNlc1wiIGNsYXNzTmFtZT1cImNsZWFyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZXNwb25zZVwiIGlkPVwibWNlLWVycm9yLXJlc3BvbnNlXCIgc3R5bGU9e3tkaXNwbGF5OiAnbm9uZSd9fT48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlc3BvbnNlXCIgaWQ9XCJtY2Utc3VjY2Vzcy1yZXNwb25zZVwiIHN0eWxlPXt7ZGlzcGxheTogJ25vbmUnfX0+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PC9wPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1oNSB0ZXh0LW11dGVkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogWW91ciBlbWFpbCBhZGRyZXNzIGlzIHNhZmUgd2l0aCB1cy4gV2UgbmV2ZXIgc2hhcmUgeW91ciBlbWFpbCBhZGRyZXNzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDwvQ2FyZEJvZHk+XG4gICAgICAgICAgICA8L0NhcmQ+XG5cbiAgICAgICAgKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUHJvcHMge1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIHtcblxufVxuXG5cbiJdfQ==